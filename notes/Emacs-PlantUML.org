#+TITLE:       Emacs 绘制 PlantUML
#+AUTHOR:      Dylan Yang
#+EMAIL:       banshiliuli1990@sina.com
#+DATE:        2016-10-19 三
#+URI:         /notes/%y/%m/%d/emacs-plantuml
#+KEYWORDS:    Emacs, PlantUML, Org-mode
#+TAGS:        PlantUML
#+LANGUAGE:    en
#+OPTIONS:     H:3 num:nil toc:nil \n:nil ::t |:t ^:nil -:nil f:t *:t <:t
#+DESCRIPTION: 在 Org-mode 中绘制 PlantUML 内容。
#+PROPERTY:    header-args :eval never-export :exports both

* PlantUML 支持的图形有：
- sequence diagram
- use case diagram
- class diagram
- activity diagram
- component diagram
- state diagram
- object diagram
- wireframe graphical interface
* 可以生成 png、svg 和二进制图片
#+BEGIN_SRC plantuml :file ../images/plantuml01.png
Alice -> Bob: synchronous call
Alice -> Bob: asynchronous call
#+END_SRC

#+RESULTS:
[[file:../images/plantuml01.png]]

* 顺序图（Sequence Diagram）
** 顺序用 -> , --> , <- , <-- 来绘制参与者（Participants）之间的消息（Message）
#+BEGIN_SRC plantuml :file ../images/plantuml02.png
Alice -> Bob: Authentication Request
Bob --> Alice: Authentication Response

Alice -> Bob: Another authentication Request
Alice <-- Bob: Another authentication Response

#+END_SRC

#+RESULTS:
[[file:../images/plantuml02.png]]

- svg 图在 IE 下不支持，需要由 Chrome 打开
** 注释语句
- 以单引号开始头行，是单行注释，多行注释用 "/'" 来表示注释开双，以 "'/" 表示注释结束
** 申明参与者
  - actor 行动者
  - boundary 边界，范围，分界线
  - control 控制，管理操纵
  - entity 实体，实际存在物，本质
  - database 数据库，资料库
*** 不同的参与者类型，其图标也是不一样的
#+BEGIN_SRC plantuml :file ../images/plantuml03.png
actor Foo1
boundary Foo2
control Foo3
entity Foo4
database Foo5
Foo1 -> Foo2 : To boundary
Foo1 -> Foo3 : To control
Foo1 -> Foo4 : To entity
Foo1 -> Foo5 : To database
#+END_SRC

#+RESULTS:
[[file:../images/plantuml03.png]]

*** 利用 as 关键词可以为参与者起一个别名，这样在对引用长名的参与者时，会方便很多。在参与者申明语句后，行尾可以追加背景色的设置，只要把标准的 HTML 颜色值写在后面
#+BEGIN_SRC plantuml :file ../images/plantum03.png
actor Bob #red
' The only defference between actor
' and participant is the drawing
participant Alice
participant "I have a really\nlong name" as L #99ff99
/' You can also declare :
participant L as "I have a really\nlong name" #99ff99
'/
Alice -> Bob : Authentication Request
Bob -> Alice : Authentication Response
Bob -> L : Log transaction
#+END_SRC

#+RESULTS:
[[file:../images/plantum03.png]]

** 使用非字母的参与者名称(Use non-letters in participants）
 - 针对非字母的参与者名，我们可以使用双引号，同样也可以为比较长的名字起个别名，方法同上使用 as 关键词。
 - 使用上面的关键词来申明参与者，是一种显示申明；而采用引号来申明参与者则是一种隐示申明方法，它不需要专门的位置去定义
#+BEGIN_SRC plantuml :file ../images/plantuml04.png
Alice -> "Bob()" : Hello
"Bob()" -> "This is very\nlong" as Long
' You can also declare:
' "Bob()" -> Long as "This is very\nlong"
Long --> "Bob()" : ok
#+END_SRC

#+RESULTS:
[[file:../images/plantuml04.png]]

** 发送消息给自己（Message to Self）
- 一个参与者可以给自己发送消息，消息名如果需要有多行文本，可以用 \n 来表示换行
#+BEGIN_SRC plantuml :file ../images/plantum05.png
Alice -> Alice : This is a signal to self.\nIt also demonstrates\nmultiline \ntext
#+END_SRC

#+RESULTS:
[[file:../images/plantum05.png]]

** 改变箭头的样式（Change arrow style）
- 在用例图里可以通过以下方式来改变箭头的样式：
  - 使用 \ 或 / 来替换 < 或 > 可以让箭头只显示上半部分或下半部分
  - 重复输入简单或斜杠（ >> //），用来绘制空心箭头
  - 使用双横线 -- 替代 - 可以用来绘制点线
  - 在箭头后面加个 o 可以在简单前绘制一个圆圈
  - 使用 <-> 可用来绘制双向箭头
#+BEGIN_SRC plantuml :file ../images/plantuml06.png
Bob -> Alice
Bob ->> Alice
Bob -\ Alice
Bob \\- Alice
Bob //-- Alice

Bob ->o Alice
Bob o\\-- Alice

Bob <-> Alice
Bob <<-\\o Alice
#+END_SRC

#+RESULTS:
[[file:../images/plantuml06.png]]

** 改变箭头的颜色（Change arrow color）
- 要改变箭头的颜色，可以使用 HTML 颜色符号，参看下面的例子
#+BEGIN_SRC plantuml :file ../images/plantuml07.png
Bob -[#red]> Alice : hello
Alice -[#0000ff]-> Bob : ok
#+END_SRC

#+RESULTS:
[[file:../images/plantuml07.png]]

** 消息序号（Mesage sequence numbering）
- 关键词 autonumber 用来自动的给消息添加上序号
#+BEGIN_SRC plantuml :file ../images/plantuml08.png
autonumber
Bob -> Alice : Authentication Request
Bob <- Alice : Authentication Response
#+END_SRC

#+RESULTS:
[[file:../images/plantuml08.png]]

- 如果需要指定一个起始号码，可以直接在 autonumber 后面加个数字就行了，如果要设置自动增量，再在后面加一个数字就行了（autonumber start increment）
#+BEGIN_SRC plantuml :file ../images/plantuml09.png
autonumber
Bob -> Alice : Authentication Request
Bob <- Alice : Authentication Response

autonumber 15
Bob -> Alice : Another authentication Request
Bob <- Alice : Another authentication Response

autonumber 40 10
Bob -> Alice : Yet another authentication Request
Bob <- Alice : Yet another authentication Response
#+END_SRC

#+RESULTS:
[[file:../images/plantuml09.png]]

- 我们也可以为序号指定数字格式，这个格式化的过程实际上是 Java 类 DecimalFormat 来执行的（0 表示数字， # 缺省补零倍数）
- 同样的，也可以使用一些 HTML 标签来控制数字的样式
#+BEGIN_SRC plantuml :file ../images/plantuml10.png
autonumber "<b>[000]"
Bob -> Alice : Authentication Request
Bob <- Alice : Authentication Response

autonumber 15 "<b>(<u>##</u>)"
Bob -> Alice : Another authentication Request
Bob <- Alice : Another authentication Response

autonumber 40 10 "<font color=red>Message 0 "
Bob -> Alice : Yet another authentication Request
Bob <- Alice : Yet another authentication Response
#+END_SRC

#+RESULTS:
[[file:../images/plantuml10.png]]

** 标题（Title）
- 要给图形加一个标题可以用 title 关键词来设置
#+BEGIN_SRC plantuml :file ../images/plantuml11.png
title Simple Comunication example
Alice -> Bob : Authentication Request
Bob --> Alice : Authentication Response
#+END_SRC

#+RESULTS:
[[file:../images/plantuml11.png]]

** 图形图例（Legend the diagram）
- 使用 legend 和 end legend 关键词可以设置图形的图例，图例可以设为左对齐、右对齐和居中对齐
#+BEGIN_SRC plantuml :file ../images/plantuml12.png
Alice -> Bob : Hello
legend right
Short
legend
endlegend
#+END_SRC

#+RESULTS:
[[file:../images/plantuml12.png]]

** 分割图形（Splitting diagrams）
- 关键词 newpage 是用来把图形分割成几个图片的。每个被分割出来的图片可以看作是一个新的页面（new page），如果要给新的页面添加一个标题，可以紧跟在关键词 newpage 之后来设置。
- 使用这个方法可以方便的在 word 里把较长的图形分别打印到几个不同的页面上（有点分页符的概念）
#+BEGIN_SRC plantuml :file ../images/plantuml13.png
Bliss -> Tia : I love you
Bliss -> Tia : I miss you

newpage 

Bliss -> Tia : Let's go home
Bliss -> Tia : Quick

newpage A title for the\nlast page

Tia -> Bliss : Give me money
Tia -> Bliss : No money No love
#+END_SRC

#+RESULTS:
[[file:../images/plantuml13.png]]

** 消息分组（Grouping message）
- 有时候可能需要对消息进行分组，那么可以使用下面的关键词来实现
  - alt/else
  - opt
  - loop
  - par
  - break
  - critical
  - group，这个关键词后面的文字会作为组名显示在图形上
- 上面的关键词后可以添加一些文本用来显示在头部（注：Group 除外，因为它后面的文本用来显示在组名的位置）。在组嵌套组的结构里可以用关键词 end 来关闭组或者说是表示一个组符号的结束符（类似 if/endif）
#+BEGIN_SRC plantuml :file ../images/plantuml14.png
  Alice -> Bob : Authentication Request
  alt successful case
    Bob -> Alice : Authentication Accepted
  else some kind of failure
    Bob -> Alice : authentication Failure
    group My own label
      Alice -> Log : Log attack start
      loop 1000 times
        Alice -> Bob : DNS Attack
      end
      Alice -> Log : Loag alice end
    end
  else Another type of failue
    Bob -> Alice : Please repeat
  end
#+END_SRC

#+RESULTS:
[[file:../images/plantuml14.png]]

** 消息注解（Notes on messages）
- 我们可能经常会在消息的左边或右边使用注解，要添加注解，只要使用 note left 或 note right 关键词就可以了。
#+BEGIN_SRC plantuml :file ../images/plantuml15.png
  Alice -> Bob : hello
  note left : this is a first note

  Bob -> Alice : ok
  note right : this is anther note

  Bob -> Bob : I am thinking
  note left 
       a note
       can also be defined
       on several lines
  end note
#+END_SRC

#+RESULTS:
[[file:../images/plantuml15.png]]

** 一些其他的注解方式（Some other notes）
- 通过使用关键词 note left of, note right of 或 note over，我们还可以把注解放置在与之相关的参与者的左边或右边，或下方。
- 通过 改变注解的背景色，我们还可以高亮一个注解文本块。
- 如果 要使用多行注解，可以使用关键词 end note 来表示注解的结束。
#+BEGIN_SRC plantuml :file ../images/plantuml16.png
  participant Alice
  participant Bob
  note left of Alice #aqua
       This is displayed
       left of Alice.
  end note

  note right of Alice : This is displayed right os Alice.
  
  note over Alice : This displayed over Alice.

  note over Alice, Bob #FFAAAA : This is displayed\n over Bob and Alice.

  note over Bob, Alice
       This is yet another
       example of 
       a long note.
  end note
#+END_SRC

#+RESULTS:
[[file:../images/plantuml16.png]]

** 使用 HTML 进行格式化（Formatting using HTML）
- 我们可以使用少量的 HTML 标签来格式化文本：
  - <b> 加粗文本
  - <u> 或 <u:#AAAAA> 或 <u:colorName> 用来加下划线
  - <i> 斜体
  - <s> 或 <s:#AAAAA> 或 <s:colorName> 用来加删除线
  - <w> 或 <w:#AAAAA> 或 <w:colorName> 用来加波浪线
  - <color:#AAAAA> 或 <color:colorName> 用来设置文本颜色
  - <back:#AAAAA> 或 <back:colorName> 用来设置背景颜色
  - <size:nn> 设置字体大小
  - <img src = "file"> 或者 <img:file> 用来添加图片，图片文件必须可以访问得到的才行。
  - <img src = "http://url"> 或者 <img:http://url> 用来添加一个互联网图片，同样的图片地址必须是可用的才行。
#+BEGIN_SRC plantuml :file ../images/plantuml17.png
participant Alice
participant "The <b>Famous</b> Bob" as Bob

Alice -> Bob : A <i>well formated</i> message
note right of Alice
  This is <back:cadetblue><size:18>displayed</size></back>
  <b>left of</b> Alice
end note
note left of Bob
  <u:red>This</u> is <color #118888>displayed</color>
  <b><color purple>left of</color> <s:red>Alice</strike> Bob</b>
end note
note over Alice, Bob
  <w:#FF33FF>This is hosted</w> by <img ./../images/code.png>
end note
#+END_SRC

#+RESULTS:
[[file:../images/plantuml17.png]]

* 用例图(Use Case Diagram)
** 用例(Usecase)
- 用例可以用一对小括号括起来表示，也可以使用 usecase 关键词来定义。用例也可以通过使用 as 关键词来设置别名，在建立关系的时候可以使用别名。
#+BEGIN_SRC plantuml :file ../images/plantuml18.png
@startuml
(Usecase One)
(Usecase Two) as (UC2)
usecase UC3
usecase (Last\nusecase) as UC4
@enduml
#+END_SRC

#+RESULTS:
[[file:../images/plantuml18.png]]

** 参与者(Actors)
- 定义参与者时，可以把参与者的名称放在两个冒号的中间，也可以用 actor 关键词来来定义参与者。同样参与者也可以使用别名。
#+BEGIN_SRC plantuml :file ../images/plantuml19.png
@startuml
:Actor 1:
:Another\nactor: as Men2
actor Men3
actor :Last actor: as Men4
@enduml
#+END_SRC

#+RESULTS:
[[file:../images/plantuml19.png]]

- 示例
#+BEGIN_SRC plantuml :file ../images/plantuml20.png
left to right direction
skinparam packageStyle rect
actor customer
actor clerk
rectangle checkout {
  customer -- (checkout)
  (checkout) .> (payment) : include
  (help) .> (checkout) : extends
  (checkout) -- clerk
}
#+END_SRC

#+RESULTS:
[[file:../images/plantuml20.png]]

* 类图(Class Diagram)
** 示例 1

* 活动图(Activity Diagram)
** 简单活动(Simple Activity)
- 在活动图中，你可以使用(*)来表示活动开始点和结束点。使用 --> 来表示箭头。
#+BEGIN_SRC plantuml :file ../images/plantuml21.png
(*) --> "First Activity"
"First Activity" --> (*)
#+END_SRC

#+RESULTS:
[[file:../images/plantuml21.png]]

** 带标注的简单(Label on arrows)
- 缺省情况下，活动图的箭头是没有标注的。但我们可以通过方括号 [labels] 来设置标注，只要把它放在箭头定义的后面就可以了。
#+BEGIN_SRC plantuml :file ../images/plantuml22.png
(*) --> "First Activity"
--> [You can put also labels] "Second Activity"
--> (*)
#+END_SRC

#+RESULTS:
[[file:../images/plantuml22.png]]

** 改变箭头的方向(Changing arrow direction)
- 我们可以使用 -> 创建一个水平箭头，也可以通过下面的方式来改变箭头的方向:
  - -down-> 向下(这个是默认的，等同于 =->=)
  - -right-> 向右
  - -left-> 向左
  - -up-> 向上

#+BEGIN_SRC plantuml :file ../images/plantuml23.png
(*) --> "1"
-right-> "2"
-down-> "3"
-left-> "4"
-le-> "5"
-up-> "6"
-l-> "7"
-do-> "8"
-d-> "9"
-> "10"
--> (*)
#+END_SRC

#+RESULTS:
[[file:../images/plantuml23.png]]

- 在描述箭头时，up|down|left|right 这几个单词的写法可以简化，用单词开头的一个或两个字母来替换就行了，比如 -down-> 也可以写成 -d-> 或者 -do-> 。

** 分支(Branches)
- 在 PlantUML 里，我们可以使用 if/then/else 关键词来定义分支。
#+BEGIN_SRC plantuml :file ../images/plantuml24.png
(*) --> "Initialisation"

if " Some Test" then
  --> [ture] "Some Activity"
  --> "Another Activity"
  -right-> (*)
else
  -> [false] "Something else"
  --> [Ending process] (*)
endif
#+END_SRC

#+RESULTS:
[[file:../images/plantuml24.png]]

** 多分支(More on Branches)
- 直接给例子:
#+BEGIN_SRC plantuml :file ../images/plantuml25.png
(*) --> if "Some Test" then
    -->[true] "1"

    if "" then
      -> "3" as a3
    else
      if "Other test" then
        -left-> "5"
        --> (*)
      else
        --> "6"
        --> (*)
      endif
    endif

  else
    ->[false] "2"
    --> (*)
  endif

  a3 --> if "last test" then
    --> "7"
    --> (*)
  else
    -> "8"
    --> (*)
  endif
#+END_SRC

#+RESULTS:
[[file:../images/plantuml25.png]]

** 同步块(Synchronization)
- 同步块可以用 "===code===" 来表示。
#+BEGIN_SRC plantuml :file ../images/plantuml26.png
(*) --> ===B1===
  --> "parallel Activity 1"
  --> ===B2===

  ===B1=== --> "Parallel Activity 2"
  --> ===B2===

  --> (*)
#+END_SRC

#+RESULTS:
[[file:../images/plantuml26.png]]

- 一个小实例
#+BEGIN_SRC plantuml :file ../images/plantuml27.png
(*) --> "Select site"
  --> "Commission architect"
  --> "Develop plan"
  --> "Bid plan" as bp
  if "" then
    -->[else] ===B1===
    --> "Do site work"
    --> ===B2===
    ===B1=== --> "Do trade work"
    --> ===B2===
    --> "Finish construction"
    --> (*)
  else
    -u->[not accepted] bp
  endif
#+END_SRC

#+RESULTS:
[[file:../images/plantuml27.png]]

** 长文本的活动描述(Long activity description)
- 在定义活动的时候，有时需要用多行文字来描述这个活动，这时我们可以在描述里添加换行符 \n，也可以使用少量的 HTML 标签。
- 以下是可以使用的 HTML 标签:
#+BEGIN_SRC html
<b>
<i>
<font size="nn"> or <size:nn> to change font size
<font color="#AAAAAA"> or <font color="colorName">
<color:#AAAAAA> or <color:colorName>
<img:file.png> to include an image
#+END_SRC

- 针对较长文本描述活动，可以起一个较短的别名(如:  _\"long text" as A1_ )，在图形定义脚本中可以使用别名，参看下面的例子中的 _A1_ 。

#+BEGIN_SRC plantuml :file ../images/plantuml28.png
(*) -l-> "this <size:20>activity</size>
         is <b>very</b> <color:red>long</color>
         and defined on serveral lines
         that contains many <i>text</i>" as A1
-up-> "Another activity\n on serveral lines"

A1 --> "Short activity\n<img:images/code.png>"
#+END_SRC

#+RESULTS:
[[file:../images/plantuml28.png]]

** 注释(Notes)
- PlantUML 可以通过在脚本里使用 note 来添加注释文本块。

*note commands:*
 - note left
 - note right
 - note top
 - note bottom

- PlantUML 用上面列表里的命令来标注一个注释块的开始，然后用 end note 来标注注释块的结束。同时 note 命令也允许使用单选定义一个广西块，详见下面的例子。
#+BEGIN_SRC plantuml :file ../images/plantuml29.png
(*) --> "Some Activity" as s
  note right: This activity has to be defined
  s --> (*)
  note left
    This note is on
    serveral lines
  end note
#+END_SRC

#+RESULTS:
[[file:../images/plantuml29.png]]

** 分区(Partition)
- 通过分区关键词 partition 可以定义一个分区，并且可以使用 HTML 的颜色码可颜色名来设置分区的背景色。在你申明一个活动时，PlantUML 会自动的把这个活动对象放置到最后使用的分区中。当然，也可以使用 end partition 关闭分区定义。

#+BEGIN_SRC plantuml :file ../images/plantuml30.png
partition Conductor
  (*) --> "Climbs on Platform"
  --> === S1 ===
  --> Bows
  end partition

  partition Aduience #LightSkyBlue
  === S1 === --> Applauds

  partition Conductor
  Bows --> === S2 ===
  --> WavesArmes
  Applauds --> === S2 ===
  end partition

  partition Orchestra #CCCCEE
  WavesArmes --> Introduction
  --> "Play music"
 end partition
#+END_SRC

#+RESULTS:
[[file:../images/plantuml30.png]]

** 图形标题(Title the diagram)
- 标题关键词 title 用来设置一个图形的标题广西，我们可以在 title 和 end title 两个关键词之间放置比较长的标题文本。
#+BEGIN_SRC plantuml :file ../images/plantuml31.png
title Simple example\nof title
  (*) --> "First activity"
  --> (*)
#+END_SRC

#+RESULTS:
[[file:../images/plantuml31.png]]

** 皮肤(Skinparam)
- 皮肤命令 skinparam 可以改变图形的颜色和字体。这些命令可以在以下的位置中使用:
  - 在图形定义里使用
  - 在包含的文件里使用
  - 在一个配置文件里使用，这个配置文件一般由命令行或 ANT 的 Task 来提供。
#+BEGIN_SRC plantuml :file ../images/plantuml32.png
skinparam backgroundColor #AAFFFF
  skinparam activityStartColor red
  skinparam activityBarColor SaddleBrown
  skinparam activityEndColor Silver
  skinparam activityBackgroundColor Peru
  skinparam activityBorderColor Peru
  skinparam activityFontName Impact
  skinparam activityShape octagon

  (*) --> "Climbs on Platform"
  --> === S1 ===
  --> Bows
  --> === S2 ===
  --> WavesArmes
  --> (*)
#+END_SRC

#+RESULTS:
[[file:../images/plantuml32.png]]

*使用 skinparam activityShape octagon 命令可以把活动图形改成八角 形的。(好像没效果！)* 

** 完整示例(Complete Example)
#+BEGIN_SRC plantuml :file ../images/plantuml32.png
'http://click.sourceforge.net/../images/activity-diagram-small.png
  title Servlet Container

  (*) --> "ClickServlet.handleRequest()"
  --> "new Page"

  if "Page.onSecurityCheck" then
    ->[true] "Page.onInit()"

    if "isForward?" then
      ->[no] "Process controls"

      if "continue processing?" then
        -->[yes] ===RENDERING===
      else
        -->[no] ===REDIRECT_CHECK===
      endif

    else
      -->[yes] ===RENDERING===
    endif

    if "is Post?" then
      -->[yes] "Page.onPost()"
      --> "Page.onRender()" as render
      --> ===REDIRECT_CHECK===
    else
      -->[no] "Page.onGet()"
      --> render
    endif

  else
    -->[false] ===REDIRECT_CHECK===
  endif

  if "Do redirect?" then
    ->[yes] "redirect request"
    --> ==BEFORE_DESTORY===
  else
    if "Do Forward?" then
      -left->[yes] "Forward request"
      --> ==BEFORE_DESTORY===
    else
      -right->[no] "Render page template"
      --> ==BEFORE_DESTORY===
    endif
  endif

  --> "Page.onDestory()"
  -->(*)
#+END_SRC

#+RESULTS:
[[file:../images/plantuml32.png]]

* 活动图 Beta
- Beta 版本的活动图简化了活动图的符号定义。
** 简单活动(Simple Activity)
- 在这个例子中，活动元素从一个：开始，然后到一个；结束。开始和结束符号，可以用 start 和 end 两个关键词来表示。
#+BEGIN_SRC plantuml :file ../images/plantuml33.png
start

:Hello world;

:This is on defined on
serveral **lines**;

Stop
#+END_SRC

#+RESULTS:
[[file:../images/plantuml33.png]]

** 条件符号(Conditional)
- 和之前一样，还是使用 if,then 和 else 关键词，但分支条件的标签 Labels 可以直接写在关键词 then 和 else 的后面，并用小括号括起来就可以了(如：(labels))。
#+BEGIN_SRC plantuml :file ../images/plantuml34.png
start
if (graphviz installed?) then (yes)
   :process all\ndiagrams;
else (no)
   :process only
   __sequence__ and __activity__ diagrams;
endif

stop
#+END_SRC

#+RESULTS:
[[file:../images/plantuml34.png]]

- 在新版本里除了使用 else 外，还新加了一个 elseif 关键词，有了这个语法，我们就可以绘制一系列条件的活动图。
#+BEGIN_SRC plantuml :file ../images/plantuml35.png
start
  if (condition A) then (yes)
    :Text1;
  elseif (condition B) then (yes)
    :Text2;
    stop
  elseif (condition C) then (yes)
    :Text 3;
  elseif (condition D) then (yes)
    :Text 4;
  else (nothing)
    :Text else;
  endif
  stop
#+END_SRC

#+RESULTS:
[[file:../images/plantuml35.png]]

** 重复循环(Repeat Loop)
- 通过 repeat 和 repeat while 关键词可以创建循环结构的图形。
#+BEGIN_SRC plantuml :file ../images/plantuml35.png
start

  repeat
    :read data;
    :generate diagrams;
  repeat while (more data?)

  stop
#+END_SRC

#+RESULTS:
[[file:../images/plantuml35.png]]

** 条件循环(While Loop)
- 要创建条件循环结构的图形可以通过使用 while 和 end while 两个关键词来实现。如果要给条件分支加上标注，可以在 while 条件后加上一个 is 关键词，然后用小括号括上要标注的内容；在 end while 后可以直接用小括号括上要标注的内容。
#+BEGIN_SRC plantuml :file ../images/plantuml36.png
start
  while (data available?) is (not empty)
    :read data;
    :generate diagrams;
  end while (empty)
stop
#+END_SRC

#+RESULTS:
[[file:../images/plantuml36.png]]

** 并行处理(Parallel Processing)
- fork, fork again 和 end fork 三个关键词用来表示并行处理结构。
#+BEGIN_SRC plantuml :file ../images/plantuml37.png
start
  if (multiprocessor?) then (yes)
    fork
      :Treatment 1;
    fork again
      :Treatment 2;
    end fork
  else (monoproc)
    :Treatment 1;
    :Treatment 2;
  endif
stop
#+END_SRC

#+RESULTS:
[[file:../images/plantuml37.png]]

** 注释的文本样式(Notes)
- 注解里的文本样式是通过 _Creole wiki syntax_ 来实现的。
#+BEGIN_SRC plantuml :file ../images/plantuml38.png
start
  :fool;
  note left: This is a note
  :foo2;
  note right
    This note is on serveral
    //lines// and can
    contain <b>HTML</b>
    ====
    * Calling the method ""foo()"" is prohibited
  end note
stop
#+END_SRC

#+RESULTS:
[[file:../images/plantuml38.png]]

** 颜色(Color)
- 为活动元素指定背景色可以直接在活动开始标记：前加上颜色描述：
#+BEGIN_SRC plantuml :file ../images/plantuml39.png
start
  #purple:starting progress;
  :reading configuration files
  These files must do be edited at this point;
  #00AAAA:ending of the process;
stop
#+END_SRC

#+RESULTS:
[[file:../images/plantuml39.png]]

** 完整示例(Complete Example)
#+BEGIN_SRC plantuml :file ../images/plantuml40.png
start
  :ClickServlet.handleRequest();
  :new page;
  if (Page.onSecurityCheck) then (true)
    :(Page.onInit();
    if (isForward?) then (no)
      :Process controls;
      if (continue processing?) then (no)
        stop
      endif

      if (isPost?) then (yes)
        :Page.onPost();
      else (no)
        :Page.onGet();
      endif
      :Page.onRender();
    endif
  else (false)
  endif

  if (do redirect?) then (yes)
    :redirect process;
  else
    if (do forward?) then (yes)
      :Forward request;
    else (no)
      :Render page template;
    endif
  endif

stop
#+END_SRC

#+RESULTS:
[[file:../images/plantuml40.png]]
