<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>在 Emacs 中使用 rime 输入法</title>
      <link href="/archives/8b0db37f.html"/>
      <url>/archives/8b0db37f.html</url>
      
        <content type="html"><![CDATA[<p>在 Emacs 中使用外部输入法，最大的问题是在切换 evil 的模式的时候，对输入来说会有延迟，因为需要手工将输入法切换到对应的英文模式，才能正常使用快捷键。</p><p>但是如果使用的是 Emacs 自己的输入功能，则不需要做这些同步，只需要从 insert 模式中退出即可，这种操作对 Emacs 来说真的是太方便了。</p><p>经过几次尝试之后，一点点测试出了配置过程中出现的问题，现在整理如下。</p><h2 id="编译-librime"><a class="header-anchor" href="#编译-librime"></a>编译 librime</h2><p>因为本人使用的是 Mac 系统，所以需要先安装一些工具。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install cmake git boost</span><br></pre></td></tr></table></figure><p>这三个工具是编译 liberime 用的，本来想从 GitHub 上下载，但是有问题，所以决定自己编译一份，这里测试了一下，只使用 CommandLineTools 是不行的，需要安全安装 xcode 才可以。</p><ol><li>下载 librime 版本库</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone --recursive https://github.com/rime/librime.git</span><br></pre></td></tr></table></figure><ol start="2"><li>编译第三方库</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd librime</span><br><span class="line">make xcode/thirdparty</span><br></pre></td></tr></table></figure><ol start="3"><li>编译 librime</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make xcode</span><br></pre></td></tr></table></figure><h2 id="编译-liberime"><a class="header-anchor" href="#编译-liberime"></a>编译 liberime</h2><p>编译这个是依赖于 <em>librime</em> 文件的，需要先将依赖引进来。</p><ol><li>下载 <em>liberime</em> 项目</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:merrickluo/liberime.git</span><br></pre></td></tr></table></figure><ol start="2"><li>引入 <em>librime</em> 依赖</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export RIME_PATH=~/DEV/librime</span><br></pre></td></tr></table></figure><ol start="3"><li>编译 <em>liberime</em> 文件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make liberime</span><br></pre></td></tr></table></figure><ol start="4"><li>然后将 <em>liberime</em> 加入到 <em>.emacs.d</em> 项目中</li></ol><p>如果不想自己编译的话，也可以直接下载我编译好的文件，但是需要把文件存放到一个指定的路径下。</p><p>下载路径：<a href="https://github.com/AboutEmacs/.emacs.d/releases/download/1.0/liberime.so" target="_blank" rel="noopener">liberime.so</a></p><h2 id="增加-Emacs-配置"><a class="header-anchor" href="#增加-Emacs-配置"></a>增加 Emacs 配置</h2><p>在增加配置之前，先检查一下 Emacs 是否支持 <code>module-load</code> 如果不支持，请优先安装支持的版本，建议使用 <a href="https://github.com/railwaycat/homebrew-emacsmacport" target="_blank" rel="noopener">emacs-mac</a> 中的版本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">(use-package pyim</span><br><span class="line">  :demand t</span><br><span class="line">  :diminish pyim-isearch-mode</span><br><span class="line">  :init</span><br><span class="line">  (setq default-input-method &quot;pyim&quot;</span><br><span class="line">        pyim-title &quot;ㄓ&quot;</span><br><span class="line">        pyim-default-scheme &#39;rime</span><br><span class="line">        pyim-page-length 7</span><br><span class="line">        pyim-page-tooltip &#39;proframe)</span><br><span class="line">  :config</span><br><span class="line">  (setq-default pyim-english-input-switch-functions</span><br><span class="line">                &#39;(pyim-probe-dynamic-english</span><br><span class="line">                  pyim-probe-evil-normal-mode</span><br><span class="line">                  pyim-probe-program-mode</span><br><span class="line">                  pyim-probe-org-structure-template))</span><br><span class="line"></span><br><span class="line">  (setq-default pyim-punctuation-half-width-functions</span><br><span class="line">                &#39;(pyim-probe-punctuation-line-beginning</span><br><span class="line">                  pyim-probe-punctuation-after-punctuation))</span><br><span class="line">  (pyim-isearch-mode t)</span><br><span class="line">  :bind* (&quot;M-j&quot; . pyim-convert-string-at-point))</span><br><span class="line"></span><br><span class="line">(use-package liberime</span><br><span class="line">  :load-path (lambda () (expand-file-name &quot;rime&quot; user-emacs-directory))</span><br><span class="line">  :custom</span><br><span class="line">  (rime_share_data_dir &quot;&#x2F;Library&#x2F;Input Methods&#x2F;Squirrel.app&#x2F;Contents&#x2F;SharedSupport&#x2F;&quot;)</span><br><span class="line">  (rime_user_data_dir (expand-file-name &quot;rime&quot; user-emacs-directory))</span><br><span class="line">  :init</span><br><span class="line">  (module-load (expand-file-name &quot;liberime.so&quot; user-emacs-directory))</span><br><span class="line">  :config</span><br><span class="line">  ;; 配置同步文件夹</span><br><span class="line">  (liberime-start rime_share_data_dir rime_user_data_dir)</span><br><span class="line">  (liberime-select-schema &quot;wubi86&quot;))</span><br><span class="line"></span><br><span class="line">(use-package posframe)</span><br><span class="line"></span><br><span class="line">(provide &#39;modules-pyim)</span><br></pre></td></tr></table></figure><p>重启 Emacs 就可以使用 pyim 替代原有的输入法了。</p>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Emacs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pyim </tag>
            
            <tag> rime </tag>
            
            <tag> librime </tag>
            
            <tag> liberime </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 引用自己撰写的文章</title>
      <link href="/archives/8174721c.html"/>
      <url>/archives/8174721c.html</url>
      
        <content type="html"><![CDATA[<p>文章中，有时候需要自己给自己引流，所以经常要引用自己的文章，原来在使用 Hugo 的时候，是用的直接写入文章最终链接的方法引用，虽然可以成功的引用文章，但是如果原本的文章链接变化了，就不能使用了，所以最好的方法就是在生成系统之内直接引用。</p><p>Hexo 提供了 <a href="https://hexo.io/zh-cn/docs/tag-plugins.html" target="_blank" rel="noopener">标签插件</a> 来完成这个功能。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% post_path filename %&#125;</span><br><span class="line">&#123;% post_link filename [title] [escape] %&#125;</span><br></pre></td></tr></table></figure><p>比如想要引用我的某一篇文章，需要写 <code>post_link '工具环境/github-jsDelivr'</code> 就可以在文章中看到：<a href="/archives/de549f00.html" title="GitHub 做为博客图床">GitHub 做为博客图床</a>，这样就可以进行站内文章的引用了，这里展示的是文章中的 title 字段，而不是文件名，但是要注意的是，这里默认的路径是在 _post 路径下，如果不是默认路径，需要写上相对路径。</p><p>当然，也可以按自己的想法，定义一个名称，比如 <code>post_link '工具环境/github-jsDelivr' '测试'</code> 这样，我们看到的链接是有个人定义的名称的：<a href="/archives/de549f00.html" title="测试">测试</a>。这两个展示的名称不同，但是最终指向的都是同一篇文章。</p><p>另外还有一种方案，是使用 <code>post_path</code> 指定文章的链接地址，但是不是链接，比如 <code>post_path '工具环境/github-jsDelivr'</code>，我们在文章中看到的是: /archives/de549f00.html ，主要可以直接插入文件链接，也很方便。</p><p>相比较而言，<code>post_link</code> 的方式更常用，但是有些时候，使用 <code>post_path</code> 也可以帮助我们获取信息。</p>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> post link </tag>
            
            <tag> post path </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub 做为博客图床</title>
      <link href="/archives/de549f00.html"/>
      <url>/archives/de549f00.html</url>
      
        <content type="html"><![CDATA[<p>博客上传到 GitHub 之后，访问文章中的图片会有一些慢，如果是比较大的图片就更慢了。</p><p>之前是通过使用的一些公共的图床网站解决的，但是会有大小和数量的限制，最近看到一个图床应用<a href="https://www.jsdelivr.com/" target="_blank" rel="noopener">jsDelivr</a>，这个可以直接访问 GitHub 里的图片信息，所以调整了一下原本的图床方案。</p><p>使用也非常容易：</p><p>在 GitHub 上新建一个版本库，然后将图片放到项目中，上传到对应的分支，比如 master 分支，我的示例是在 <a href="https://github.com/ZucchiniY/blog-assets" target="_blank" rel="noopener">blog-assets</a> 项目，比如图片放在 <em>avatar</em> 路径下，文件名叫 <em>lvzai.jpg</em>——也就是我博客的用户头像，然后将相关内容上传到 GitHub 上之后，就可以通过 <a href="https://cdn.jsdelivr.net/gh/zucchiniy/blog-assets@master/avatar/lvzai.jpg" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/zucchiniy/blog-assets@master/avatar/lvzai.jpg</a> 查看图片了。</p><p><img src="https://cdn.jsdelivr.net/gh/zucchiniy/blog-assets@master/avatar/lvzai.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> GitHub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图床 </tag>
            
            <tag> jsdelivr </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>统计每天的工作时长</title>
      <link href="/archives/12c28564.html"/>
      <url>/archives/12c28564.html</url>
      
        <content type="html"><![CDATA[<p>作为一个 Emacs 的使用者，一直都希望可以完全的使用 Emacs 进行时间管理，而作为时间管理中的重头戏——番茄时间，在 Org 也是一个常用的功能。</p><p>按自己的工作专注程序，我用的更多的是 clock-in 和 clock-out 的功能来记录时间。然后在每周结束的时候，进行时间任务的复盘，虽然不能把所有的任务都放到 Org 中管理，但至少和电脑相关的任务都可以这么记录。</p><p>复盘的时候需要看在一段时间之内，到底都做了哪些事情，这里就需要用到 Org mode 中的 Clocktable 功能，对应的命令是 <code>org-clock-report</code> ，在这之后会生成一个对应的的时间表格：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#+CAPTION: Clock summary at [2020-01-14 Tue 16:02], for January 2020.</span><br><span class="line">| File              | Headline                | Time       |          |</span><br><span class="line">|-------------------+-------------------------+------------+----------|</span><br><span class="line">|                   | ALL *Total time*        | *2d 13:40* |          |</span><br><span class="line">|-------------------+-------------------------+------------+----------|</span><br><span class="line">| tasks.org         | *File time*             | *2d 13:40* |          |</span><br><span class="line">|                   | Tasks                   | 2d 9:07    |          |</span><br><span class="line">|                   | \_  Emacs 配置          |            |     0:29 |</span><br><span class="line">|                   | \_  调整 hexo 博客主题  |            | 1d 10:21 |</span><br><span class="line">|                   | \_  markdown-it-plugins |            |    22:17 |</span><br><span class="line">|                   | Habits                  | 4:33       |          |</span><br><span class="line">|                   | \_  英语单词            |            |     4:33 |</span><br><span class="line">|-------------------+-------------------------+------------+----------|</span><br><span class="line">| tasks.org_archive | *File time*             | *0:00*     |          |</span><br></pre></td></tr></table></figure><p>可以看到，这个是按文件进行的统计，目前都是在 <a href="http://task.org" target="_blank" rel="noopener">task.org</a> 文件中的任务。这里也可以选择按自己的想法进行统计。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#+BEGIN: clocktable :scope agenda-with-archives :block thismonth :maxlevel 2</span><br></pre></td></tr></table></figure><p>这里主要是几个参数：</p><p><code>scope</code>: 统计范围，可以按文件统计，也可以按其它的范围进行统计。<br><code>block</code>: 时间跨度，可以是今天 <code>today</code> 本星期 <code>thisweek</code> 或者是本月 <code>thismonth</code>,当然也可以是今年 <code>thisyear</code>，或者是按季度进行统计 <code>2020-Q1</code> 当然也支持按星期统计 <code>2020-W2</code><br><code>step</code>: 跨度，可以是天 <code>day</code>，星期 <code>week</code>，年 <code>year</code></p><p>其它的参数可以参照<a href="https://orgmode.org/manual/The-clock-table.html" target="_blank" rel="noopener">The clock table</a>，常用的主要就是这几个参数。</p><p>这些配置之后，就可以看天看自己到底花了多少时间在正经事儿上了。</p>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Emacs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> org mode </tag>
            
            <tag> clocktable </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XPath 使用笔记</title>
      <link href="/archives/488854a9.html"/>
      <url>/archives/488854a9.html</url>
      
        <content type="html"><![CDATA[<p>xpath 的语法主要是使用的 <code>/name/*[]|//*[@name]</code> 的语法规则。</p><ul><li>定位节点</li></ul><p>节点主要是使用的 id 或者是 classname 进行匹配的，这种情况下，如果是 <code>/</code> 则表示找某一层，如果是 <code>//</code> 进行匹配，则表示是任意位置的某个层，如果用 <code>*</code> 则表示任意名称。</p><p>比如：<code>/cd</code> 是指的 classname 为 cd 的结构，而且是第一层就是 cd，如果是 <code>//cd</code> 则表示其中某层为 cd 但是可以不是最外层。</p><ul><li>选择分支</li></ul><p>使用中括号可以选择分支。以下的语法从 catalog 的子元素中取出第一个叫做 cd 的元素。XPath 的定义中没有第 0 元素这种东西。而且当我们想要选取某类值的时候，可以认为 <code>[]</code> 中的是属性的名称，比如 <code>//cata[@name]</code> 是找的任意 cata 层中包含 name 属性的元素位置。</p><p>在属性之外，还有一种是索引查找方式，比如 <code>//cata[1]</code> 表示查找任意 cata 层中的第一个分支，这里索引是从 <strong>1</strong> 开始，而不是 <strong>0</strong> 开始，如果查找最后一个，则需要使用 <code>cata[last()]</code> 去找，这里只有 <code>last()</code> 方法，不存在 <code>first()</code> 方法。</p><p>如果是 <code>[]</code> 中的内容没有 <code>@</code> 符号，又不是索引值（数字）或者是 <code>last()</code> 方法的话，则表示找出包含某个子元素的情况，比如 <code>//cata/cd[pr]</code> 表示包含 pr 的 <code>/cata/cd</code> 层。如果想指定元素的值，则可以在括号中增加对应的匹配 <code>//cata/cd[pr=1.0]</code> 。</p><p><code>|</code> 在 xpath 中表示或者关系，即符合前面的，或者后面的内容，比如 <code>/cata/pr | /cata/pm</code> 两种我全要的意思。</p><ul><li>选择属性</li></ul><p>如果某一个值是用 <code>@</code> 作为开始，则表示是属性，基本的语法和层的 <code>/</code> 是一致的，区别是可以多个属性并存，即 <code>/ca[@na='uu'][@nb='zz']</code> ，这样就是找到 cd 层中属性 na 是 uu 且 属性 nb 是 zz 的元素。</p><ul><li>特殊方法</li></ul><p><code>contains()</code>: 包含语法，比如 <code>/ca[contains(@name,'na')]</code> name 属性中包含 na 的元素<br><code>text()</code>: 显示文本信息，这里对应的可以用来查询，而且进行其它操作，是对元素属性的补充<br><code>starts-with()</code>: 开始于，比如 <code>/ca[starts-with(@name,'na')]</code> name 属性开始位置包含 na</p>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
          <category> xpath </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 定位节点 </tag>
            
            <tag> 正则匹配 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown 中增加表格</title>
      <link href="/archives/fb1b5f62.html"/>
      <url>/archives/fb1b5f62.html</url>
      
        <content type="html"><![CDATA[<h2 id="默认表格"><a class="header-anchor" href="#默认表格"></a>默认表格</h2><p>Markdown 是支持表格的，但是对于表格的支持，只限于简单的表格，复杂的内容并不多。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 目录 | 内容 |</span><br><span class="line">|------+------|</span><br><span class="line">| xxx  | xxxx |</span><br><span class="line">| sxe  | afda |</span><br></pre></td></tr></table></figure><table><thead><tr><th>目录</th><th>内容</th></tr></thead><tbody><tr><td>xxx</td><td>xxxx</td></tr><tr><td>sxe</td><td>afda</td></tr></tbody></table><h2 id="复杂表格"><a class="header-anchor" href="#复杂表格"></a>复杂表格</h2><p>Markdown 想要支持复杂一些的表格的话，可以支持使用 <strong>JavaScript</strong> 中的 <strong>table</strong> 语法，如果是使用的 markdown-it 进行渲染，也可以采用第二种方法编写。</p><h3 id="通用示例"><a class="header-anchor" href="#通用示例"></a>通用示例</h3><ul><li><p>水平单元格的合并：基于 <strong>colspan</strong> 属性，即使一个单元格占多列的空间</p></li><li><p>纵向单元格的合并：基于 <strong>rowspan</strong> 属性，即使一个单元格占多行的空间</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//居中</span></span><br><span class="line">style=<span class="string">"text-align:center;"</span></span><br><span class="line"><span class="comment">//右对齐</span></span><br><span class="line">style=<span class="string">"text-align:right;"</span></span><br></pre></td></tr></table></figure></li><li><p>示例</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>目录1<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>目录2<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>目录3<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">"2"</span>&gt;</span>内容1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>ssss<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>sfas<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>atadfs<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span> <span class="attr">style</span>=<span class="string">"text-align:right;"</span>&gt;</span>水平合并<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">"2"</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>afda<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>afadf<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"3"</span> <span class="attr">style</span>=<span class="string">"text-align: center;"</span>&gt;</span>afadfa<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><table>    <tr>        <th>目录1</th>        <th>目录2</th>        <th>目录3</th>    </tr>    <tr>        <td rowspan="2">内容1</td>        <td>xxx</td>        <td>ssss</td>        <tr>            <td>sfas</td>            <td>atadfs</td>        </tr>    </tr>    <tr>        <td>测试</td>        <td colspan="2" style="text-align:right;">水平合并然后右对齐</td>    </tr>    <tr>        <td rowspan="2">xxx</td>        <td>afda</td>        <td>afadf</td>        <tr>            <td colspan="3" style="text-align: center;">水平合并然后居中</td>        </tr>    </tr></table><h3 id="markdown-it-multimd-table"><a class="header-anchor" href="#markdown-it-multimd-table"></a>markdown-it-multimd-table</h3><p>将 hexo 的渲染引擎从 marked 修改到 markdown-it 的方法见 <a href="/archives/953e2b.html" title="Hexo 中使用 emoji 和 tasks">Hexo 中使用 emoji 和 tasks</a>。</p><p>这里需要增加安装多维表格插件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -S markdown-it-multimd-table</span><br></pre></td></tr></table></figure><p>然后将对应的配置放到 _<em>config.yml</em> 文件中。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">plugins:</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">markdown-it-multimd-table</span></span><br></pre></td></tr></table></figure><ul><li>示例</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Stage | Direct Products | ATP Yields</span><br><span class="line">----: | --------------: | ---------:</span><br><span class="line">Glycolysis | 2 ATP ||</span><br><span class="line">^^ | 2 NADH | 3--5 ATP |</span><br><span class="line">Pyruvaye oxidation | 2 NADH | 5 ATP |</span><br><span class="line">Citric acid cycle | 2 ATP ||</span><br><span class="line">^^ | 6 NADH | 15 ATP |</span><br><span class="line">^^ | 2 FADH2 | 3 ATP |</span><br><span class="line"><span class="strong">**30--32**</span> ATP |||</span><br><span class="line">[Net ATP yields per hexose]</span><br></pre></td></tr></table></figure><table><caption id="netatpyieldsperhexose">Net ATP yields per hexose</caption><thead><tr><th style="text-align:right">Stage</th><th style="text-align:right">Direct Products</th><th style="text-align:right">ATP Yields</th></tr></thead><tbody><tr><td style="text-align:right">Glycolysis</td><td style="text-align:right" colspan="2">2 ATP</td></tr><tr><td style="text-align:right">^^</td><td style="text-align:right">2 NADH</td><td style="text-align:right">3–5 ATP</td></tr><tr><td style="text-align:right">Pyruvaye oxidation</td><td style="text-align:right">2 NADH</td><td style="text-align:right">5 ATP</td></tr><tr><td style="text-align:right">Citric acid cycle</td><td style="text-align:right" colspan="2">2 ATP</td></tr><tr><td style="text-align:right">^^</td><td style="text-align:right">6 NADH</td><td style="text-align:right">15 ATP</td></tr><tr><td style="text-align:right">^^</td><td style="text-align:right">2 FADH2</td><td style="text-align:right">3 ATP</td></tr><tr><td style="text-align:right" colspan="3"><strong>30–32</strong> ATP</td></tr></tbody></table><blockquote><p>测试了一下，目前不支持 <strong>无表头表格</strong> 和 <strong>多行合并</strong> ，只支持多列合并。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 默认表格 </tag>
            
            <tag> 复杂表格 </tag>
            
            <tag> multimd table </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Emacs Org mode 小技巧</title>
      <link href="/archives/5f8ba428.html"/>
      <url>/archives/5f8ba428.html</url>
      
        <content type="html"><![CDATA[<h2 id="启用转义符转义"><a class="header-anchor" href="#启用转义符转义"></a>启用转义符转义</h2><p>在 Org Mode 写一些笔记的时候，经常会用到下划线 <code>-</code>，而 <code>a_b</code> 总是会变成 a<sub>b</sub> 的形式，可以通过在文档的最上面，增加配置来关闭自动转义，对于在文章头部加上了 <code>#+OPTIONS: ^:nil</code> , 还可以通过配置 <code>(setq org-use-sub-superscripts nil)</code> 的方式来实现全局配置。</p><h2 id="用-ditaa-绘制图形"><a class="header-anchor" href="#用-ditaa-绘制图形"></a>用 ditaa 绘制图形</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#+BEGIN_SRC ditaa :file ..&#x2F;images&#x2F;linux-os.png :exports both :cmdline -E -r -s 1.0</span><br><span class="line">+---------------------------------------------------------+</span><br><span class="line">|                Applications                             |</span><br><span class="line">|    +----------------------------------------------------+</span><br><span class="line">|    |           System Libraries                         |</span><br><span class="line">+----+----------------------------------------------------+</span><br><span class="line">|                System Call Interface                    |</span><br><span class="line">+------------------------+--------------+-----------------+       +---------+</span><br><span class="line">|          VFS           |   Socket     |                 |       |         |</span><br><span class="line">+------------------------+--------------+    Scheduler    +-------+   CPU   |</span><br><span class="line">|       File Systems     |   TCP&#x2F;UDP    |                 |       |         |</span><br><span class="line">+------------------------+--------------+-----------------+       +----+----+</span><br><span class="line">|       Volume Manager   |   IP         |    Virtual      |            |</span><br><span class="line">+------------------------+--------------+    Memory       |            |</span><br><span class="line">| Block Device Interface |   Ethernet   |                 |            |</span><br><span class="line">+------------------------+--------------+-----------------+       +----+----+</span><br><span class="line">|                       Device Driver                     |       |  DRAM   |</span><br><span class="line">+-----------------------------+---------------------------+       +---------+</span><br><span class="line">                              |</span><br><span class="line">                              |</span><br><span class="line">                      +-------+--------+</span><br><span class="line">                      |   I&#x2F;O Bridge   |</span><br><span class="line">                      +-------+--------+</span><br><span class="line">                              |</span><br><span class="line">                              |</span><br><span class="line">      ------+-----------------+--------------------+------</span><br><span class="line">            |                                      |</span><br><span class="line">  +---------+--------+                  +----------+---------+</span><br><span class="line">  |  I&#x2F;O Controller  |                  | Network Controller |</span><br><span class="line">  +-+-------+------+-+                  +----+----------+----+</span><br><span class="line">    |       |      |                         |          |</span><br><span class="line">+---+---+   |  +---+---+                +----+----+ +---+----+</span><br><span class="line">| Disk  |  ... | Swap  |                |  Port   | |  Port  |</span><br><span class="line">+-------+      +-------+                +---------+ +--------+</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zucchiniy/blog-assets@master/images/linux-os.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Emacs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> org mode </tag>
            
            <tag> use-sub-superscripts </tag>
            
            <tag> ditaa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Emacs 扩展 Evil 功能</title>
      <link href="/archives/d51ccb9b.html"/>
      <url>/archives/d51ccb9b.html</url>
      
        <content type="html"><![CDATA[<h2 id="Evil-多光标模式"><a class="header-anchor" href="#Evil-多光标模式"></a>Evil 多光标模式</h2><p>今天在修改代码的过程中，发现有一些地方，想使用多光标来修改，但是在使用的时候，感觉不太会用 <strong>evil mc</strong> ，中间切换到了 <strong>multiple-cursors</strong> 包上，但是在 <strong>evil</strong> 模式下使用，因为模式切换的情况，修改代码的时候会弹出一些奇怪的提示，因为模式的切换的问题，所以又换到了 <strong>evil-mc</strong> 上。</p><p>如果想要修改一个对应的内容，首先需要进行 <strong>visual</strong> 模式，然后使用 <code>C-n</code> 进行选择，然后修改，然后 <code>grq</code> 退出功能。</p><h3 id="常用的快捷键如下："><a class="header-anchor" href="#常用的快捷键如下："></a>常用的快捷键如下：</h3><p><code>C-n</code>: 标记当前，找下一个匹配值<br><code>C-p</code>: 标记肖前，找上一个匹配值<br><code>M-n</code>: 在已经标记的光标中向后跳转<br><code>M-p</code>: 向前<br><code>C-t</code>: 跳过这个，找下一个相同的内容，具体使用过之后，感觉不好用，没有<br><code>grn</code>: 同上<br><code>grf</code>: 跳到标记的第一个<br><code>grl</code>: 跳到标记的最后一个<br><code>grj</code>: 标记这个位置的的下一行的同一位置<br><code>grk</code>: 是标记上一行的相同位置<br><code>grs</code>: 暂停光标移动<br><code>grr</code>: 恢复光标移动</p><h2 id="关闭-evil-功能"><a class="header-anchor" href="#关闭-evil-功能"></a>关闭 evil 功能</h2><p>在最近一段时间的使用过程中，发现 Evil 虽然在某些时候要比 Emacs 的操作更方便，但是在一些 Emacs 的默认使用过程中，还是 Emacs 的更好用，比如说 dired 中。</p><p>刚开始希望可以只在 <strong>编辑模式</strong> 中使用 Evil ，比如 org mode 、python mode 这类，但是在配置的时候发现，evil hook 并没有启作用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(use-package evil</span><br><span class="line">  :hook (org-mode . evil-mode))</span><br></pre></td></tr></table></figure><p>但是这种方案并不能实现在阅读一些相关文档的过程中发现，可以使用另一个方法来修正这个问题，即在一些特殊的 mode 中关闭 evil 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(use-package evil</span><br><span class="line">  :config</span><br><span class="line">  (evil-set-initial-state &#39;dired-mode &#39;emacs))</span><br></pre></td></tr></table></figure><p>这样就可以让我们在使用过程中更适合的方式操作了。</p>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Emacs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Evil Multiple cursors </tag>
            
            <tag> turn evil mode off </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 中使用 emoji 和 tasks</title>
      <link href="/archives/953e2b.html"/>
      <url>/archives/953e2b.html</url>
      
        <content type="html"><![CDATA[<h2 id="替换为-markdown-it"><a class="header-anchor" href="#替换为-markdown-it"></a>替换为 markdown-it</h2><p>今天在迁移博客项目的时候，发现原来在 hugo 中可以使用的 Emoji 和 tasks 功能都不能正常使用了，查询了一下原因，主要是因为 hexo 默认的解析器是 <code>hexo-renderer-marked</code> ，这个默认的渲染器是不支持 emoji 功能的，但是支持 tasks，但是这个渲染器是不支持扩展的，所以如果希望同时使用这两个功能的话，就需要换一个渲染器。</p><p>这里推荐的是 <code>hexo-renderer-markdown-it</code> 渲染器，支持扩展，采用的是 <code>markdown-it</code> 的内核来解析 markdown 的文本。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm un hexo-renderer-marked -S</span><br><span class="line">npm i hexo-renderer-markdown-it -S</span><br></pre></td></tr></table></figure><h2 id="安装和配置-markdown-it"><a class="header-anchor" href="#安装和配置-markdown-it"></a>安装和配置 markdown-it</h2><p>这样就替换完成了，然后再安装需要的插件：</p><p><code>npm i markdown-it-emoji markdown-it-task-lists -S</code></p><p>然后再增加相关配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">markdown:</span><br><span class="line">  render:</span><br><span class="line">    html: true # 在 markdown 文本中支持 html tag 标签</span><br><span class="line">    xhtmlOut: false # 需要 xtml 文档，使用 &lt;br &#x2F;&gt; 替代 &lt;br&gt;</span><br><span class="line">    breaks: true # 用 &lt;br&gt; 开始新的一行</span><br><span class="line">    linkify: true # 自动将 可能是链接的内容转换成链接</span><br><span class="line">    typographer: true # 印刷标识转换</span><br><span class="line">  plugins:</span><br><span class="line">    - markdown-it-abbr</span><br><span class="line">    - markdown-it-footnote</span><br><span class="line">    - markdown-it-ins</span><br><span class="line">    - markdown-it-sub</span><br><span class="line">    - markdown-it-sup</span><br><span class="line">    - markdown-it-emoji </span><br><span class="line">    - markdown-it-task-lists</span><br><span class="line">  anchors:</span><br><span class="line">    level: 2</span><br><span class="line">    collisionSuffix: &#39;&#39;</span><br><span class="line">    permalink: false,</span><br><span class="line">    permalinkClass: &#39;header-anchor&#39;</span><br><span class="line">    permalinkSymbol: &#39;&#39;</span><br><span class="line">    case: 0</span><br><span class="line">    separator: &#39;&#39;</span><br></pre></td></tr></table></figure><p>typographer 解释：</p><p>将 <code>(c) (C) (r) (R) (tm) (TM) (p) (P) +-</code> 这些标识转换成 © © ® ® ™ ™ § § ± 。</p><p>一些常用的插件，比如上标和下标，可以在插件里加上 <code>markdown-it-sub</code> 和 <code>markdown-it-sup</code> ，可以直接用 <code>19^th^</code> 19<sup>th</sup> 还有 <code>H~2~O</code> 表示 H<sub>2</sub>O 。</p><p>还有脚本、定义列表等功能，具体的见 <a href="https://markdown-it.github.io/" target="_blank" rel="noopener">https://markdown-it.github.io/</a> 。</p><h2 id="其它插件"><a class="header-anchor" href="#其它插件"></a>其它插件</h2><p>因为 markdown-it 是支持扩展的，所以怎么找对应的扩展，也是非常重要的功能，比如 tasks 的支持，可以到 <a href="https://www.npmjs.com/" target="_blank" rel="noopener">https://www.npmjs.com/</a> 里进行搜索，关键字是 <code>keywords:markdown-it-plugin</code> 或者直接打开链接 <a href="https://www.npmjs.com/search?q=keywords:markdown-it-plugin" target="_blank" rel="noopener">https://www.npmjs.com/search?q=keywords:markdown-it-plugin</a> 。</p><p><img src="https://cdn.jsdelivr.net/gh/zucchiniy/blog-assets@master/images/hexo-markdown-it-task-lists.png" alt=""></p><p>就可以按照对应的功能去找寻找插件了。</p>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown-it </tag>
            
            <tag> emoji </tag>
            
            <tag> tasks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Emacs 快捷键配置方案</title>
      <link href="/archives/86598d2e.html"/>
      <url>/archives/86598d2e.html</url>
      
        <content type="html"><![CDATA[<p><strong>Emacs 的快捷键和 Vim 的快捷键是编辑器中的两坐高山，其中 Emacs 的快捷键主要有四类。</strong></p><h2 id="四大类型"><a class="header-anchor" href="#四大类型"></a>四大类型</h2><ul><li>全局快捷键</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(global-set-key (kdb &quot;a&quot;) &#39;command)</span><br></pre></td></tr></table></figure><ul><li>全局映射键</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(define-key key-translation-map (kbd &quot;a&quot;) (kdb &quot;b&quot;))</span><br></pre></td></tr></table></figure><ul><li>Major-mode 局部快捷键</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(local-set-key (kdb &quot;a&quot;) &#39;command)</span><br></pre></td></tr></table></figure><ul><li>Minor-mode 局部快捷键</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(define-key your-minor-mode-map (kbd &quot;a&quot;) &#39;command)</span><br></pre></td></tr></table></figure><h2 id="删除、禁用快捷键"><a class="header-anchor" href="#删除、禁用快捷键"></a>删除、禁用快捷键</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(global&#x2F;local-unset-key (kbd &quot;a&quot;))</span><br><span class="line">(global&#x2F;local-set-key (kbd &quot;a&quot;) &#39;ignore&#x2F;nil)</span><br></pre></td></tr></table></figure><h2 id="键冲突与解决"><a class="header-anchor" href="#键冲突与解决"></a>键冲突与解决</h2><p>最方便的解决方案是找一个空置的 <strong>prefix</strong> 键，先映射到这个键上，再全局或者局部设置它。</p><h3 id="先映射到空闲键上"><a class="header-anchor" href="#先映射到空闲键上"></a>先映射到空闲键上</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(define-key key-translation-map (kbd &quot;a&quot;) (kbd &quot;M-g A&quot;))</span><br></pre></td></tr></table></figure><h3 id="全局或者局部设置"><a class="header-anchor" href="#全局或者局部设置"></a>全局或者局部设置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(global&#x2F;local-set-key (kbd &quot;M-g A&quot;) &#39;command)</span><br></pre></td></tr></table></figure><h2 id="快捷键优先级"><a class="header-anchor" href="#快捷键优先级"></a>快捷键优先级</h2><p><code>key-translation-map</code> : 最高级，就是把这个键的意义改变了，想使用原来的快捷键，要重新进行绑定</p><p><code>minor-mode-map</code> : 二级，只在 <strong>minor mode</strong> 激活时启作用，其它时候会被其它的快捷键覆盖掉</p><p><code>local-set-key</code> : 三级，在 <strong>major mode</strong> 中启作用</p><p><code>global-set-key</code> : 最弱的级别，但是也是最简单的键绑定方式</p><h3 id="设置局域快捷键"><a class="header-anchor" href="#设置局域快捷键"></a>设置局域快捷键</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(defun f-python-mode ()</span><br><span class="line">  (local-set-key (kbd &quot;C-x C-e&quot;)&#39;f-python-shell-send-line)</span><br><span class="line">  (local-set-key (kbd &quot;M-g C-y&quot;) &#39;f-python-shell-send-line))</span><br><span class="line">(add-hook &#39;python-mode-hook &#39;f-python-mode)</span><br></pre></td></tr></table></figure><p><strong>注意</strong> 当键进行重新绑定后，还应该将之前的功能重新绑定到另一个键上。</p><h2 id="Minor-Mode-Map"><a class="header-anchor" href="#Minor-Mode-Map"></a>Minor Mode Map</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(define-minor-mode visual-mode</span><br><span class="line">  :init-value nil</span><br><span class="line">  :global t</span><br><span class="line">  :keymap (make-sparse-keymap)</span><br><span class="line">  (if (not visual-mode) (setq cursor-type &#39;bar)</span><br><span class="line">    (setq cursor-type &#39;box)))</span><br><span class="line">(define-key visual-mode-map (kbd &quot;h&quot;) &#39;mark-paragraph)</span><br></pre></td></tr></table></figure><p>定义之后，可以利用 <code>define-key</code> 来设置当前快捷键。然后在需要启用 <strong>Visual mode</strong> 的时候可以启用这个 <strong>minor mode</strong> 的相关快捷键。</p>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Emacs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> keybinds </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GDB 调试笔记</title>
      <link href="/archives/efe1991f.html"/>
      <url>/archives/efe1991f.html</url>
      
        <content type="html"><![CDATA[<p>GDB 是一个由 GNU 开源组织发布的 *.nix 下的、基于命令行的一款比较知名的程序调试工具。</p><p>GDB 有着相当多的命令，但是常用的只有大概十个左右。</p><p>gdb命令一般可以使用 <code>gdb program</code> 或者使用 <code>gdb progrma core</code> 。如果想对正在执行的进程进行调试，则可以使用 <code>gdb -p 123</code> 。</p><h2 id="常见命令"><a class="header-anchor" href="#常见命令"></a>常见命令</h2><table><tr>    <th>命令</th>    <th> 解释</th>    <th> 示例</th></tr><tr>    <td>file <文件名></td>    <td>加载被调试的可执行程序文件。<br />因为一般都在被调试程序所在目录下执行GDB，因而文本名不需要带路径。</td>    <td>(gdb) file gdb-sample</td></tr><tr>    <td>r</td>    <td>run的简写，运行被调试的程序。<br />如果此前没有下过断点，则执行完整个程序；如果有断点，则程序暂停在第一个可用断点处。</td>    <td>(gdb) r</td></tr><tr>    <td>c</td>    <td>Continue的简写，继续执行被调试程序，直至下一个断点或程序结束。</td>    <td>(gdb) c</td></tr><tr>    <td>b &lt;行号&gt;<br />b &lt;函数名称&gt;<br />b \*&lt;函数名称&gt;<br />b \*&lt;代码地址&gt; <br />d [编号]</td>    <td>b: Breakpoint的简写，设置断点。两可以使用“行号”“函数名称”“执行地址”等方式指定断点位置。<br />其中在函数名称前面加“\*”符号表示将断点设置在“由编译器生成的prolog代码处”。如果不了解汇编，可以不予理会此用法。<br />d: Delete breakpoint的简写，删除指定编号的某个断点，或删除所有断点。断点编号从1开始递增。</td>    <td>(gdb) b 8<br />(gdb) b main<br />(gdb) b \*main<br />(gdb) b \*0x804835c<br />(gdb) d</td></tr><tr>    <td>bt</td>    <td>查看函数运行时堆栈</td>    <td>(gdb) bt</td></tr><tr>    <td>disas <functionName></td>    <td>默认反汇编对应的方法</td>    <td>(gdb) disas </td></tr><tr>    <td>s, n</td>    <td>s: 执行一行源程序代码，如果此行代码中有函数调用，则进入该函数；<br />n: 执行一行源程序代码，此行代码中的函数调用也一并执行。<br />s 相当于其它调试器中的“Step Into (单步跟踪进入)”；<br />n 相当于其它调试器中的“Step Over (单步跟踪)”。<br />这两个命令必须在有源代码调试信息的情况下才可以使用（GCC编译时使用“-g”参数）。</td>    <td>(gdb) s<br />(gdb) n</td></tr><tr>    <td>si, ni</td>    <td>si命令类似于s命令，ni命令类似于n命令。所不同的是，这两个命令（si/ni）所针对的是汇编指令，而s/n针对的是源代码。</td>    <td>(gdb) si<br />(gdb) ni</td></tr><tr>    <td>p &lt;变量名称&gt;</td>    <td>Print的简写，显示指定变量（临时变量或全局变量）的值。</td>    <td>(gdb) p i<br />(gdb) p nGlobalVar<br />(gdb) p/a</td></tr><tr>    <td>display ... <br />undisplay &lt;编号&gt;</td>    <td>display，设置程序中断后欲显示的数据及其格式。<br />例如，如果希望每次程序中断后可以看到即将被执行的下一条汇编指令，可以使用命令<br />“display /i $pc”<br />其中 $pc 代表当前汇编指令，/i 表示以十六进行显示。当需要关心汇编代码时，此命令相当有用。<br />undispaly，取消先前的display设置，编号从1开始递增。</td>    <td>(gdb) display /i $pc<br />(gdb) undisplay 1</td></tr><tr>    <td>i</td>    <td>Info的简写，用于显示各类信息，详情请查阅“help i”。</td>    <td>(gdb) i r 打印寄存器<br />(gdb) i proc m 检查是否为有效地址</td></tr><tr>    <td>reverse-stepi</td>    <td>回退之前执行过的指令</td>    <td>(gdb) reverse-stepi</td></tr><tr>    <td>q</td>    <td>Quit的简写，退出GDB调试环境。</td>    <td>(gdb) q</td></tr><tr>    <td>record</td>    <td>录制程序过程</td>    <td>(gdb) record</td></tr><tr>    <td>help [命令名称]</td>    <td>GDB帮助命令，提供对GDB名种命令的解释说明。<br />如果指定了“命令名称”参数，则显示该命令的详细说明；如果没有指定参数，则分类显示所有GDB命令，供用户进一步浏览和查询。</td>    <td>(gdb) help display</td></tr></table><h2 id="用法总结"><a class="header-anchor" href="#用法总结"></a>用法总结</h2><p>~这里的总结主要是整理自 <a href="http://blog.jobbole.com/107759/" target="_blank" rel="noopener">gdb 调试入门，大牛写的高质量指南</a>，我觉得这篇文章是可以反复阅读的好文章。~</p><p>发现这篇文章已经不存在了，希望我现在写的这篇总结对大家有帮助吧。</p><img src="https://cdn.jsdelivr.net/gh/zucchiniy/blog-assets@master/images/gdb.png" class=""><h2 id="补充小工具"><a class="header-anchor" href="#补充小工具"></a>补充小工具</h2><p>python dbg工具，可以通过 <code>apt-get install -y python-dbg</code> 进行安装，然后可以在其中使用 <code>py-bt</code> 、 <code>py-list</code> 等命令。</p><p>另外还有一个工具是 <strong>cscope</strong> ，主要用来遍历代码用的。</p><p>cscope -bqR : 建立查找数据库</p><p>cscope -dq : 启动cscope</p>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gdb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用 find 和 grep 联合查找文件</title>
      <link href="/archives/3fcde5df.html"/>
      <url>/archives/3fcde5df.html</url>
      
        <content type="html"><![CDATA[<p>Linux 下 使用 find 命令查找文件。</p><h2 id="常用组合"><a class="header-anchor" href="#常用组合"></a>常用组合</h2><ul><li>查找所有 <strong>.h</strong> 文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find &lt;pathname&gt; -name "*.h"</span><br></pre></td></tr></table></figure><ul><li>查找所有 <strong>.h</strong> 文件中的含有 <strong>helloworld</strong> 字符串的文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find &lt;pathname&gt;  -name "*.h" -exec grep -in "helloworld" &#123;&#125; \;</span><br><span class="line">find &lt;pathname&gt;  -name "*.h" | xargs grep -in "helloworld"</span><br></pre></td></tr></table></figure><p>第一个命令中的 <code>{}</code> 是指的 <code>find &lt;pathname&gt;  -name &quot;*.h&quot;</code> 的结果，也是就说，第一个命令中 <code>grep</code> 是在 <code>find</code> 查到的结果中进行二次筛选操作。而后面的 <code>\;</code> 则是语句的结束标识，也就是转义的 <code>;</code> 。</p><p>第二个命令则是使用的管道。</p><ul><li>查找所有 <strong>.h</strong> 和 <strong>.c</strong> 文件中的含有 <strong>helloworld</strong> 字符串的文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find &lt;pathname&gt;  /( -name "*.h" -or -name "*.c" /) -exec grep -in "helloworld" &#123;&#125; \;</span><br></pre></td></tr></table></figure><ul><li>查找非备份文件中的含有 <strong>helloworld</strong> 字符串的文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find &lt;pathname&gt; /( -not -name "*~" /) -exec grep -in "helloworld" &#123;&#125; \;</span><br></pre></td></tr></table></figure><blockquote><p><pathname> 为查找路径，默认为当前路径。带 -exec 参数时必须以 <em>;</em> 结尾，否则会提示 『find: 遗漏 <em>-exec</em> 的参数』。</p></blockquote><h2 id="使用-find-和-xargs"><a class="header-anchor" href="#使用-find-和-xargs"></a>使用 find 和 xargs</h2><p><code>find &lt;pathname&gt; -options [-print -exec -ok]</code></p><p><strong>-optinos</strong></p><h3 id="name-按照文件名查找"><a class="header-anchor" href="#name-按照文件名查找"></a>-name:按照文件名查找</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find ~ -name “*.txt” -print</span><br><span class="line">find ~ -name “[a-z][0-9].txt -print</span><br></pre></td></tr></table></figure><h3 id="perm-按照权限查找文件"><a class="header-anchor" href="#perm-按照权限查找文件"></a>-perm:按照权限查找文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find ~ -perm 755 -print #查找权限为755的文件</span><br><span class="line">find ~ -perm 007 -print #查找o位置上具有7权限的文件</span><br><span class="line">find ~ -perm 4000 -print #查找具有suid的文件</span><br></pre></td></tr></table></figure><h3 id="prune"><a class="header-anchor" href="#prune"></a>-prune</h3><p>不在当前目录下查找</p><h3 id="user-和-nouser"><a class="header-anchor" href="#user-和-nouser"></a>-user 和 -nouser</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find ~ -user zhao -print #查找文件属主是zhao的文件</span><br><span class="line">find ~ -nouser -print #查找文件属主已经被删除的文件</span><br></pre></td></tr></table></figure><h3 id="group和－nogroup"><a class="header-anchor" href="#group和－nogroup"></a>-group和－nogroup</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find ~ -group zhao -print #查找文件群组是zhao的文件</span><br></pre></td></tr></table></figure><h3 id="按照时间"><a class="header-anchor" href="#按照时间"></a>按照时间</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find ~ -mtime -5 -print #文件更改时间在5天内的文件</span><br><span class="line">find ~ -mtime +3 -print #文件更改时间在3天前的文件</span><br><span class="line">find ~ -newer file1 -print #查找比文件file1新的文件</span><br></pre></td></tr></table></figure><h3 id="按照类型查找"><a class="header-anchor" href="#按照类型查找"></a>按照类型查找</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find ~ -type d -print #查找所有目录</span><br></pre></td></tr></table></figure><h3 id="按照大小"><a class="header-anchor" href="#按照大小"></a>按照大小</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find ~ -size +1000000C -print #查找文件大小大于1000000字节(1M)的文件</span><br></pre></td></tr></table></figure><h3 id="查找位于本文件系统里面的文件"><a class="header-anchor" href="#查找位于本文件系统里面的文件"></a>查找位于本文件系统里面的文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -name "*.txt" -mount -print</span><br></pre></td></tr></table></figure><p><strong>-exec</strong> , <strong>-ok</strong> : <strong>find</strong> 命令对于匹配文件执行该参数所给出 <strong>shell</strong> 命令，相应命令形式为: <code>'command' {} \;</code><br><strong>-ok</strong> 在执行命令前要确认</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find ~ -type f -exec ls -l &#123;&#125; \;</span><br><span class="line">find / -name “*.log” -mtime +5 -ok rm &#123;&#125; \;</span><br><span class="line">find . -name core -exec rm &#123;&#125; \;</span><br></pre></td></tr></table></figure><p>使用 <strong>-x dev</strong> 参数防止 <strong>find</strong> 搜索其他分区<br><code>find . -size 0 -exec rm {} \;</code> 删除尺寸为０的文件</p><ul><li>xargs 与-exec 功能类似</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find ~ -type f | xargs ls -l</span><br><span class="line">find / -name “*.log” -type f -print| xargs grep -i DB0</span><br><span class="line">find . -type f |xargs grep -i “Mary”</span><br></pre></td></tr></table></figure><p>在所有文件中检索字符串 Mary <code>ls *~ |xargs rm -rf</code> 删除所有以~结尾的文件</p><h2 id="过滤-svn-文件夹"><a class="header-anchor" href="#过滤-svn-文件夹"></a>过滤 svn 文件夹</h2><ul><li>使用管道进行双层“过滤”，其中第二次 grep 使用了 -v 选项，即逆向匹配，打印出不匹配的行</li></ul><p><code>grep -r 'function_name' * | grep -v '.svn'</code></p><ul><li><p>或者更简单一些，直接使用 <code>--exclude-dir</code> 选项，即指定排除目录，注意 svn 前的 <strong>\.</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -r --exclude-dir=\.svn 'function_name' *</span><br></pre></td></tr></table></figure></li></ul><h2 id="多个过滤条件"><a class="header-anchor" href="#多个过滤条件"></a>多个过滤条件</h2><h3 id="或操作"><a class="header-anchor" href="#或操作"></a>或操作</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grep -E '123|abc' filename  # 找出文件（filename）中包含123或者包含abc的行</span><br><span class="line">egrep '123|abc' filename    # 用egrep同样可以实现</span><br><span class="line">awk '/123|abc/' filename   # awk 的实现方式</span><br></pre></td></tr></table></figure><h3 id="与操作"><a class="header-anchor" href="#与操作"></a>与操作</h3><p><code>grep pattern1 files | grep pattern2</code> 显示既匹配 pattern1 又匹配 pattern2 的行。</p><h3 id="其他操作"><a class="header-anchor" href="#其他操作"></a>其他操作</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">grep -i pattern files #不区分大小写地搜索。默认情况区分大小写，</span><br><span class="line">grep -l pattern files #只列出匹配的文件名，</span><br><span class="line">grep -L pattern files #列出不匹配的文件名，</span><br><span class="line">grep -w pattern files #只匹配整个单词，而不是字符串的一部分（如匹配‘magic’，而不是‘magical’），</span><br><span class="line">grep -C number pattern files #匹配的上下文分别显示[number]行，</span><br></pre></td></tr></table></figure><h2 id="find-过滤-svn-文件夹"><a class="header-anchor" href="#find-过滤-svn-文件夹"></a>find 过滤 svn 文件夹</h2><p><code>find -type f ! -path '*/.svn/*'</code></p><h2 id="find-查找大文件"><a class="header-anchor" href="#find-查找大文件"></a>find 查找大文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -type f -size +800M</span><br></pre></td></tr></table></figure><p>type 类型 : <strong>b</strong> 块设备， <strong>d</strong> 目录， <strong>c</strong> 字符设备文档， <strong>p</strong> 管道文档， <strong>l</strong> 符号链接文档， <strong>f</strong> 普通文档</p><p>name 文件名 : 支持通配符</p><p>size 文件大小 : <strong>+</strong> 表示大于， <strong>-</strong> 表示小于，支持 k/M/G 的单位</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -type f -size +800M | xargs ls -lh</span><br></pre></td></tr></table></figure><p>这里的 <code>xargs</code> 是把管理参数切分成多个部分，可以将命令进行组合</p><h2 id="du-查找大目录"><a class="header-anchor" href="#du-查找大目录"></a>du 查找大目录</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">du -h --max-depth=1</span><br><span class="line">du -hm --max-depth=2 | sort -n</span><br><span class="line">du -hm --max-depth=2 | sort -nr | head -12</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> find </tag>
            
            <tag> grep </tag>
            
            <tag> du </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建个人博客</title>
      <link href="/archives/c442673f.html"/>
      <url>/archives/c442673f.html</url>
      
        <content type="html"><![CDATA[<p><strong>我们无法选择生活的样子，但我们可以记下来。</strong></p><h2 id="博客的开始"><a class="header-anchor" href="#博客的开始"></a>博客的开始</h2><p>其实，一切都是为了更好的装逼。好吧，我着相了。</p><p>最开始想做一个自己博客，主要是因为看到了很多人都有，觉得自己没有太 Low 了。于是申请了 CSDN 的用户，但是太丑了，于是又申请了博客园，感觉这些都不是我想要的，而做为一个 Emacser 不使用 Github 搭建一个自己的博客，感觉就已经落伍了。</p><p>于是就有这最初的一个，相当简陋的利用 Emacs 的 Org-mode 搭建的博客，后来看了 Org-page 这个包，但是，我配置不好啊！为什么为什么！</p><p>最后，从 Hugo 和 Hexo 之间，我选择了 Hexo，虽然 Hugo 在 Windows 上使用起来更方便，但是我还是觉得 Hexo 更适合我。</p><h2 id="利用-Hexo-的坑"><a class="header-anchor" href="#利用-Hexo-的坑"></a>利用 Hexo 的坑</h2><ol><li><p>有些插件需要翻墙，有些不用，我也不记得哪个用哪个不用了，实在不行可以使用淘宝的<br>npm 源进行安装。</p></li><li><p>环境配置好之后，最好更新一下模板，把一些常用的内容写到 Hexo<br>的模板里，这样在后续的使用中，可以快速的增加标签、分类和简介等内容。</p></li><li><p>学习 Markdown , 这个并不是一个坑，而是一个忠告，作为一个常年游荡在<br>GitHub 的好同志来说，但是对于一个 Emacser 来说，我更喜欢 Org-mode<br>，但是 Org-mode 并不能直接用来发布 Hexo<br>博客，有些人会说可以利用一些工具，但是与其增加一些工具，不如学习一下<br>Markdown, 这根本用不了几分钟，虽然 Org-mode<br>很强大（忍不住安利一波），但是 Markdown<br>作为一个大众的标记语言，简单的语法还是需要我们掌握的。</p></li><li><p>记住常用的命令</p><ul><li><code>hexo new markdown_file</code> 新建文章</li><li><code>hexo new page html_file</code> 新建页面</li><li><code>hexo generate</code> 生成静态页面到 public 目录</li><li><code>hexo server</code> 开启预览访问端口，4000， <code>Ctrl+c</code> 关闭 <em>server</em></li><li><code>hexo deploy</code> 将 .deploy 目录部署到 GitHub</li></ul></li></ol><blockquote><p>这里需要配置 deploy 的项目地址并安装了 <code>hexo-deployer-git</code> 插件，才能使用这个功能</p></blockquote><ol><li><p>最后一个坑，挑选一个合适的主题，好吧，我选择了很久——大概四天吧，可能很多人能非常快的决定，但是对于我来说，把所有好看的主题都看一遍，才是我想做的事，最后我选择了 Next 主题，简单美观，还有非常齐全的配置说明</p></li><li><p>部署使用的命令有三个 <code>hexo clean</code> / <code>hexo generate</code> / <code>hexo deploy</code><br>，这三个命令之后，就可以登录你的静态博客页面去查看了。</p></li></ol><h2 id="博客的生活"><a class="header-anchor" href="#博客的生活"></a>博客的生活</h2><p>我很喜欢调试自己的博客，但是写博客就不是那么喜欢了，但是我希望能养成一个定期写博客的习惯。</p><p>所以，我需要博客，主要是用来装…咳，主要是用来记录我们的生活、工作的内容，这样在下次使用的时候，就能更好的做到了。</p><h2 id="Hexo-相关安装"><a class="header-anchor" href="#Hexo-相关安装"></a>Hexo 相关安装</h2><p>在几次试验之后，Node.js 环境还是使用 nvm<br>管理比较好用，下载的时候可以使用 <code>npm --registry=https://registry.npm.taobao.org install</code> 进行安装下面的模块。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">npm install hexo-generator-search --save</span><br><span class="line">npm install hexo-generator-feed --save</span><br><span class="line">npm install -g tern</span><br><span class="line">npm install -g js-beautify</span><br><span class="line">npm install -g jshint</span><br><span class="line">npm install -g js-yaml</span><br><span class="line">npm install hexo-renderer-jade --save</span><br><span class="line">npm install hexo-renderer-sass --save</span><br></pre></td></tr></table></figure><h2 id="hugo"><a class="header-anchor" href="#hugo"></a>hugo</h2><p><strong>Hugo</strong> 是由 Go 语言实现的一个 <strong>Static Site Generator</strong> 工具，特点就是快，而且默认是支持 <strong>Org mode</strong> 这种文本的。</p><p>虽然对于 <strong>hexo</strong> 而言少了许多好看的主题，但是对于 <strong>Org mode</strong> 的默认支持让我有了决心一用的冲动。</p><p>在使用了一段时间之后，发现这个工具完美的解决了我所有的问题，并能让我专心于博客写作本身而不是工具，虽然有一些不方便，但最后还是决定继续使用，而且要减少对工具本身的使用，而加强写作本身。</p><p>在长时间的使用之后，发现 <strong>Hugo</strong> 对 <strong>Org mode</strong> 的支持也比较一般，对于一些比较好用的特性，功能都不支持，最好的方案还是从 <strong>Org</strong> 转成 <strong>Markdown</strong> ，所以在最终使用 <strong>ox-hugo</strong> 工具配合 <strong>Hugo</strong> 使用，然后通过 <strong>capture</strong> 功能直接生成对应的博客文章，方便快捷。</p><h3 id="ox-hugo-配置"><a class="header-anchor" href="#ox-hugo-配置"></a>ox-hugo 配置</h3><p>使用 ox-hugo 主要需要配置两个内容，一是将 <strong>ox-hugo</strong> 增加到配置中，然后是在 启动 org-capture 的时候，增加一个新的选项，可以将自动新增一篇文章。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">(use-package ox-hugo</span><br><span class="line">  :after ox)</span><br><span class="line"></span><br><span class="line">(with-eval-after-load &#39;org-capture</span><br><span class="line">  (defun org-hugo-new-subtree-post-capture-template ()</span><br><span class="line">    &quot;Return &#96;org-capture&#39; template string for new Hugo post.&quot;</span><br><span class="line">    (let* ((date (format-time-string (org-time-stamp-format :long :inactive) (org-current-time)))</span><br><span class="line">           (title (read-from-minibuffer &quot;Post Title: &quot;))</span><br><span class="line">           (file-name (read-from-minibuffer &quot;File Name: &quot;))</span><br><span class="line">           (fname (org-hugo-slug file-name)))</span><br><span class="line">      (mapconcat #&#39;identity</span><br><span class="line">                 &#96;(</span><br><span class="line">                   ,(concat &quot;* TODO &quot; title)</span><br><span class="line">                   &quot;:PROPERTIES:&quot;</span><br><span class="line">                   ,(concat &quot;:EXPORT_FILE_NAME: &quot; fname)</span><br><span class="line">                   ,(concat &quot;:EXPORT_DATE: &quot; date)</span><br><span class="line">                   &quot;:END:&quot;</span><br><span class="line">                   &quot;%?\n&quot;)</span><br><span class="line">                 &quot;\n&quot;)))</span><br><span class="line"></span><br><span class="line">  (add-to-list &#39;org-capture-templates</span><br><span class="line">               &#39;(&quot;h&quot;</span><br><span class="line">                 &quot;Hugo post&quot;</span><br><span class="line">                 entry</span><br><span class="line">                 (file &quot;~&#x2F;workspace&#x2F;blog&#x2F;hugo-posts.org&quot;)</span><br><span class="line">                 (function org-hugo-new-subtree-post-capture-template))))</span><br></pre></td></tr></table></figure><p>在这里，我是将所有的文章写到对应的一个文件中，然后将文件中的所有内容生成到对应的 hugo 文件夹中。</p><p>文件头配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#+HUGO_BASE_DIR: ~&#x2F;workspace&#x2F;blog&#x2F;content&#x2F;</span><br><span class="line">#+SEQ_TODO: TODO DRAFT DONE</span><br><span class="line">#+OPTIONS: ^:&#123;&#125;</span><br></pre></td></tr></table></figure><p>然后在这个文件中使用导出的快捷键，就可以看到对应的选项了，将 <code>org-export-dispatch</code> 命令绑定到自己的快捷键上就可以看到对应的输出命令。</p><p><img src="https://cdn.jsdelivr.net/gh/zucchiniy/blog-assets@master/images/ox-hugo-export.png" alt="ox-hugo-export"></p>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> hugo </tag>
            
            <tag> GitHub Pages </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读书/观影清单</title>
      <link href="/archives/22a51e75.html"/>
      <url>/archives/22a51e75.html</url>
      
        <content type="html"><![CDATA[<h2 id="2020-年读书观影清单"><a class="header-anchor" href="#2020-年读书观影清单"></a>2020 年读书观影清单</h2><h3 id="东野圭吾小说阅读"><a class="header-anchor" href="#东野圭吾小说阅读"></a>东野圭吾小说阅读</h3><h4 id="非系列小说"><a class="header-anchor" href="#非系列小说"></a>非系列小说</h4><ul class="contains-task-list"><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 白夜行</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 幻夜</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 解忧杂货店</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 超杀人事件</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 彷徨之刃</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 秘密</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 流星之绊</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 时生</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 信</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 放学后 &lt;2019-12-06 Fri&gt;</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 单恋</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 虚无的十字架</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 宿命</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 杀人之门分身</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 导论13</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 绑架游戏</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 使命与魂的尽头</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 湖边杀人案</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 平等世界 爱情故事</li></ul><h4 id="四笑小说"><a class="header-anchor" href="#四笑小说"></a>四笑小说</h4><ul class="contains-task-list"><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 怪笑小说</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 毒笑小说</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 黑笑小说</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 歪笑小说</li></ul><h4 id="滑雪场系列"><a class="header-anchor" href="#滑雪场系列"></a>滑雪场系列</h4><ul class="contains-task-list"><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 疾风回旋曲 &lt;2017-11-24 Fri&gt; 2.0</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 风雪追击</li></ul><h4 id="加贺一郎系列"><a class="header-anchor" href="#加贺一郎系列"></a>加贺一郎系列</h4><ul class="contains-task-list"><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 毕业 &lt;2019-12-14 Sat&gt;</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 沉睡的森林 &lt;2019-12-16 Mon&gt;</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 谁杀了她 &lt;2019-12-17 Tue&gt;</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 恶意 &lt;2019-12-18 Wed&gt;</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 我杀了他 &lt;2019-12-22 Sun&gt;</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 只差一个谎言 &lt;2019-12-29 Sun&gt;</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 红手指 &lt;2019-12-31 Tue&gt;</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 新参者 &lt;2020-01-02 Thu&gt;</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 麒麟之翼 &lt;2020-01-03 Fri&gt;</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 祈祷落幕时 &lt;2019-12-12 Thu&gt;</li></ul><h4 id="神探伽利略系列"><a class="header-anchor" href="#神探伽利略系列"></a>神探伽利略系列</h4><ul class="contains-task-list"><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 侦探伽利略 &lt;2020-01-06 Mon&gt;</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 预知梦 &lt;2020-01-06 Mon&gt;</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 嫌疑人 x 的献身 &lt;2019-12-09 Mon&gt;</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 圣女的救济 &lt;2020-01-14 Tue&gt;</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 伽利略的苦恼 &lt;2020-01-09 Thu&gt;</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 盛夏的方程式</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 虚像小丑</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 禁忌魔术</li></ul><h3 id="其它推理小说"><a class="header-anchor" href="#其它推理小说"></a>其它推理小说</h3><ul class="contains-task-list"><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 罗杰疑案</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 东方快车谋杀案</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 无人生还</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 啤酒谋杀案</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> ABC 杀人案</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 福尔摩斯探案全集</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 消失的爱人</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 告白</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 逻辑王子的演绎</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 化工女王的逆袭</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 物理教师时空诡计</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 代上帝之手</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 无证之罪</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 坏小孩</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 长夜难明</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 络新妇之理</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 姑获鸟之夏</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 福尔摩斯探案集</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 占星术杀人魔法</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 死了七次的男人</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 一桩事先张扬的凶杀案</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 半落</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 别相信任何人</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 护士学院杀人事件</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 所罗门的伪证</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 达芬奇密码</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 金色梦乡</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 余生皆假期</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 铁鼠之槛</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 罗杰疑案</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 尼罗河上的惨案</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 十角馆事件</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 一朵桔梗花</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 夏与冬的奏鸣曲</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 异邦骑士</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 七个证人</li></ul><h3 id="电影"><a class="header-anchor" href="#电影"></a>电影</h3><ul class="contains-task-list"><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 控方证人</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 消失的爱人</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 彗星来的那一夜</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 穆赫兰道</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 搏击俱乐部</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 东方快车谋杀案</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 致命ID</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 七宗罪</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 天使与魔鬼 &lt;2020-01-05 Sun&gt;</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 达芬奇密码 &lt;2020-01-05 Sun&gt;</li></ul><h3 id="连续剧"><a class="header-anchor" href="#连续剧"></a>连续剧</h3><ul class="contains-task-list"><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 神探伽利略 &lt;2020-01-04 Sat&gt;</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 识骨寻寻踪1</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 识骨寻寻踪2</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 识骨寻寻踪3</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 识骨寻寻踪4</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 识骨寻寻踪5</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 识骨寻寻踪6</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 识骨寻寻踪7</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 识骨寻寻踪8</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 识骨寻寻踪9</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 识骨寻寻踪10</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 识骨寻寻踪11</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 识骨寻寻踪12</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 犯罪心理2</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 犯罪心理3</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 犯罪心理4</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 犯罪心理5</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 犯罪心理6</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 犯罪心理7</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 犯罪心理8</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 犯罪心理9</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 犯罪心理10</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 犯罪心理11</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 犯罪心理12</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 不死法医</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 劳拉之谜</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 大小谎言</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Lie to me</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 神探夏洛克</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 布雷德利夫人探案</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 骇人命案事件簿</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 无妄之灾</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 我的恐怖妻子</li></ul><h2 id="2019-年读书观影清单"><a class="header-anchor" href="#2019-年读书观影清单"></a>2019 年读书观影清单</h2><h3 id="小说"><a class="header-anchor" href="#小说"></a>小说</h3><ul class="contains-task-list"><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 尸语者</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 无声的证词</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 十一根手指</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 清道夫</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 幸存者</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 偷窥者</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 天谴者</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 大唐狄公案 一</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 大唐狄公案 二</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 大唐狄公案 三</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 大唐狄公案 四</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 大唐狄公案 五</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 大唐狄公案 六</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 心理罪系列</li></ul><h3 id="电影-2"><a class="header-anchor" href="#电影-2"></a>电影</h3><ul class="contains-task-list"><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 惊奇队长</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 复仇者联盟 4</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 惊声尖笑 1</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 惊声尖笑 2</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 惊声尖笑 3</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 惊声尖笑 4</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> x 战警：黑凤凰</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 黑衣人：全球追缉</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 蜘蛛侠：英雄远征</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 深夜食堂 &lt;2019-10-04 Fri&gt;</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 大侦探皮卡丘 &lt;2019-10-05 Sat&gt;</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 超能陆战队 &lt;2019-10-06 Sun&gt;</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 沉默的证人 &lt;2019-10-10 Thu&gt;</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 利刃出鞘 &lt;2019-12-12 Thu&gt;</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 犯罪现场 &lt;2019-12-14 Sat&gt;</li></ul><h3 id="连续剧-2"><a class="header-anchor" href="#连续剧-2"></a>连续剧</h3><ul class="contains-task-list"><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 东宫</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 知否知否应是绿肥红瘦</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 犯罪心理1</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 无人生还</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 心理法医</li></ul><h2 id="专题电影记录"><a class="header-anchor" href="#专题电影记录"></a>专题电影记录</h2><h3 id="漫威系列"><a class="header-anchor" href="#漫威系列"></a>漫威系列</h3><ul class="contains-task-list"><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 《钢铁侠》</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 《钢铁侠》</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 《无敌浩克》</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 《钢铁侠2》</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 《雷神》</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 《美国队长》</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 《复仇者联盟》</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 《钢铁侠3》</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 《雷神2》</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 《美国队长2》</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 《银河护卫队》</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 《复仇者联盟2》</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 《蚊人》</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 《美国队长3》</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 《奇异博士》</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 《银河护卫队2》</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 《蜘蛛侠》</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 《雷神3》</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 《黑豹》</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 《复仇者联盟3》</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 《死待》</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 《死待2》</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 《蜘蛛侠-英雄归来》 『2017-9-15』</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 《复仇者联盟3:无限战争》『2018-5-13』</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 《蚁人2:黄蜂女现身》『2018-8-24』</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 《毒液:致命守护者》『2018-11-11』</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 《蜘蛛侠》</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 《蜘蛛侠2》</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 《蜘蛛侠3》</li></ul><h3 id="DC-影业"><a class="header-anchor" href="#DC-影业"></a>DC 影业</h3><ul class="contains-task-list"><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 《正义联盟》『2017-11-22』</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 《海王》『2018-12-09』</li></ul><h3 id="其它"><a class="header-anchor" href="#其它"></a>其它</h3><ul class="contains-task-list"><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 《神奇动物在哪里：格林德沃之罪》『2018-11-24』</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 《你的名字》『2017-11-20』</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 《银魂》『2017-9-1』</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 《疯狂动物城》</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 《看不见的客人》 『2017-9-17』</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 《天才枪手》</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 《环太平洋 雷霆再起》『2018-6-24』</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 《神探》『2018-5-25』</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 《古墓丽影 缘起之战》『2018-6-27』</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 《玛丽与魔女之花》 『2018-6-28』</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 《泄密者》『2018-7-19』</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 《唐人街探案2》『2018-2-22』</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 《无双》</li></ul>]]></content>
      
      
      <categories>
          
          <category> 生活总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 年度清单 </tag>
            
            <tag> 读书清单 </tag>
            
            <tag> 电影清单 </tag>
            
            <tag> 电视清单 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Valine 评论使用报错 504</title>
      <link href="/archives/c7b31ff.html"/>
      <url>/archives/c7b31ff.html</url>
      
        <content type="html"><![CDATA[<p>最近准备重新配置一下 <a href="https://www.zucchiniy.cn">个人博客</a> ，由原来的 <a href="https://gohugo.io/" target="_blank" rel="noopener">Hugo</a> 改到 <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> 来做。</p><p>评论系统也由之前的 <a href="https://disqus.com/" target="_blank" rel="noopener">disqus</a> 改成现在的 <a href="https://valine.js.org/" target="_blank" rel="noopener">valine</a> 。</p><p>主题也使用了非常好看的 Material Design 的样式的 <a href="https://xaoxuu.com/wiki/material-x/" target="_blank" rel="noopener">Material-x</a> ，并在此之上进行修改。</p><p>完成初始的配置之后，做一下测试。</p><p>恩。。。报错了？！</p><p><img src="https://cdn.jsdelivr.net/gh/zucchiniy/blog-assets@master/images/valine-504-error-1.png" alt="Code 504: The app is archived, please restore in console before use."></p><p>虽然报错，但是可以正确的显示对应的服务，查询了一下原因，发现是因为长时间未使用 LeanCode 的服务，导致文件上传域名无法访问了，需要在 <strong>设置-&gt;应用 Keys</strong> 下面，选择重启 <strong>文件上传域名</strong> 和 <strong>文件访问域名</strong> 的服务即可。</p><p>具体的位置如下：</p><img src="https://cdn.jsdelivr.net/gh/zucchiniy/blog-assets@master/images/valine-504-error-2.png" class="" width="300" height="150" title="valine-504-error-2">]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> valine </tag>
            
            <tag> Code 504 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在快捷奏的生活里阅读学习</title>
      <link href="/archives/8d1edf2c.html"/>
      <url>/archives/8d1edf2c.html</url>
      
        <content type="html"><![CDATA[<p>今天在微信读书进行阅读的时候，忽然发现我已经收藏了很多的书籍，大概有几百本，但是在车上或者是在路上，有的读并适合阅读，因为需要思考，而这种时间，并不适合边思考边阅读。更多的可能是进行听书或者是听一些休闲体裁的书。</p><p>在生活中，因为种种原因，在当当上、京东上购买了许许多的实体书，这些书有小说，也有编程相关的书，有散文，也有一些知识理论的凡人版。但是这些书小的有几百页，多的可能有上千页，我不可能随身携带。</p><h2 id="分级"><a class="header-anchor" href="#分级"></a>分级</h2><p>为了更好的利用时间阅读，我将现在可以看的书分为三大类。</p><p>第一类，可以听的书，目前看来，这类书籍主要是小说为主，而一些简单的实用性理论书籍为辅，我可以在通勤的时候，洗澡的时候找开阅读平台，比如微信读书，然后听上个三四十分钟，如果有非常好的段落，就大概记下来，然后再后面再阅读。</p><p>第二类，需要看的书，这类书籍是一些在微信读书中收藏的书籍，可能是一些需要边看边思考的书，内容丰富，我要一边听一边想，这本书在讲什么，甚至有一些内容，需要我在电脑上记录下来，或者实际的练习一下，比如一些编程向的书，不实际的思考的实验，是不能学到这些的。</p><p>第三类，需要反复阅读的书，这种书需要在软件平台上阅读之后，购买下来，然后放在桌面、床头，甚至随身携带，在需的时候，找到他，再仔细的阅读一遍。而就像是一些书的评价一样，可能第一次阅读，第二次阅读和第三次阅读，看到的都是不一样的内容，就像是一些文章中的说的，在我新手的时候，中级的时候，高手的时候，在这本书中都能学到知识。而且学到的还是不一样的知识。</p>]]></content>
      
      
      <categories>
          
          <category> 生活总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阅读 </tag>
            
            <tag> 阅读分组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Google 验证网站所有权</title>
      <link href="/archives/1cbedf30.html"/>
      <url>/archives/1cbedf30.html</url>
      
        <content type="html"><![CDATA[<p>想要有收，必要的点击率和使用率是要保证的，然后就是导流了，如果想在这上面使用，必须要有增加相关的搜索量，将自己写的文章，在 Google 进行搜索的时候，发现并没有数据引入，这就比较尴尬了，查询了一下，可以申请一个 Google Search Console 的服务，这里就必须要整理一下了。</p><p><a href="https://support.google.com/webmasters/answer/9008080#google%5Fanalytics%5Fverification" target="_blank" rel="noopener">点击跳转到验证网站所有权页面</a></p><p>谷歌提供了几个方案，第一个也是推荐的，就是将一个 html 文件放到对应的网站中，这个看了一下。</p><img src="https://cdn.jsdelivr.net/gh/zucchiniy/blog-assets@master/images/google_search_01.png" class=""><p>但是相对于这种方案，下面的两种方法更合适一些，但是都需要在博客的主题中增加相应的代码，这个可以和 Google Adsense 一起使用。</p><img src="https://cdn.jsdelivr.net/gh/zucchiniy/blog-assets@master/images/google_search_02.png" class=""><p>这个方案也是可以的，在使用过程中，想要针对性的看自己的网站的内容，使用 Google Analytics（分析）也是一个不错的方案。</p><img src="https://cdn.jsdelivr.net/gh/zucchiniy/blog-assets@master/images/google_search_03.png" class=""><p>还有一个方法是在 DNS 中增加对应的 txt 文件，但是这个方法，没有解决，在在腾讯云上，配置 DNS 的时候，提示非法，可能是使用的方案不对，需要再研究一下。</p><img src="https://cdn.jsdelivr.net/gh/zucchiniy/blog-assets@master/images/google_search_4.png" class=""><p>目前已经成功申请了广告业务，但是因为写的太次的原因，网站几乎没人看，恩。。。很尴尬。</p>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Google </category>
          
      </categories>
      
      
        <tags>
            
            <tag> google adsense </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 数据分析初阶</title>
      <link href="/archives/a3644317.html"/>
      <url>/archives/a3644317.html</url>
      
        <content type="html"><![CDATA[<h2 id="某一列数据计算"><a class="header-anchor" href="#某一列数据计算"></a>某一列数据计算</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data[<span class="string">'column_name'</span>].value_counts()</span><br></pre></td></tr></table></figure><p>以之前找到的一个前辈的数据为例子，首先我们要获取文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data = pd.read_excel(<span class="string">'xxxx.xls'</span>)</span><br></pre></td></tr></table></figure><p>这里可以单独查看其中的内容 <code>data['nick']</code>，计算其中的大小则使用 <code>data['nick'].value_counts()</code>。</p><p>同样的情况，我们可以增加分组并获取对应的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data1 = data[<span class="string">'score'</span>].groupby(data[<span class="string">'city'</span>]) data1.mean()</span><br></pre></td></tr></table></figure><p>这种情况下可以类比为SQL语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">avg</span>(score) <span class="keyword">from</span> <span class="keyword">data</span> <span class="keyword">group</span> <span class="keyword">by</span> city</span><br></pre></td></tr></table></figure><p>这样的数据看起来不是特别让人喜欢，这个时间我们可以给他排个序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data1.mean().sort_values(ascending=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>现在看起来好多了，但是有点多了，我们只想看前几条记录：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data1.mean().sort_values(ascending=<span class="literal">False</span>).head(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>可惜了，好多城市我都没听过，我只想看直辖市的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data2 = data.loc[(data[<span class="string">'city'</span>].isin([<span class="string">'北京'</span>,<span class="string">'天津'</span>,<span class="string">'重庆'</span>,<span class="string">'上海'</span>]))]</span><br></pre></td></tr></table></figure><p>但是这样还是不特别好看，我们可以再按城市看一下，评分有多少</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data2[<span class="string">'score'</span>].groupby(data2[<span class="string">'city'</span>]).mean()</span><br></pre></td></tr></table></figure><h2 id="数据表信息查看"><a class="header-anchor" href="#数据表信息查看"></a>数据表信息查看</h2><p><code>df.shape</code>: 维度查看<br><code>df.info()</code>: 数据表基本信息，包括围度、列名、数据格式、所占空间<br><code>df.dtypes</code>: 每一列的数据格式<br><code>df['b'].dtype</code>: 某一列的格式<br><code>df.isnull()</code>: 是否空值<br><code>df.['b'].unique()</code>: 查看某一列的唯一值<br><code>df.values</code>: 查看数据表的值<br><code>df.columns</code>: 查看列名<br><code>df.head()</code>: 查看默认的前 10 行数据<br><code>df.tail()</code>: 查看默认的后 10 行数据</p><h2 id="数据表清洗"><a class="header-anchor" href="#数据表清洗"></a>数据表清洗</h2><p><code>df.fillna(value=0)</code>: 用数字 0 填充空值<br><code>df['pr'].fillna(df['pr'].mean())</code>: 用列 pr 的平均值对 na 进行填充<br><code>df['city']=df['city'].map(str.strip)</code>: 清除 city 字段的字符空格<br><code>df['city']=df['city'].str.lower()</code>: 大小写转换<br><code>df['pr'].astype('int')</code>: 更改数据的格式<br><code>df.rename(columns={'category': 'category-size'})</code>: 更改列名<br><code>df['city'].drop_duplicates()</code>: 删除后出现的重复值<br><code>df['city'].drop_duplicates(keep='last')</code>: 删除先出现的重复值<br><code>df['city'].replace('sh', 'shanghai')</code>: 数据替换</p><h2 id="数据预处理"><a class="header-anchor" href="#数据预处理"></a>数据预处理</h2><ul><li>数据表合并</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df_inner = pd.merge(df, df1, how=<span class="string">'inner'</span>)  <span class="comment"># 匹配合并，交集</span></span><br><span class="line">df_left = pd.merge(df, df1, how=<span class="string">'left'</span>)  <span class="comment"># 左联表</span></span><br><span class="line">df_right = pd.merge(df, df1, how=<span class="string">'right'</span>)  <span class="comment"># 右联表</span></span><br><span class="line">df_outer = pd.merge(df, df1, how=<span class="string">'outer'</span>)  <span class="comment"># 并集</span></span><br></pre></td></tr></table></figure><ul><li>设置索引列</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.set_index(<span class="string">'id'</span>)</span><br></pre></td></tr></table></figure><ul><li>按照特定列的值排序</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.sort_values(by=[<span class="string">'age'</span>])</span><br></pre></td></tr></table></figure><ul><li>按照索引列排序</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.sort_index()</span><br></pre></td></tr></table></figure><ul><li>如果 pr 列的值大于 3000 ， group 列显示 hight , 否则显示 low</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">'group'</span>] = np.where(df[<span class="string">'pr'</span>] &gt; <span class="number">3000</span>, <span class="string">'hight'</span>, <span class="string">'low'</span>)</span><br></pre></td></tr></table></figure><ul><li>对复合多个条件的数据进行分级标记</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.loc[(df[<span class="string">'city'</span>] == <span class="string">'beijing'</span>) &amp; (df[<span class="string">'pr'</span>] &gt;= <span class="number">4000</span>), <span class="string">'sign'</span>] = <span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>对 category 字段的值依次进行分列，并创建数据表，索引值 df 的索引列，列名称为 category 和 size</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pd.DataFrame((x.split(<span class="string">'-'</span>)</span><br><span class="line">              <span class="keyword">for</span> x <span class="keyword">in</span> df[<span class="string">'category'</span>]), index=df.index, columns=[<span class="string">'category'</span>, <span class="string">'size'</span>])</span><br></pre></td></tr></table></figure><h2 id="数据提取"><a class="header-anchor" href="#数据提取"></a>数据提取</h2><p><code>loc</code>: 函数按标签值进行提取<br><code>iloc</code>: 按位置进行提取<br><code>ix</code>: 可以同时按标签和位置进行提取</p><p>具体的使用见下：</p><p><code>df.loc[3]</code>: 按索引提取单行的数值<br><code>df.iloc[0:5]</code>: 按索引提取区域行数据值<br><code>df.reset_index()</code>: 重设索引<br><code>df=df.set_index('date')</code>: 设置 date 为索引<br><code>df[:'2013']</code>: 提取 2013 之前的所有数据<br><code>df.iloc[:3,:2]</code>: 从 0 位置开始，前三行，前两列，这里的数据不同去是索引的标签名称，而是数据所有的位置<br><code>df.iloc[[0,2,5],[4,5]]</code>: 提取第 0、2、5 行，第 4、5 列的数据<br><code>df.ix[:'2013',:4]</code>: 提取 2013 之前，前四列数据<br><code>df['city'].isin(['beijing'])</code>: 判断 city 的值是否为北京<br><code>df.loc[df['city'].isin(['beijing','shanghai'])]</code>: 判断 city 列里是否包含 beijing 和 shanghai ，然后将符合条件的数据提取出来<br><code>pd.DataFrame(category.str[:3])</code>: 提取前三个字符，并生成数据表</p><h2 id="数据筛选"><a class="header-anchor" href="#数据筛选"></a>数据筛选</h2><p>使用与、或、非三个条件配合大于、小于、等于对数据进行筛选，并进行计数和求和。</p><ul><li>使用与进行筛选</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df.loc[(df[<span class="string">'age'</span>] &gt; <span class="number">25</span>) &amp; (df[<span class="string">'city'</span>] == <span class="string">'beijing'</span>),</span><br><span class="line">       [<span class="string">'id'</span>, <span class="string">'city'</span>, <span class="string">'age'</span>, <span class="string">'category'</span>]]</span><br></pre></td></tr></table></figure><ul><li>使用或进行筛选</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.loc[(df[<span class="string">'age'</span>] &gt; <span class="number">25</span>) | (df[<span class="string">'city'</span>] == <span class="string">'beijing'</span>), [<span class="string">'id'</span>, <span class="string">'city'</span>, <span class="string">'age'</span>]]</span><br></pre></td></tr></table></figure><ul><li>使用非进行筛选</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.loc[(df[<span class="string">'city'</span>] != <span class="string">'beijing'</span>), [<span class="string">'id'</span>, <span class="string">'city'</span>, <span class="string">'age'</span>]].sort([<span class="string">'id'</span>])</span><br></pre></td></tr></table></figure><ul><li>筛选后的灵气按 city 列进行计数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df.loc[(df[<span class="string">'city'</span>] != <span class="string">'beijing'</span>), [<span class="string">'id'</span>, <span class="string">'city'</span>, <span class="string">'age'</span>]].sort(</span><br><span class="line">    [<span class="string">'id'</span>]).city.count()</span><br></pre></td></tr></table></figure><ul><li>使用 query 函数进行筛选</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.query(<span class="string">'city'</span> == [<span class="string">'beijing'</span>, <span class="string">'shanghai'</span>])</span><br></pre></td></tr></table></figure><ul><li>对筛选后的结果按 pr 进行求和</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.query(<span class="string">'city'</span> == [<span class="string">'beijing'</span>, <span class="string">'shanghai'</span>]).pr.sum()</span><br></pre></td></tr></table></figure><h2 id="数据汇总"><a class="header-anchor" href="#数据汇总"></a>数据汇总</h2><p>主要使用 groupby 和 pivote_table 进行处理。</p><p><code>df.groupby('city').count()</code>: 按 city 列分组后进行数据汇总<br><code>df.groupby('city')['id'].count()</code>: 按 city 进行分组，然后汇总 id 列的数据<br><code>df.groupby(['city','size'])['id'].count()</code>: 对两个字段进行分组汇总，然后进行计算<br><code>df.groupby('city')['pr'].agg([len, np.sum,np.mean])</code>: 对 city 进行分组，然后计算 pr 列的大小、总和和平均数</p><h2 id="数据统计"><a class="header-anchor" href="#数据统计"></a>数据统计</h2><p>数据采样，计算标准差、协方差和相关系数。</p><ul><li>简单数据采样</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.sample(n=<span class="number">3</span>)</span><br></pre></td></tr></table></figure><ul><li>手动设置采样权重</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">weights = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>, <span class="number">0.5</span>]</span><br><span class="line">df.sample(n=<span class="number">2</span>, weights=weights)</span><br></pre></td></tr></table></figure><ul><li>采样后不放回</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.sample(n=<span class="number">6</span>, replace=<span class="literal">False</span>) <span class="comment"># 如果 replace = True 采样后放回</span></span><br></pre></td></tr></table></figure><ul><li>数据表描述性统计</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.describe().round(<span class="number">2</span>).T  <span class="comment"># round 表示显示的小数位数，T 表示转置</span></span><br></pre></td></tr></table></figure><ul><li>计算列的标准差</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">'pr'</span>].std()</span><br></pre></td></tr></table></figure><ul><li>计算两个字段间的协方差</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">'pr'</span>].cov(df[<span class="string">'m-point'</span>])</span><br></pre></td></tr></table></figure><ul><li>计算表中所有字段间的协方差</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.cov()</span><br></pre></td></tr></table></figure><ul><li>两个字段间的相关性分析</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">'pr'</span>].corr(df[<span class="string">'m-point'</span>])  <span class="comment"># 相关系数在 [-1, 1] 之间，接近 -1 为负相关，1 为正相关，0 为不相关</span></span><br></pre></td></tr></table></figure><ul><li>数据表的相关性分析</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.corr()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后台技术 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 学习书单</title>
      <link href="/archives/f47baf34.html"/>
      <url>/archives/f47baf34.html</url>
      
        <content type="html"><![CDATA[<h2 id="Python"><a class="header-anchor" href="#Python"></a>Python</h2><h3 id="入门书单"><a class="header-anchor" href="#入门书单"></a>入门书单</h3><ul class="contains-task-list"><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> Python 编程无师自通 <strong>[已购]</strong></li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Python 核心编程 二  <strong>[已购]</strong></li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Python 核心编程 三 <strong>[已购]</strong></li></ul><h3 id="进阶系列"><a class="header-anchor" href="#进阶系列"></a>进阶系列</h3><ul class="contains-task-list"><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 流畅的 Python ⭐️⭐️⭐️⭐️ <strong>[已购]</strong></li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Python Cookbook 中文版 ⭐️⭐️⭐️ <strong>[已购]</strong></li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Effective Python ⭐️</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Python 高性能编程 ⭐️ <strong>[已购]</strong></li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Python 学习手册 ⭐️star:</li></ul><h3 id="其它方向"><a class="header-anchor" href="#其它方向"></a>其它方向</h3><ul class="contains-task-list"><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> Python Web 开发——测试驱动方法 [2019-10-05 Sat]</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 轻量经 Django [2019-10-14 Mon]</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Python 自动化运维</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Python 绝技——利用 Python 成为顶级黑客</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Python 黑帽子——黑客与渗透测试编程之道</li></ul><h2 id="数据分析"><a class="header-anchor" href="#数据分析"></a>数据分析</h2><ul class="contains-task-list"><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> Head First Data Analysis ⭐️ <strong>[已购]</strong> [2019-10-14 Mon]</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 集体智慧编程 ⭐️⭐️⭐️⭐️⭐️ <strong>[已购]</strong></li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 利用 Python 进行数据分析 ⭐️⭐️⭐️⭐️⭐️ <strong>[已购]</strong></li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Python 金融大数据分析 ⭐️ <strong>[已购]</strong></li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Python 数据分析与挖掘实战 ⭐️⭐️ <strong>[已购]</strong></li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Python 数据可视化编程实战 ⭐️⭐️ <strong>[已购]</strong></li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 百面机器学习——算法工程师带你去面试 <strong>[已购]</strong></li></ul><h2 id="通用"><a class="header-anchor" href="#通用"></a>通用</h2><ul class="contains-task-list"><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 像程序员一样思考</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 重构 改善既有代码的设计 ⭐️️⭐️️⭐️️ <strong>[已购]</strong></li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 代码整洁之道 ⭐️️⭐️️⭐️️ <strong>[已购]</strong></li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 代码整洁之道 程序员的职业素养 ⭐️️⭐️️⭐️️ <strong>[已购]</strong></li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 编程珠玑 一 ⭐️️⭐️️⭐️️ <strong>[已购]</strong></li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 编程珠玑 二 ⭐️️⭐️️⭐️️ <strong>[已购]</strong></li></ul><h2 id="其它"><a class="header-anchor" href="#其它"></a>其它</h2><ul class="contains-task-list"><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Vim 实用技巧 ⭐️⭐️⭐️⭐️ <strong>[已购]</strong></li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 高性能 MySQL ⭐️⭐️ <strong>[已购]</strong></li></ul><h2 id="前端"><a class="header-anchor" href="#前端"></a>前端</h2><ul class="contains-task-list"><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> Vue.js 前端开发——快速入门与专业应用 <strong>[已购]</strong></li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> React 开发实战 <strong>[已购]</strong></li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 单面 Web 应用 <strong>[已购]</strong></li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Bootstrap 实战——从入门到精通 <strong>[已购]</strong></li></ul><h2 id="Linux"><a class="header-anchor" href="#Linux"></a>Linux</h2><ul class="contains-task-list"><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Linux 私房菜——基础学习篇 <strong>[已购]</strong></li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Linux 私房菜——服务器回调篇 <strong>[已购]</strong></li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Linux 命令行大全 <strong>[已购]</strong></li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 深入理解 Linux 内核 <strong>[已购]</strong></li></ul><h2 id="Java"><a class="header-anchor" href="#Java"></a>Java</h2><ul class="contains-task-list"><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> Java RESTful Web Service 实战 <strong>[已购]</strong></li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> Spring MVC MyBatis 开发从入门到项目实战 <strong>[已购]</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> 生活总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 学习计划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 转换 Markdown 方法</title>
      <link href="/archives/9a20479.html"/>
      <url>/archives/9a20479.html</url>
      
        <content type="html"><![CDATA[<p>昨天看书的时候，看到了作者留的一个练习，是将 Markdown 的文档转换成 HTML 的方法。类似的标记语言还有 RestruredText 和 Org Mode，但是貌似 Org 比较小众，暂没有。</p><p>在 Django 中进行转换有两个方案，一个是直接安装 markdown 的模块，<code>pip install markdown</code> ，这种方式是直接将 Markdown 渲染成 HTML ，但是在 Django 项目中需要使用模板进行渲染，会导致样式改变，所以需要增加 <code>safe</code> 到模板中，表示不需要转义。</p><p>代码块如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 view.py 里使用 markdown 进行渲染</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> markdown</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">page</span><span class="params">(request, name)</span>:</span></span><br><span class="line">    template = get_template(<span class="string">'doc.html'</span>)</span><br><span class="line">    docfile = get_template(<span class="string">'doc/&#123;&#125;.md'</span>.format(name))</span><br><span class="line">    content = docfile.render()</span><br><span class="line">    html = template.render(&#123;</span><br><span class="line">        <span class="string">'docname'</span> : name</span><br><span class="line">        <span class="string">'content'</span> : markdown.markdown(content,</span><br><span class="line">                                      extensions=[</span><br><span class="line">                                          <span class="string">'markdown.extensions.extra'</span>,</span><br><span class="line">                                          <span class="string">'markdown.extensions.codehilite'</span>,</span><br><span class="line">                                          <span class="string">'markdown.extensions.tox'</span>,</span><br><span class="line">                                          ])</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(html)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">'en'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    &#123;&#123; content | safe &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>另一个方案是使用 <strong>django.markdown-deux</strong> 进行渲染，首先在 <em>INSTALL_APPS</em> 中增加 <strong>markdown-deux</strong> , 然后模板里引用这个标签：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">'en'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    &#123;% load markdown-duex-tags %&#125;</span><br><span class="line">    &#123;&#123; content | markdown &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样也可以将 Markdown 直接渲染成网页了。</p>]]></content>
      
      
      <categories>
          
          <category> 后台技术 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
            <tag> django </tag>
            
            <tag> markdown-deux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>整数转英文表示</title>
      <link href="/archives/82c82a34.html"/>
      <url>/archives/82c82a34.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>将非负整数转换为其对应的英文表示。</p><footer><strong>LeetCode</strong><cite><a href="https://leetcode-cn.com/problems/integer-to-english-words/" target="_blank" rel="noopener">数转换英文表示</a></cite></footer></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numberToWords</span><span class="params">(self, num: int)</span> -&gt; str:</span></span><br><span class="line">       one_to_19 = <span class="string">'''One Two Three Four Five Six Seven Eight Nine Ten Eleven Twelve</span></span><br><span class="line"><span class="string">               Thirteen Fourteen Fifteen Sixteen Seventeen Eighteen Nineteen'''</span>.split()</span><br><span class="line">       tens = <span class="string">'Twenty Thirty Forty Fifty Sixty Seventy Eighty Ninety'</span>.split()</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(num)</span>:</span></span><br><span class="line">           <span class="keyword">if</span> num &lt; <span class="number">20</span>:</span><br><span class="line">               <span class="keyword">return</span> one_to_19[num - <span class="number">1</span>:num]</span><br><span class="line">           <span class="keyword">elif</span> num &lt; <span class="number">100</span>:</span><br><span class="line">               <span class="keyword">return</span> [tens[num // <span class="number">10</span> - <span class="number">2</span>]] + helper(num % <span class="number">10</span>)</span><br><span class="line">           <span class="keyword">elif</span> num &lt; <span class="number">1000</span>:</span><br><span class="line">               <span class="keyword">return</span> [one_to_19[num // <span class="number">100</span> <span class="number">-1</span>]] + [<span class="string">'Hundred'</span>] + helper(num % <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">           <span class="keyword">for</span> p,w <span class="keyword">in</span> enumerate([<span class="string">'Thousand'</span>,<span class="string">'Million'</span>,<span class="string">'Billion'</span>],<span class="number">1</span>):</span><br><span class="line">               <span class="keyword">if</span> num &lt; <span class="number">1000</span> ** (p+<span class="number">1</span>):</span><br><span class="line">                   <span class="keyword">return</span> helper(num//<span class="number">1000</span>**p) + [w] + helper(num % <span class="number">1000</span> ** p)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">' '</span>.join(helper(num)) <span class="keyword">or</span> <span class="string">"Zero"</span></span><br></pre></td></tr></table></figure><p>这里做了两个测试，关于 <code>if-elif</code> 和 <code>if...if</code> 的时间，在 Leetcode 上测试的时候，发现 <code>if-elif</code> 的效率是低于两个 <code>if...if</code> 的效率的，具体时候如下：</p><img src="https://cdn.jsdelivr.net/gh/zucchiniy/blog-assets@master/images/py-if-elif.png" class=""><img src="https://cdn.jsdelivr.net/gh/zucchiniy/blog-assets@master/images/py-if-if.png" class=""><p>所以在没有具体的逻辑要求的时候，使用 <code>if...if</code> 代替 <code>if-elif</code> 来提高效率，但是为什么会与我的认知相反呢？很奇怪，有时间希望可以研究一下两个的时间使用效率的差别。</p>]]></content>
      
      
      <categories>
          
          <category> 后台技术 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>整数转罗马数字</title>
      <link href="/archives/50b197ff.html"/>
      <url>/archives/50b197ff.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>罗马数字包含以下七种字符： I， V， X， L，C，D 和 M。</p><p>字符          数值<br>I             1<br>V             5<br>X             10<br>L             50<br>C             100<br>D             500<br>M             1000<br>例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。</p><p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：</p><p>I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。<br>X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。 <br>C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。<br>给定一个整数，将其转为罗马数字。输入确保在 1 到 3999 的范围内。</p><footer><strong>LeetCode</strong><cite><a href="https://leetcode-cn.com/problems/integer-to-roman/" target="_blank" rel="noopener">数转罗马数字</a></cite></footer></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">intToRoman</span><span class="params">(self, num: int)</span> -&gt; str:</span></span><br><span class="line">        nums = [<span class="number">1000</span>,<span class="number">900</span>,<span class="number">500</span>,<span class="number">400</span>,<span class="number">100</span>,<span class="number">90</span>,<span class="number">50</span>,<span class="number">40</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">1</span>]</span><br><span class="line">        romans = [<span class="string">'M'</span>,<span class="string">'CM'</span>,<span class="string">'D'</span>,<span class="string">'CD'</span>,<span class="string">'C'</span>,<span class="string">'XC'</span>,<span class="string">'L'</span>,<span class="string">'XL'</span>,<span class="string">'X'</span>,<span class="string">'IX'</span>,<span class="string">'V'</span>,<span class="string">'IV'</span>,<span class="string">'I'</span>]</span><br><span class="line"></span><br><span class="line">        index = <span class="number">0</span></span><br><span class="line">        res = <span class="string">''</span></span><br><span class="line">        <span class="keyword">while</span> index &lt; <span class="number">13</span>:</span><br><span class="line">            <span class="keyword">while</span> num &gt;= nums[index]:</span><br><span class="line">                res += romans[index]</span><br><span class="line">                num -= nums[index]</span><br><span class="line"></span><br><span class="line">            index += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后台技术 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何提高时间使用效率</title>
      <link href="/archives/46a53616.html"/>
      <url>/archives/46a53616.html</url>
      
        <content type="html"><![CDATA[<h2 id="碎片时间"><a class="header-anchor" href="#碎片时间"></a>碎片时间</h2><p>与完整的时间不同，生活中经常有一些碎片时间，这些时间缺乏连续性，并且时间短，随时可能会出现，因此碎片时间和完整时间的利用不太相同。</p><p>我们可以先将自己的碎片时间按长短进行分类，比如 15 分钟、30 分钟，然后按时间长短，将自己可以处理的事情做完，将这些事情列举出来，当有了这个时间之后，可以按这个进行处理。</p><h3 id="15-分钟"><a class="header-anchor" href="#15-分钟"></a>15 分钟</h3><ul><li>阅读一篇微信公众号的文章，如果有趣可以保存下来，在后面有大块时间后进行反复阅读</li><li>休息一下眼睛，在长时间伏案工作后，必要的休息是很有用的</li><li>给家人打个电话之类的</li><li>处理一下工作中的邮件</li><li>将之前收集到的内容整理成一个计划表</li></ul><h3 id="30-分钟"><a class="header-anchor" href="#30-分钟"></a>30 分钟</h3><ul><li>增加一个 Emacs 中想要使用的功能</li><li>整理之前阅读到的知识点</li><li>听一小段英文，并记录学习</li></ul><p>这样时间的利用效率提高之后，学习和工作也就更有计划了。</p><p>这里推荐两个小工具。</p><p>Forest : 可以计时时间并统计，比较好用，期间不能使用手机，强迫症好帮手。还能收集金币换不同的树用来种。</p><p>滴答清单 : 有 Mac 版和 iOS 版本，我主要用来收集阅读到的好文章，或者想要归纳整理的内容，等有时间后再重复阅读。</p><h2 id="其它小技巧"><a class="header-anchor" href="#其它小技巧"></a>其它小技巧</h2><ul><li>对于可以同时做的事情，尽量同时完成。比如洗澡的同时可以洗衣服、烧水等</li><li>有意识的为自己设定一个截止时间，这样可以强迫自己完成某些任务</li><li>做事的时候多思考总结，找到适合自己，提高时间使用效率的方法</li></ul>]]></content>
      
      
      <categories>
          
          <category> 生活总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 时间管理 </tag>
            
            <tag> 时间使用效率 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用 Python 生成数据透视表</title>
      <link href="/archives/f24bdf86.html"/>
      <url>/archives/f24bdf86.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a class="header-anchor" href="#简介"></a>简介</h2><ul><li>利用 <code>read_excel()</code> 的 <em>usecols</em> 参数来指定表的某一列，以方便排除不必要的干扰列</li><li>养成数据加载以后，使用 <code>head()</code> 进行预览的习惯</li><li>养成使用 <code>shape()</code> 及 <code>info()</code> 了解表格基本情况的习惯</li></ul><p>利用 <code>info()</code> 方法查看数据中是否有空值，如果有空值的话，则可以使用 <code>dropna()</code> 方法将其移除。</p><p>需要掌握的主要有两个方法:</p><ul><li><code>DataFrame.insert()</code> 方法，用来增加对应的列</li><li><code>DataFrame.pivot_table()</code> 产生透视图，展示重要的数据</li></ul><a id="more"></a><h2 id="具体方法"><a class="header-anchor" href="#具体方法"></a>具体方法</h2><ul><li><code>DataFrame.insert(self, loc, column, value, allow_duplicates=False)</code></li></ul><p>loc : int 表示第几列；0 &lt;= loc &lt;= len(columns)<br>column : string, number, or hashable object;给插入的列取名，如 column=‘新的一列’<br>value : int ，array，series<br>allow_duplicates : bool 是否允许列名重复，选择 True 表示允许新的列名与已存在的列名重复。</p><ul><li><code>DataFrame.pivot_table(self, values=None, index=None, columns=None, aggfunc='mean', fill_value=None, margins=False, dropna=True, margins_name='All', observed=False)</code></li></ul><p>values : 要进行透视展示的数据<br>index : 需要重新进行展示成列，是原始数据中的某一个行<br>columns : 要重新展示为行的内容，是原来的列或者是其它的属性，可以是列表<br>aggfunc : 要进行统计的行，可以是 <code>numpy.sum</code> / <code>numpy.mean</code> 等，也可以按列进行统计 <code>aggfunc={'c1' : numpy.mean, 'c2' : numpy.sum}</code><br>fill_value : 将缺失值替换的值，幽灵将 Nan 换成 0 : <code>fill_value=0</code><br>margins : bool, 增加行或者列的汇总信息<br>dropna : bool ，是否要删除为空的信息<br>margin_name : string , 默认为 all ，或者自定义一个名称 observed bool , True 显示分类中的数据，False 显示所有数据，默认为 False</p><h2 id="示例代码"><a class="header-anchor" href="#示例代码"></a>示例代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">data = pd.read_excel(<span class="string">r'python_learning.xlsx'</span>,</span><br><span class="line">                     usecols=[<span class="number">1</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>], sheet_name=<span class="string">'sheetName'</span>)</span><br><span class="line">data = data[data[<span class="string">'合同生效日'</span>] &gt; datetime(<span class="number">2018</span>, <span class="number">12</span>, <span class="number">31</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按逻辑，将一组数据拆成三组</span></span><br><span class="line">data1 = data[[<span class="string">"used"</span>, <span class="string">"loan amount"</span>, <span class="string">"company1"</span>, <span class="string">"percent1"</span>]]</span><br><span class="line">data2 = data[[<span class="string">"used"</span>, <span class="string">"loan amount"</span>, <span class="string">"company2"</span>, <span class="string">"percent2"</span>]]</span><br><span class="line">data3 = data[[<span class="string">"used"</span>, <span class="string">"loan amount"</span>, <span class="string">"company3"</span>, <span class="string">"percent3"</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将三组内容，重新命名之后合成一个新表</span></span><br><span class="line">data1 = data1.rename(columns=&#123;<span class="string">"company1"</span>: <span class="string">"company"</span>, <span class="string">"percent1"</span>: <span class="string">"percent"</span>&#125;)</span><br><span class="line">data2 = data2.rename(columns=&#123;<span class="string">"company2"</span>: <span class="string">"company"</span>, <span class="string">"percent2"</span>: <span class="string">"percent"</span>&#125;)</span><br><span class="line">data3 = data3.rename(columns=&#123;<span class="string">"company3"</span>: <span class="string">"company"</span>, <span class="string">"percent3"</span>: <span class="string">"percent"</span>&#125;)</span><br><span class="line"></span><br><span class="line">data4 = pd.concat([data1, data2, data3], ignore_index=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将数据中的空值清除</span></span><br><span class="line">data4 = data4.dropna()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入新的数据</span></span><br><span class="line"><span class="comment"># 1. insert() 方法</span></span><br><span class="line">data4.insert(<span class="number">2</span>, <span class="string">"devide percent"</span>, data4[<span class="string">"percent"</span>]/<span class="number">100</span>)</span><br><span class="line">data4.insert(<span class="number">5</span>, <span class="string">"devide amount"</span>, data4[<span class="string">"loan amount"</span>]*data4[<span class="string">"deivide percent"</span>]/<span class="number">10000</span>, <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 普通索引方式插入</span></span><br><span class="line"><span class="comment"># data4["loan divide amount"] = data4["load amount"]*data4["deivide percent"]/10000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加数据透视</span></span><br><span class="line">data5 = data4[[<span class="string">'company'</span>, <span class="string">'used'</span>, <span class="string">'loan amount'</span>]]</span><br><span class="line">data6 = pd.pivot_table(data5, values=<span class="string">"loan divide amount"</span>, columns=<span class="string">"used"</span>, index=<span class="string">"company"</span>,</span><br><span class="line">                       aggfunc=<span class="string">'sum'</span>, fill_value=<span class="number">0</span>, observed=<span class="literal">False</span>).reset_index()</span><br><span class="line">print(data6.head())</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后台技术 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 透视表 </tag>
            
            <tag> read_excel() </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 Emacs 中执行 Pyhton</title>
      <link href="/archives/d07fab41.html"/>
      <url>/archives/d07fab41.html</url>
      
        <content type="html"><![CDATA[<p>最近在整理 Python 的相关的内容，主要需要整理成笔记，记录下来，等有需要的时候再进行复习。</p><p>在编写 <em>org</em> 的时候，发现 <strong>Python</strong> 的内容并不能很好的执行，而且生成的图片也不能正常显示，所以查询了一下资料，发现如果是 <strong>python</strong> 的话，需要按下面的形势处理：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#+BEGIN_SRC python :results file :preamble &quot;# -*- coding: utf-8 -*-&quot; :python python3 :exports both</span><br></pre></td></tr></table></figure><p>其中 <code>:results</code> 针对不同的执行结果进行调整，如果是想把 Python 生成的图片显示在 org 文档里的话，就要选择 file ，如果是想显示执行的结果的话，就使用 output 。</p><p><code>:preamble</code> 的话，是针对 Python 的码制了，现在如果有中文的话，可能需要指定为 utf-8 所以默认需要加上这个内容。</p><p><code>:python</code> 是用来指定解释器的，在 Mac 环境下，执行的时候，总是提示找不到 pandas 但是如果直接使用 <code>python test.py</code> 的话是能正常显示结果，可能是因为默认查找的 python2 吧，这里进行指定到 python3 上就可以使用了。</p><p><code>:exports</code> 是指定输出的情况的，code 是指显示代码，results 是指的仅显示结果，both 是两个都显示，none 则是指的都不显示。</p><p><code>:session</code> 是特殊情况，有些时候需要调用方法中的 return 使用 session 的话能直接使用，可以不必再单独返回了。</p><p><code>:var</code> 可以指定传入的参数</p><p>使用示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#+tblname: data_table</span><br><span class="line">| a | 1 |</span><br><span class="line">| b | 2 |</span><br><span class="line">| c | 3 |</span><br><span class="line">#+begin_src python :var val&#x3D;1 :var data&#x3D;data_table</span><br><span class="line">return(data[val])</span><br><span class="line">#+end_src</span><br><span class="line"></span><br><span class="line">#+RESULTS:</span><br><span class="line">| b | 2 |</span><br><span class="line"></span><br><span class="line">#+begin_src python :results file</span><br><span class="line">import matplotlib, numpy</span><br><span class="line">matplotlib.use(&#39;Agg&#39;)</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">fig&#x3D;plt.figure(figsize&#x3D;(4,2))</span><br><span class="line">x&#x3D;numpy.linspace(-5,5)</span><br><span class="line">plt.plot(numpy.sin(x)&#x2F;x)</span><br><span class="line">fig.tight_layout()</span><br><span class="line">plt.savefig(&#39;.&#x2F;images&#x2F;python-matplot-fig.png&#39;)</span><br><span class="line">return &#39;.&#x2F;images&#x2F;python-matplot-fig.png&#39; # return filename to org-mode</span><br><span class="line">#+end_src</span><br><span class="line"></span><br><span class="line">#+RESULTS:</span><br><span class="line">[[file:.&#x2F;images&#x2F;python-matplot-fig.png]]</span><br></pre></td></tr></table></figure><p>将这个内容增加到 snippet 中去，在 snippet/org-mode/ 路径下增加 python<br>文件，其中内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># -*- mode: snippet -*-</span><br><span class="line"># name: python</span><br><span class="line"># key: &lt;pyt_</span><br><span class="line"># --</span><br><span class="line">#+begin_src python :results $&#123;1:file&#125; :preamble &quot;# -*- coding: utf-8 -*-&quot; :python python3 :exports $&#123;2:both&#125;</span><br><span class="line">$0</span><br><span class="line">#+end_src</span><br><span class="line">[[file:$&#123;3:path&#125;]]</span><br></pre></td></tr></table></figure><p>之后，在 org 文档中，输入 <code>&lt;pyt_</code> 输入 tab 键就可以自动补全成可用内容了。</p>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Emacs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> org mode </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 学习路径</title>
      <link href="/archives/df5adb66.html"/>
      <url>/archives/df5adb66.html</url>
      
        <content type="html"><![CDATA[<p>现在 Python 主要在 <strong>前端</strong> 、 <strong>数据分析</strong> 两个方面比较火，相较于其它语言，更灵活，经过一段时间的选择之后，希望可以认真的学习 Python 这门编程语言。</p><h2 id="Python-的级别"><a class="header-anchor" href="#Python-的级别"></a>Python 的级别</h2><p>对于我们这些程序员来说，总要有一个级别，不然怎么能知道自己在哪个级别呢？</p><h3 id="一级——了解基本语法"><a class="header-anchor" href="#一级——了解基本语法"></a>一级——了解基本语法</h3><ul class="contains-task-list"><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 掌握了基本的语法，可以通过 Python 实现常用的需求。不管代码质量怎么样。</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> <a href="https://docs.python.org/3.7/tutorial/index.html" target="_blank" rel="noopener">The Python Tutorial 3.7</a></li></ul><h3 id="二级——熟练使用常用的库"><a class="header-anchor" href="#二级——熟练使用常用的库"></a>二级——熟练使用常用的库</h3><ul class="contains-task-list"><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 熟悉常用的 Standard 库的使用。</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> <a href="https://docs.python.org/3.7/library/index.html" target="_blank" rel="noopener">The Python Standard Library</a></li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 熟悉常用的第三方库，要看各自领域中的内容，例如 pandas、flask 等</li></ul><h4 id="Pythonic-的小技能"><a class="header-anchor" href="#Pythonic-的小技能"></a>Pythonic 的小技能</h4><ul class="contains-task-list"><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 善用内置函数<ul class="contains-task-list"><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> enumerate</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> reversed</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> any all</li></ul></li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 小细节<ul class="contains-task-list"><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> raise SystemExit</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 文件的 x 模式</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> ConfigParser</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> defaultdict</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Counter</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> nametuple</li></ul></li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 使用高级并发工具</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 使用装饰器</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 使用设计模式</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 全局变量</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 时间复杂度</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 上下文管理器<ul class="contains-task-list"><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 管理锁</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 管理数据库 cursor</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 运算精度</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 同时管理多个资源</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 实现上下文管理协议</li></ul></li></ul><h3 id="三级——Pythonic"><a class="header-anchor" href="#三级——Pythonic"></a>三级——Pythonic</h3><p>让编码更优雅，更符合 Python 也就是 Pythonic 而不是用 Python 写 Java 类型的代码，比如 with、for-else、try-else、while-else、yield 等。</p><p>另外还需要掌握一些实现原理，了解 Python 在语法层面的一些协方，可以自己实现语法糖。比如（上下文管理器）等。</p><ul class="contains-task-list"><li class="task-list-item"><p><input class="task-list-item-checkbox" disabled="" type="checkbox"> <a href="https://docs.python.org/3.7/reference/index.html" target="_blank" rel="noopener">The PythonLanguage Reference</a></p></li><li class="task-list-item"><p><input class="task-list-item-checkbox" disabled="" type="checkbox"> <a href="https://docs.python.org/3.7/howto/index.html" target="_blank" rel="noopener">Python HOWTOs</a></p></li></ul><h3 id="四级——高级玩法"><a class="header-anchor" href="#四级——高级玩法"></a>四级——高级玩法</h3><ul class="contains-task-list"><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 掌握 Python 的内存机制、GIL限制等</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 知道如何改变 Python 的行为</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 可以轻松写出高质量的 Python 代码</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 能够轻松分辨不同的 Python 代码效率并知道如何优化</li></ul><h3 id="五级——看透本质"><a class="header-anchor" href="#五级——看透本质"></a>五级——看透本质</h3><ul class="contains-task-list"><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 阅读 Python 的 C 实现</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 掌握 Python 中各种对象的本质，掌握是如何通过 C</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 实现对象行为，对于常见的数据结构，掌握其实现细节</li></ul>]]></content>
      
      
      <categories>
          
          <category> 生活总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简历中的水平</title>
      <link href="/archives/d5852cf3.html"/>
      <url>/archives/d5852cf3.html</url>
      
        <content type="html"><![CDATA[<p>在写自己的简历的时候，有时候会有对自己的水平不清楚，查了一些资料，大概了解了一下相关的水平。</p><p>了解 : 知道，不会做，找个人带着可以帮点忙</p><p>熟悉 : 知道，能做 60%-80% 的工作。但碰到难题需要指导一下</p><p>熟练（掌握）: 95% 以上的相关工作进季可 <strong>独立完成</strong> ，无需指导帮忙。且能在 <strong>工作技巧上指导</strong> “了解”、“熟悉”</p><p>精通 : “熟练” 那 5% 解决不了的，“精通” 可以攻关完成。“精通”最主要的价值是可以 <strong>技术预研，能改革现有程序或者方法，解决新问题</strong> 。精通另一点价值是能解脱民 <strong>单一领域多层次问题</strong> ，或 <strong>多领域单一层次问题</strong> 。</p><p>看了一些文章，很多招聘需求中都写着要精通某一技术，很多人说这个有点高了，但其实有可能这里的精通是指的熟练这一级别，毕竟 <strong>精通</strong> 可以说是达到了某一领域中的极限，很多工作并不需要这样的人，除非真的是非常重要的位置。而一般招聘信息中的可能是指的英文中的 <strong>Proficient</strong> 也就和 <strong>熟练（掌握）</strong> 同样的层级，一般英文级别是 <strong>Novice</strong> / <strong>Basic</strong> / <strong>Proficient</strong> / <strong>Advance</strong> / <strong>Expert</strong> 这五个级别。</p>]]></content>
      
      
      <categories>
          
          <category> 生活总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简历 </tag>
            
            <tag> 技能水平 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac 下使用 tmux</title>
      <link href="/archives/cd94d23e.html"/>
      <url>/archives/cd94d23e.html</url>
      
        <content type="html"><![CDATA[<h2 id="安装-tmux"><a class="header-anchor" href="#安装-tmux"></a>安装 tmux</h2><p><code>brew install tmux</code> 可以直接安装到电脑中。</p><h2 id="简单使用"><a class="header-anchor" href="#简单使用"></a>简单使用</h2><h3 id="打开"><a class="header-anchor" href="#打开"></a>打开</h3><p>在命令行中，直接输入 <code>tmux</code> 即可启</p><h3 id="切分窗口"><a class="header-anchor" href="#切分窗口"></a>切分窗口</h3><p><code>ctrl + b</code> 可以启动命令模式，类似 <strong>vim</strong> 下的 <strong>:</strong> 。然后再按 <strong>%</strong> 可以进行水平切分。</p><p>如果想到垂直切分，则按下 <strong>&quot;</strong> 即可。</p><h3 id="后台执行"><a class="header-anchor" href="#后台执行"></a>后台执行</h3><p><code>ctrl + b</code> 然后按 <strong>d</strong> 可以将这个后台隐藏，如果想回到隐藏的进程，可以输入 <strong>tmux attach</strong> 即可。</p><h2 id="基本概念"><a class="header-anchor" href="#基本概念"></a>基本概念</h2><p><strong>Session</strong> : 会话，一组窗口的集合，通常来概括一个任务， <strong>Session</strong> 可以有自己的名字用来切换</p><p><strong>Window</strong> : 窗口，单个可见窗口，有自己的编号，可以快捷切换。</p><p><strong>Pane</strong> : 窗格，被划分可小块的窗口，类似于 <strong>vim</strong> 中的 <code>C-w +v</code> 。</p><h2 id="快捷键"><a class="header-anchor" href="#快捷键"></a>快捷键</h2><p><code>ctrl + b</code> 来激活快捷键，开启后可以使用一些特定按键来执行操作。</p><table>    <tr>        <th>分类</th>        <th>快捷键</th>        <th>功能</th>    </tr>    <tr>        <td>基础</td>        <td>?</td>        <td>获取帮助信息</td>    </tr>    <tr>        <td rowspan="3">Session管理</td>        <td>s</td>        <td>列出所有会话</td>        <tr>            <td>$</td>            <td>重命名当前会话</td>        </tr>        <tr>            <td>d</td>            <td>断开当前会话</td>        </tr>    </tr>    <tr>        <td rowspan="11">Window管理</td>        <td>c</td>        <td>创建一个新窗口</td>        <tr>            <td>,</td>            <td>重命名当前窗口</td>        </tr>        <tr>            <td>w</td>            <td>列出所有窗口</td>        </tr>        <tr>            <td>%</td>            <td>水平分割窗口</td>        </tr>        <tr>            <td>"</td>            <td>垂直分割窗口</td>        </tr>        <tr>            <td>n</td>            <td>选择下一个窗口</td>        </tr>        <tr>            <td>p</td>            <td>选择上一个窗口</td>        </tr>        <tr>            <td>0~9</td>            <td>选择0~9对应的窗口</td>        </tr>        <tr>            <td>l</td>            <td>在前后两个窗口间切换</td>        </tr>        <tr>            <td>w</td>            <td>通过窗口列表切换窗口</td>        </tr>        <tr>            <td>f</td>            <td>在所有窗口中查找指定文本</td>        </tr>    </tr>    <tr>        <td rowspan="16">Pane管理</td>        <td>%</td>        <td>创建水平窗格</td>        <tr>            <td>"</td>            <td>创建一个垂直窗格</td>        </tr>        <tr>            <td>h</td>            <td>将光标移入下左侧窗格</td>        </tr>        <tr>            <td>j</td>            <td>将光标移入下下方窗格</td>        </tr>        <tr>            <td>l</td>            <td>将光标移入下右侧窗格</td>        </tr>        <tr>            <td>k</td>            <td>将光标移入下上方窗格</td>        </tr>        <tr>            <td>q</td>            <td>显示窗格编号</td>        </tr>        <tr>            <td>o</td>            <td>在窗格间切换</td>        </tr>        <tr>            <td>}</td>            <td>与下一个窗格交换位置</td>        </tr>        <tr>            <td>{</td>            <td>与上一个窗格交换位置</td>        </tr>        <tr>            <td>!</td>            <td>在新窗口中显示当前窗格</td>        </tr>        <tr>            <td>x</td>            <td>关闭当前窗格</td>        </tr>        <tr>            <td>SPC</td>            <td>循环切换窗格布局</td>        </tr>        <tr>            <td>Alt + o</td>            <td>逆时针旋转窗格面板</td>        </tr>        <tr>            <td>Ctrl + o</td>            <td>顺时针旋转窗格面板</td>        </tr>        <tr>            <td>方向键</td>            <td>移动光标选择面板</td>        </tr>    </tr>    <tr>        <td rowspan="2">其它</td>        <td>t</td>        <td>在当前窗格显示时间</td>        <tr>        <td>z</td>        <td>最大化和最小化当前窗口</td>        </tr>    </tr></table>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tmux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Emacs 中辅助键设置</title>
      <link href="/archives/3cf89ec9.html"/>
      <url>/archives/3cf89ec9.html</url>
      
        <content type="html"><![CDATA[<p>使用 Emacs 的人，一般都对快捷键的前缀 <em>C</em> 和 <em>M</em> 键不陌生，但其实在 Emacs 中，除了常见的 <em>C</em> 和 <em>M</em> 之外，还有 <em>s</em> 和 <em>H</em> 两个辅助键，但是在不同的操作系统中，辅助键的设置方法也是不一样的，但是我们可以通过在 <code>init.el</code> 文件中设置键位来保证快捷键的一致。</p><ul><li>在 windows 系统下</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(setq w32-pass-lwindow-to-system nil)</span><br><span class="line">(setq w32-lwindow-modifier &#39;super) ; Left Windows key</span><br><span class="line"></span><br><span class="line">(setq w32-pass-rwindow-to-system nil)</span><br><span class="line">(setq w32-rwindow-modifier &#39;super) ; Right Windows key</span><br><span class="line"></span><br><span class="line">(setq w32-pass-apps-to-system nil)</span><br><span class="line">(setq w32-apps-modifier &#39;hyper) ; Menu&#x2F;App key</span><br></pre></td></tr></table></figure><ul><li>在 Mac 系统下</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(setq mac-command-modifier &#39;meta) ; make cmd key do Meta</span><br><span class="line">(setq mac-option-modifier &#39;super) ; make opt key do Super</span><br><span class="line">(setq mac-control-modifier &#39;control) ; make Control key do Control</span><br><span class="line">(setq ns-function-modifier &#39;hyper)  ; make Fn key do Hyper</span><br></pre></td></tr></table></figure><p>在如此配置之后，绑定快捷键过程中，super 对应的是 <em>s</em> 前缀，hyper 对应的是 <em>H</em> 的前缀。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(global-set-key (kbd &quot;H-b&quot;) &#39;backward-word) ; 绑定的 Hyper 键</span><br><span class="line">(global-set-key (kbd &quot;s-b&quot;) &#39;backward-word) ; 绑定的 super 键</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Emacs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> keymap </tag>
            
            <tag> super </tag>
            
            <tag> hyper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Matplotlib 学习笔记</title>
      <link href="/archives/c2ad7d73.html"/>
      <url>/archives/c2ad7d73.html</url>
      
        <content type="html"><![CDATA[<p>记录了几个好入的可视化库，学习还是要从基础—— Matplotlib 开始学习。</p><h2 id="图表基本"><a class="header-anchor" href="#图表基本"></a>图表基本</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.plot(np.random.rand(<span class="number">10</span>))</span><br><span class="line"><span class="comment"># 创建图表</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zucchiniy/blog-assets@master/images/matplotlib01.png" alt=""></p><p>与 Emacs org mode 交互使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line">matplotlib.use(<span class="string">'Agg'</span>)</span><br><span class="line"></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">4</span>, <span class="number">2</span>))</span><br><span class="line">x = numpy.linspace(<span class="number">-15</span>, <span class="number">15</span>)</span><br><span class="line">plt.plot(numpy.sin(x)/x)</span><br><span class="line">fig.tight_layout()</span><br><span class="line">plt.savefig(<span class="string">'images/python-matplot-fig.png'</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="string">'/images/python-matplot-fig.png'</span>  <span class="comment"># return filename to org-mode</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zucchiniy/blog-assets@master/images/python-matplot-fig.png" alt=""></p><p><code>plt.close()</code> : 关闭窗口</p><p><code>plt.gcf().clear()</code> : 每次清空图标内的内容</p><h2 id="Matplotlib-图例"><a class="header-anchor" href="#Matplotlib-图例"></a>Matplotlib 图例</h2><p><img src="https://cdn.jsdelivr.net/gh/zucchiniy/blog-assets@master/images/matplotlib-anatomy.png" alt=""></p><h2 id="折线图"><a class="header-anchor" href="#折线图"></a>折线图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(np.random.rand(<span class="number">10</span>, <span class="number">2</span>), columns=[<span class="string">'A'</span>, <span class="string">'B'</span>])</span><br><span class="line">f = plt.figure(figsize=(<span class="number">10</span>, <span class="number">10</span>))</span><br><span class="line">fig = df.plot(figsize=(<span class="number">8</span>, <span class="number">6</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 表头</span></span><br><span class="line">plt.title(<span class="string">'aa'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'x'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'y'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 图例位置</span></span><br><span class="line"><span class="comment"># best 自适应位置</span></span><br><span class="line"><span class="comment"># upper right</span></span><br><span class="line"><span class="comment"># upper left</span></span><br><span class="line"><span class="comment"># lower left</span></span><br><span class="line"><span class="comment"># lower right</span></span><br><span class="line"><span class="comment"># right</span></span><br><span class="line"><span class="comment"># center left</span></span><br><span class="line"><span class="comment"># center right</span></span><br><span class="line"><span class="comment"># lower center</span></span><br><span class="line"><span class="comment"># upper center</span></span><br><span class="line"><span class="comment"># center</span></span><br><span class="line">plt.legend(loc=<span class="string">'best'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># x 轴边界</span></span><br><span class="line">plt.xlim([<span class="number">0</span>, <span class="number">10</span>])</span><br><span class="line"><span class="comment"># y 轴边界</span></span><br><span class="line">plt.ylim([<span class="number">0</span>, <span class="number">1.1</span>])</span><br><span class="line"><span class="comment"># 设置 x 刻度</span></span><br><span class="line">plt.xticks(range(<span class="number">10</span>))</span><br><span class="line"><span class="comment"># 设置 y 刻度</span></span><br><span class="line">plt.yticks([<span class="number">0</span>, <span class="number">0.2</span>, <span class="number">0.4</span>, <span class="number">0.6</span>, <span class="number">0.8</span>, <span class="number">1.0</span>, <span class="number">1.2</span>])</span><br><span class="line"><span class="comment"># x 轴刻度标签</span></span><br><span class="line">fig.set_xticklabels(<span class="string">'%.1f'</span> % i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>))</span><br><span class="line"><span class="comment"># y 轴刻度标签</span></span><br><span class="line">fig.set_yticklabels(<span class="string">'%.2f'</span> % i <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">0</span>, <span class="number">0.2</span>, <span class="number">0.4</span>, <span class="number">0.6</span>, <span class="number">0.8</span>, <span class="number">1.0</span>, <span class="number">1.2</span>])</span><br><span class="line"><span class="comment"># 边界限定了值的范围，刻度表示显示的标尺，这里 x 轴是 0 - 10 ，但是刻度只有 0.0 - 9.0</span></span><br><span class="line">plt.savefig(<span class="string">'./images/matplotlib02.png'</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="string">'/images/matplotlib02.png'</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zucchiniy/blog-assets@master/images/matplotlib02.png" alt=""></p><ul><li>图表基本样式</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line"></span><br><span class="line">x = np.linspace(-np.pi,np.pi ,<span class="number">256</span>, endpoint=<span class="literal">True</span>)</span><br><span class="line">c, s = np.cos(x), np.sin(x)</span><br><span class="line"></span><br><span class="line">plt.plot(c)</span><br><span class="line">plt.plot(s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示网格</span></span><br><span class="line"><span class="comment"># linestyle: 线型</span></span><br><span class="line"><span class="comment"># color: 颜色</span></span><br><span class="line"><span class="comment"># linewidth: 宽度</span></span><br><span class="line"><span class="comment"># axis: x,y,both 显示 x,y,两者</span></span><br><span class="line">plt.grid(<span class="literal">True</span>, linestyle=<span class="string">'--'</span>, color=<span class="string">'gray'</span>, linewidth=<span class="string">'0.5'</span>, axis=<span class="string">'both'</span>)</span><br><span class="line">plt.tick_params(bottom=<span class="string">'on'</span>, top=<span class="string">'on'</span>, left=<span class="string">'on'</span>,right=<span class="string">'on'</span>)</span><br><span class="line"><span class="comment"># 显示刻度的方向 in, out, inout</span></span><br><span class="line">matplotlib.rcParams[<span class="string">'xtick.direction'</span>]=<span class="string">'out'</span></span><br><span class="line">matplotlib.rcParams[<span class="string">'ytick.direction'</span>]=<span class="string">'in'</span></span><br><span class="line"><span class="comment"># 返回当前 axes 对象，gcf() 返回当前 figure 对象</span></span><br><span class="line">frame = plt.gca()</span><br><span class="line">plt.axis(<span class="string">'on'</span>)</span><br><span class="line">frame.axes.get_xaxis().set_visible(<span class="literal">True</span>)</span><br><span class="line">frame.axes.get_yaxis().set_visible(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">plt.savefig(<span class="string">'./images/matplotlib03.png'</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="string">'/images/matplotlib03.png'</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zucchiniy/blog-assets@master/images/matplotlib03.png" alt=""></p><ul><li>线样式<ul><li><code>-</code>: 直线</li><li><code>--</code>: 虚线</li><li><code>-.</code>: 点横线</li><li><code>:</code>: 全点线</li></ul></li></ul><h2 id="子图"><a class="header-anchor" href="#子图"></a>子图</h2><p>在 matplotlib 中，整个图像为 Figure ，而一个 Figure 中可以有多个 axes。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line">matplotlib.style.use(<span class="string">'bmh'</span>)</span><br><span class="line"></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>), facecolor=<span class="string">'gray'</span>)</span><br><span class="line"><span class="comment"># 创建图表，在2行2列的第一个位置</span></span><br><span class="line">ax1 = fig.add_subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">plt.plot(np.random.rand(<span class="number">50</span>).cumsum(), <span class="string">'--g'</span>)</span><br><span class="line"></span><br><span class="line">ax2 = fig.add_subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line">ax2.hist(np.random.rand(<span class="number">50</span>).cumsum(), alpha=<span class="number">0.5</span>, color=<span class="string">'b'</span>)</span><br><span class="line"></span><br><span class="line">ax4 = fig.add_subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">df2 = pd.DataFrame(np.random.rand(<span class="number">10</span>, <span class="number">4</span>), columns=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>])</span><br><span class="line">ax4.plot(df2, linestyle=<span class="string">'--'</span>, marker=<span class="string">'.'</span>)</span><br><span class="line">plt.savefig(<span class="string">'./images/matplotlib04.png'</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="string">'/images/matplotlib04.png'</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zucchiniy/blog-assets@master/images/matplotlib04.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(np.random.randn(<span class="number">1000</span>, <span class="number">4</span>), columns=list(<span class="string">'ABCD'</span>))</span><br><span class="line">df = df.cumsum()</span><br><span class="line"></span><br><span class="line">df.plot(style=<span class="string">'--'</span>, alpha=<span class="number">0.5</span>, grid=<span class="literal">True</span>,</span><br><span class="line">        figsize=(<span class="number">8</span>, <span class="number">6</span>), subplots=<span class="literal">True</span>, layout=(<span class="number">2</span>, <span class="number">2</span>))</span><br><span class="line">plt.subplots_adjust(wspace=<span class="number">0</span>, hspace=<span class="number">0.2</span>)</span><br><span class="line">plt.savefig(<span class="string">'./images/matplotlib05.png'</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="string">'/images/matplotlib05.png'</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zucchiniy/blog-assets@master/images/matplotlib05.png" alt=""></p><h2 id="Series-直接生成图表"><a class="header-anchor" href="#Series-直接生成图表"></a>Series 直接生成图表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line"></span><br><span class="line">ts = pd.Series(np.random.randn(<span class="number">12</span>),</span><br><span class="line">               index=pd.date_range(<span class="string">'1/1/2019'</span>, periods=<span class="number">12</span>))</span><br><span class="line">ts = ts.cumsum()</span><br><span class="line"></span><br><span class="line">ts.plot(</span><br><span class="line">    <span class="comment"># kind 包括，line, bar, barh</span></span><br><span class="line">    kind=<span class="string">'line'</span>,</span><br><span class="line">    color=<span class="string">'r'</span>,</span><br><span class="line">    <span class="comment"># linestyle -, marker . color g</span></span><br><span class="line">    style=<span class="string">'-gx'</span>,</span><br><span class="line">    <span class="comment"># alpha 透明度，0-1</span></span><br><span class="line">    alpha=<span class="number">0.5</span>,</span><br><span class="line">    use_index=<span class="literal">True</span>,</span><br><span class="line">    rot=<span class="number">0</span>,</span><br><span class="line">    ylim=[<span class="number">-50</span>, <span class="number">50</span>],</span><br><span class="line">    yticks=list(range(<span class="number">-50</span>, <span class="number">50</span>, <span class="number">10</span>)),</span><br><span class="line">    title=<span class="string">'Time Series'</span>,</span><br><span class="line">    legend=<span class="literal">True</span>,</span><br><span class="line">    label=<span class="string">'test'</span>)</span><br><span class="line">plt.grid(<span class="literal">True</span>, linestyle=<span class="string">':'</span>, color=<span class="string">'gray'</span>, linewidth=<span class="string">'0.5'</span>, axis=<span class="string">'both'</span>)</span><br><span class="line"></span><br><span class="line">plt.savefig(<span class="string">'./images/matplotlib06.png'</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="string">'/images/matplotlib06.png'</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zucchiniy/blog-assets@master/images/matplotlib06.png" alt=""></p><h2 id="Dataframe-直接生成图表"><a class="header-anchor" href="#Dataframe-直接生成图表"></a>Dataframe 直接生成图表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(np.random.randn(<span class="number">12</span>, <span class="number">4</span>),</span><br><span class="line">                  index=pd.date_range(<span class="string">'1/1/2019'</span>, periods=<span class="number">12</span>), columns=list(<span class="string">'abcd'</span>))</span><br><span class="line">df = df.cumsum()</span><br><span class="line">df.plot(</span><br><span class="line">    style=<span class="string">'--.'</span>,</span><br><span class="line">    alpha=<span class="number">0.8</span>,</span><br><span class="line">    ylim=[<span class="number">-100</span>, <span class="number">100</span>],</span><br><span class="line">    figsize=(<span class="number">10</span>, <span class="number">8</span>),</span><br><span class="line">    grid=<span class="literal">True</span>,</span><br><span class="line">    yticks=list(range(<span class="number">-100</span>, <span class="number">125</span>, <span class="number">25</span>)),</span><br><span class="line">    title=<span class="string">'test'</span>,</span><br><span class="line">    subplots=<span class="literal">True</span>)</span><br><span class="line">plt.grid(<span class="literal">True</span>, linestyle=<span class="string">':'</span>, color=<span class="string">'gray'</span>, linewidth=<span class="string">'0.5'</span>, axis=<span class="string">'both'</span>)</span><br><span class="line"></span><br><span class="line">plt.savefig(<span class="string">'./images/matplotlib07.png'</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="string">'/images/matplotlib07.png'</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zucchiniy/blog-assets@master/images/matplotlib07.png" alt=""></p><h2 id="柱关图与堆叠图"><a class="header-anchor" href="#柱关图与堆叠图"></a>柱关图与堆叠图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line"></span><br><span class="line">fig, axes = plt.subplots(<span class="number">4</span>,<span class="number">1</span>, figsize=(<span class="number">12</span>,<span class="number">12</span>))</span><br><span class="line">s = pd.Series(np.random.randint(<span class="number">0</span>,<span class="number">10</span>,<span class="number">16</span>), index=list(<span class="string">'abcdefghijklmnop'</span>))</span><br><span class="line">df=pd.DataFrame(np.random.rand(<span class="number">10</span>,<span class="number">3</span>), columns=list(<span class="string">'ABC'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 单系列柱状图</span></span><br><span class="line">s.plot(kind=<span class="string">'bar'</span>, ax=axes[<span class="number">0</span>], grid=<span class="literal">True</span>,legend=<span class="literal">True</span>,label=<span class="string">'s'</span>,alpha=<span class="number">0.6</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多系列柱状图</span></span><br><span class="line">df.plot(kind=<span class="string">'bar'</span>,ax=axes[<span class="number">1</span>],colormap=<span class="string">'Reds_r'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多系列堆叠图</span></span><br><span class="line">df.plot(kind=<span class="string">'bar'</span>,ax=axes[<span class="number">2</span>], colormap=<span class="string">'Blues_r'</span>, stacked=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">df.plot.barh(ax=axes[<span class="number">3</span>],grid=<span class="literal">True</span>,stacked=<span class="literal">True</span>,colormap=<span class="string">'BuGn_r'</span>)</span><br><span class="line"></span><br><span class="line">plt.savefig(<span class="string">'./images/matplotlib08.png'</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="string">'/images/matplotlib08.png'</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zucchiniy/blog-assets@master/images/matplotlib08.png" alt=""></p><h2 id="堆叠柱状图"><a class="header-anchor" href="#堆叠柱状图"></a>堆叠柱状图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">category_names = [<span class="string">'Strongly disagree'</span>, <span class="string">'Disagree'</span>,</span><br><span class="line">                  <span class="string">'Neither agree nor disagree'</span>, <span class="string">'Agree'</span>, <span class="string">'Strongly agree'</span>]</span><br><span class="line">results = &#123;</span><br><span class="line">    <span class="string">'Question 1'</span>: [<span class="number">10</span>, <span class="number">15</span>, <span class="number">17</span>, <span class="number">32</span>, <span class="number">26</span>],</span><br><span class="line">    <span class="string">'Question 2'</span>: [<span class="number">26</span>, <span class="number">22</span>, <span class="number">29</span>, <span class="number">10</span>, <span class="number">13</span>],</span><br><span class="line">    <span class="string">'Question 3'</span>: [<span class="number">35</span>, <span class="number">37</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">19</span>],</span><br><span class="line">    <span class="string">'Question 4'</span>: [<span class="number">32</span>, <span class="number">11</span>, <span class="number">9</span>, <span class="number">15</span>, <span class="number">33</span>],</span><br><span class="line">    <span class="string">'Question 5'</span>: [<span class="number">21</span>, <span class="number">29</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">40</span>],</span><br><span class="line">    <span class="string">'Question 6'</span>: [<span class="number">8</span>, <span class="number">19</span>, <span class="number">5</span>, <span class="number">30</span>, <span class="number">38</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">survey</span><span class="params">(results, category_names)</span>:</span></span><br><span class="line">    labels = list(results.keys())</span><br><span class="line">    data = np.array(list(results.values()))</span><br><span class="line">    data_cum = data.cumsum(axis=<span class="number">1</span>)</span><br><span class="line">    category_colors = plt.get_cmap(<span class="string">'RdYlGn'</span>)(</span><br><span class="line">        np.linspace(<span class="number">0.15</span>, <span class="number">0.85</span>, data.shape[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">    fig, ax = plt.subplots(figsize=(<span class="number">9.2</span>, <span class="number">5</span>))</span><br><span class="line">    ax.invert_yaxis()</span><br><span class="line">    ax.xaxis.set_visible(<span class="literal">False</span>)</span><br><span class="line">    ax.set_xlim(<span class="number">0</span>, np.sum(data, axis=<span class="number">1</span>).max())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i, (colname, color) <span class="keyword">in</span> enumerate(zip(category_names, category_colors)):</span><br><span class="line">        widths = data[:, i]</span><br><span class="line">        starts = data_cum[:, i] - widths</span><br><span class="line">        ax.barh(labels, widths, left=starts, height=<span class="number">0.5</span>,</span><br><span class="line">                label=colname, color=color)</span><br><span class="line">        xcenters = starts + widths / <span class="number">2</span></span><br><span class="line"></span><br><span class="line">        r, g, b, _ = color</span><br><span class="line">        text_color = <span class="string">'white'</span> <span class="keyword">if</span> r * g * b &lt; <span class="number">0.5</span> <span class="keyword">else</span> <span class="string">'darkgrey'</span></span><br><span class="line">        <span class="keyword">for</span> y, (x, c) <span class="keyword">in</span> enumerate(zip(xcenters, widths)):</span><br><span class="line">            ax.text(x, y, str(int(c)), ha=<span class="string">'center'</span>, va=<span class="string">'center'</span>,</span><br><span class="line">                    color=text_color)</span><br><span class="line">    ax.legend(ncol=len(category_names), bbox_to_anchor=(<span class="number">0</span>, <span class="number">1</span>),</span><br><span class="line">              loc=<span class="string">'lower left'</span>, fontsize=<span class="string">'small'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fig, ax</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">survey(results, category_names)</span><br><span class="line"></span><br><span class="line">plt.savefig(<span class="string">'./images/matplotlib09.png'</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="string">'/images/matplotlib09.png'</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zucchiniy/blog-assets@master/images/matplotlib09.png" alt=""></p><h2 id="散点图"><a class="header-anchor" href="#散点图"></a>散点图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line">data = &#123;<span class="string">'a'</span>: np.arange(<span class="number">50</span>),</span><br><span class="line">        <span class="string">'c'</span>: np.random.randint(<span class="number">0</span>, <span class="number">50</span>, <span class="number">50</span>),</span><br><span class="line">        <span class="string">'d'</span>: np.random.randn(<span class="number">50</span>)&#125;</span><br><span class="line">data[<span class="string">'b'</span>] = data[<span class="string">'a'</span>] + <span class="number">10</span> * np.random.randn(<span class="number">50</span>)</span><br><span class="line">data[<span class="string">'d'</span>] = np.abs(data[<span class="string">'d'</span>]) * <span class="number">100</span></span><br><span class="line"></span><br><span class="line">plt.scatter(<span class="string">'a'</span>, <span class="string">'b'</span>, c=<span class="string">'c'</span>, s=<span class="string">'d'</span>, data=data)</span><br><span class="line">plt.xlabel(<span class="string">'entry a'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'entry b'</span>)</span><br><span class="line"></span><br><span class="line">plt.savefig(<span class="string">'./images/matplotlib010.png'</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="string">'/images/matplotlib010.png'</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zucchiniy/blog-assets@master/images/matplotlib010.png" alt=""></p><h2 id="图中插入数据表"><a class="header-anchor" href="#图中插入数据表"></a>图中插入数据表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">data = [[<span class="number">66386</span>, <span class="number">174296</span>, <span class="number">75131</span>, <span class="number">577908</span>, <span class="number">32015</span>],</span><br><span class="line">        [<span class="number">58230</span>, <span class="number">381139</span>, <span class="number">78045</span>, <span class="number">99308</span>, <span class="number">160454</span>],</span><br><span class="line">        [<span class="number">89135</span>, <span class="number">80552</span>, <span class="number">152558</span>, <span class="number">497981</span>, <span class="number">603535</span>],</span><br><span class="line">        [<span class="number">78415</span>, <span class="number">81858</span>, <span class="number">150656</span>, <span class="number">193263</span>, <span class="number">69638</span>],</span><br><span class="line">        [<span class="number">139361</span>, <span class="number">331509</span>, <span class="number">343164</span>, <span class="number">781380</span>, <span class="number">52269</span>]]</span><br><span class="line"></span><br><span class="line">columns = (<span class="string">'Freeze'</span>, <span class="string">'Wind'</span>, <span class="string">'Flood'</span>, <span class="string">'Quake'</span>, <span class="string">'Hail'</span>)</span><br><span class="line">rows = [<span class="string">'%d year'</span> % x <span class="keyword">for</span> x <span class="keyword">in</span> (<span class="number">100</span>, <span class="number">50</span>, <span class="number">20</span>, <span class="number">10</span>, <span class="number">5</span>)]</span><br><span class="line"></span><br><span class="line">values = np.arange(<span class="number">0</span>, <span class="number">2500</span>, <span class="number">500</span>)</span><br><span class="line">value_increment = <span class="number">1000</span></span><br><span class="line">colors = plt.cm.BuPu(np.linspace(<span class="number">0</span>, <span class="number">0.5</span>, len(rows)))</span><br><span class="line">n_rows = len(data)</span><br><span class="line"></span><br><span class="line">index = np.arange(len(columns)) + <span class="number">0.3</span></span><br><span class="line">bar_width = <span class="number">0.4</span></span><br><span class="line">y_offset = np.zeros(len(columns))</span><br><span class="line">cell_text = []</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> range(n_rows):</span><br><span class="line">    plt.bar(index, data[row], bar_width, bottom=y_offset,</span><br><span class="line">            color=colors[row], edgecolor=<span class="string">'black'</span>)</span><br><span class="line">    y_offset = y_offset+data[row]</span><br><span class="line">    cell_text.append([<span class="string">'%1.1f'</span> % (x/<span class="number">1000.0</span>) <span class="keyword">for</span> x <span class="keyword">in</span> y_offset])</span><br><span class="line"></span><br><span class="line">colors_col = plt.cm.Reds(np.linspace(<span class="number">0</span>, <span class="number">0.5</span>, len(rows)))</span><br><span class="line">colors = colors[::<span class="number">-1</span>]</span><br><span class="line">cell_text.reverse()</span><br><span class="line"></span><br><span class="line">the_table = plt.table(cellText=cell_text,</span><br><span class="line">                      rowLabels=rows,</span><br><span class="line">                      rowColours=colors,</span><br><span class="line">                      colLabels=columns,</span><br><span class="line">                      colColours=colors_col,</span><br><span class="line">                      loc=<span class="string">'bottom'</span>)</span><br><span class="line">plt.subplots_adjust(left=<span class="number">0.2</span>, bottom=<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line">plt.ylabel(<span class="string">"Loss in $&#123;0&#125;'s"</span>.format(value_increment))</span><br><span class="line">plt.yticks(values * value_increment, [<span class="string">'%d'</span> % val <span class="keyword">for</span> val <span class="keyword">in</span> values])</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.title(<span class="string">'Loss by Disaster'</span>)</span><br><span class="line"></span><br><span class="line">plt.savefig(<span class="string">'./images/matplotlib011.png'</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="string">'/images/matplotlib011.png'</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zucchiniy/blog-assets@master/images/matplotlib011.png" alt=""></p><h2 id="面积图"><a class="header-anchor" href="#面积图"></a>面积图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">fig, axes = plt.subplots(<span class="number">2</span>, <span class="number">1</span>, figsize=(<span class="number">10</span>, <span class="number">8</span>))</span><br><span class="line">df1 = pd.DataFrame(np.random.rand(<span class="number">10</span>, <span class="number">4</span>), columns=list(<span class="string">'abcd'</span>))</span><br><span class="line">df2 = pd.DataFrame(np.random.randn(<span class="number">10</span>, <span class="number">4</span>), columns=list(<span class="string">'abcd'</span>))</span><br><span class="line">df1.plot.area(colormap=<span class="string">'Greens_r'</span>, alpha=<span class="number">0.8</span>, ax=axes[<span class="number">0</span>])</span><br><span class="line">df2.plot.area(stacked=<span class="literal">False</span>, colormap=<span class="string">'Set2'</span>, alpha=<span class="number">0.8</span>, ax=axes[<span class="number">1</span>])</span><br><span class="line">plt.savefig(<span class="string">'./images/matplotlib012.png'</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="string">'/images/matplotlib012.png'</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zucchiniy/blog-assets@master/images/matplotlib012.png" alt=""></p><h2 id="3d-图例"><a class="header-anchor" href="#3d-图例"></a>3d 图例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">np.random.seed(<span class="number">196608081</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">randrange</span><span class="params">(n, vmin, vmax)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (vmax-vmin)*np.random.rand(n)+vmin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = fig.add_subplot(<span class="number">111</span>, projection=<span class="string">'3d'</span>)</span><br><span class="line">n = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> m, zlow, zhigh <span class="keyword">in</span> [(<span class="string">'o'</span>, <span class="number">-50</span>, <span class="number">-25</span>), (<span class="string">'^'</span>, <span class="number">-30</span>, <span class="number">-5</span>)]:</span><br><span class="line">    xs = randrange(n, <span class="number">23</span>, <span class="number">32</span>)</span><br><span class="line">    ys = randrange(n, <span class="number">0</span>,<span class="number">100</span>)</span><br><span class="line">    zs = randrange(n, zlow, zhigh)</span><br><span class="line">    ax.scatter(xs, ys, zs, marker=m)</span><br><span class="line"></span><br><span class="line">ax.set_xlabel(<span class="string">'X Label'</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">'Y Label'</span>)</span><br><span class="line">ax.set_zlabel(<span class="string">'Z Label'</span>)</span><br><span class="line">plt.savefig(<span class="string">'./images/matplotlib013.png'</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="string">'/images/matplotlib013.png'</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zucchiniy/blog-assets@master/images/matplotlib013.png" alt=""></p><h2 id="更多图例"><a class="header-anchor" href="#更多图例"></a>更多图例</h2><p>更多内容内 <a href="https://matplotlib.org/gallery/index.html" target="_blank" rel="noopener">Matplotlib Gallery</a>，可以从中找到想使用的图例进行使用。</p>]]></content>
      
      
      <categories>
          
          <category> 后台技术 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Matplotlib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac 电脑上使用 Emacs</title>
      <link href="/archives/d9063434.html"/>
      <url>/archives/d9063434.html</url>
      
        <content type="html"><![CDATA[<p>在 Mac 上使用 Emacs 有两个方案，从 <a href="https://emacsformacosx.com/" target="_blank" rel="noopener">Emacs For Mac OS X</a> 手工下载，然后更新本地，或者是在 <strong>homebrew</strong> 中增加配置，然后利用 <code>brew upgrade</code> 从 <a href="https://github.com/railwaycat/homebrew-emacsmacport" target="_blank" rel="noopener">homebrw-emacsmacport</a> 上进行下载和更新。</p><p>两种方式获取的 Emacs 有少许不同，具体的见两个项目的简介。</p><p>第二种方法的命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew tap railwaycat/emacsmacport</span><br><span class="line">brew install emacs-mac</span><br></pre></td></tr></table></figure><p>安装之后，如果要从启动台启动应用，需要在 <em>/applications</em> 和安装位置增加软链接，命令如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/local/opt/emacs-mac/Emacs.app/Applications</span><br></pre></td></tr></table></figure><p>这样之后就可以直接在 <strong>Alfred</strong> 中输入 <code>emacs</code> 直接启动。</p>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Emacs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> install Emacs </tag>
            
            <tag> Mac OS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 基础配置</title>
      <link href="/archives/22347697.html"/>
      <url>/archives/22347697.html</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a class="header-anchor" href="#安装"></a>安装</h2><p>安装的时候最好选择将 <strong>anaconda</strong> 加入到环境变量中，这样可以直接使用 <code>conda</code> 命令来管理包，而不需要增加额外的配置。</p><h2 id="国内源镜像"><a class="header-anchor" href="#国内源镜像"></a>国内源镜像</h2><p>国内使用的话，镜像就还是用 <strong>清华大学开源软件镜像站</strong> ，按步骤安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</span><br><span class="line">conda config --set show_channel_urls yes</span><br></pre></td></tr></table></figure><p>就可以了，如果是 <code>conda</code> 不包含的库的话，还是需要使用 <code>pip</code> 命令进行安装的，可以同样配置成清华源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 临时使用</span></span><br><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple some-package</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设为默认值</span></span><br><span class="line">pip install pip -U</span><br><span class="line">pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"><span class="meta">#</span><span class="bash"> 但是这个需要 pip 版本在 10.0.0 以上，如果低的话，可以临时升级</span></span><br><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pip -U</span><br></pre></td></tr></table></figure><h2 id="包管理"><a class="header-anchor" href="#包管理"></a>包管理</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">conda list #查看所有的包</span><br><span class="line">conda install package_name #安装包</span><br><span class="line">conda remove package_name #移除包</span><br><span class="line">conda update package_name #升级包</span><br><span class="line">conda search search_term #模糊查询包名</span><br><span class="line">conda update conda #更新 conda 本身</span><br><span class="line">conda update anaconda #更新 anaconda</span><br><span class="line">conda update python #更新 Python</span><br></pre></td></tr></table></figure><h2 id="中文乱码"><a class="header-anchor" href="#中文乱码"></a>中文乱码</h2><p>使用 Anaconda 进行数据处理后生成图片的时候，如果不指定对应字体会导致中文乱码，可以通过下面的方案进行解决。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pylab <span class="keyword">import</span> mpl</span><br><span class="line"><span class="comment"># 指定默认字体：解决plot不能显示中文问题</span></span><br><span class="line">mpl.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line"><span class="comment"># 解决保存图像是负号'-'显示为方块的问题</span></span><br><span class="line">mpl.raParams[<span class="string">'axes.unicode_minus'</span>] = <span class="literal">False</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后台技术 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> conda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现自己的子弹笔记</title>
      <link href="/archives/f132014a.html"/>
      <url>/archives/f132014a.html</url>
      
        <content type="html"><![CDATA[<p>已经坚持记笔记和做手帐有大概 2 年的时间了，从最开始的只是记，到后来的坚持用手帐进行时间管理，让我获益良多，从最开始的记到后来的边记边思考，到再后来的不停的换手帐的内容，随着改变，也越来越习惯于手帐本身。</p><p>最近买了一本 <strong>《子弹笔记》</strong> 一直在阅读和学习其中的方法，确实比自己的要谘和有用，但是简单的照搬却又不太习惯，所以想整理一下其中有用的思想，然后进行个性化。</p><p>子弹笔记官方网站：<a href="https://bulletjournal.com/" target="_blank" rel="noopener">https://bulletjournal.com/</a></p><h2 id="思想清单"><a class="header-anchor" href="#思想清单"></a>思想清单</h2><ol><li>第一栏列出所有的 <strong>正在</strong> 做的事情</li><li>第二栏列出所有的 <strong>应该</strong> 做的事情</li><li>第三栏列出所有的 <strong>你想</strong> 做的事情</li></ol><h3 id="回顾思想清单"><a class="header-anchor" href="#回顾思想清单"></a>回顾思想清单</h3><ol><li>画去不要紧的，或者不重要的内容</li><li>找出相关的内容，创建个性化的集子</li></ol><h3 id="迁移思想清单"><a class="header-anchor" href="#迁移思想清单"></a>迁移思想清单</h3><ul><li>把未来事项移入未来记录</li><li>把当月事项移行进月度记录</li><li>为月度记录排列主次</li><li>把优先事项迁移进每日记录</li><li>把附加事项迁移进对应的修改化集子</li></ul><h2 id="关键内容"><a class="header-anchor" href="#关键内容"></a>关键内容</h2><p>索引 : 利用标题和页码定位笔记的内容，而索引无需连续；专用索引与集子类似，提供特定的主题的索引</p><p>未来记录 : 用来记录本月以外的任务和事件</p><p>月度记录 : 用于一览本月的时间安排和任务。也可以作为你本月的思想清单</p><p>每日记录 : 用于快速记录下每一天里所有的想法</p><p>快速记录 : 利用简短的符号快速捕捉想法，分成笔记、事件、任务三类，并排序。</p><p>集子 : 笔记中模块化的构成部分，用于储存紧密相关的内容。核心领子有索引、未来记录、月度记录、每日记录，但也支持个性化设计。</p><p>迁移 : 每月从笔记本中过滤掉的无意义的内容的过程</p><p>快速记录中，任务、事件、笔记三种的意义：</p><p>任务 : <strong>需要</strong> 做的事情，用 “.” 标记，同样的，迁移任务使用 “&gt;” 标记，计划中的任务用 “&lt;” 标记，移除的任务用 <s>删除线</s> 表示</p><p>事件 : <strong>经历</strong> 过的事情，用 “o” 标记</p><p>笔记 : <strong>不想遗忘</strong> 的事情，用 “-” 标记</p><p>特殊的一些标记，比如重点任务、灵感、长笔记</p><p>重点任务 : 在任务前加 “*”</p><p>灵感 : 在任务前增加 “!”</p><p>长笔记 : 有特殊的想法或者想额外的记录一些内容，使用 “+” 标记</p><h3 id="日历页"><a class="header-anchor" href="#日历页"></a>日历页</h3><p>在日历页上，左侧按顺序列出日期，并在日期右侧附上星期，在左侧留出空白空间，以便后续增加特殊符号。</p><h3 id="任务页"><a class="header-anchor" href="#任务页"></a>任务页</h3><p>月度记录中的任务页是不断的更新的思想清单，如果有最终的时候，可以未完成的时候进行迁移，也可以调整日期。</p><h3 id="未来记录"><a class="header-anchor" href="#未来记录"></a>未来记录</h3><p>未来记录主要是将本月无法完成的项目，提前写入到未来日记中，或者是读书、学习的特殊记划，这样在月度记录的时候，就能很好的规划我们的生活。</p><h3 id="引线法"><a class="header-anchor" href="#引线法"></a>引线法</h3><p>索引有时候页码不连续，但是使用过程中，又不想过多翻回到索引页观看，可以使用引线法，比如在第二块的初始页面中，可以使用 <strong>“当前页码/前一部分页码”</strong> 的形式进行记录，而同理，结束部分则使用 <strong>“后一部分页码/当前页码”</strong> ，这种方式可以扩展到不同的本子中，比如使用 <strong>“第几册.第多少页”</strong> 这种形式记录。</p><h2 id="计划"><a class="header-anchor" href="#计划"></a>计划</h2><h3 id="旅行计划"><a class="header-anchor" href="#旅行计划"></a>旅行计划</h3><p>描述 : 包括要去什么地方，要做什么，和谁一起去，是旅行还是休闲</p><p>目的地 : 记录了这次要去的地方，包括景点、住宿等</p><p>活动 : 想做什么？旅伴想做什么？</p><p>时间 : 航班时间、当地交通、活动的时间等</p><p>预算 : 机票、租车、住宿、汽油、伙食、活动、购物、礼品</p><h3 id="行程计划"><a class="header-anchor" href="#行程计划"></a>行程计划</h3><p>要记录我们出行过程中的事情，比如从哪儿飞到哪儿，怎么入住，有什么特殊的事件吗，等等问题，可以按地点进行记录。</p><ul><li>第一栏记录机场，包含对应的事件的页码</li><li>第二栏记录时间，包括星期和日期</li><li>第三栏记录时间轴上的任务，比如入住酒店、退房、飞住什么地方、要做事情，可以有效的进行规划</li></ul><h2 id="个性化调整"><a class="header-anchor" href="#个性化调整"></a>个性化调整</h2><h3 id="长笔记"><a class="header-anchor" href="#长笔记"></a>长笔记</h3><p>长笔记可以记录某一件事情的后续，或者是有什么想法，为什么有这个想法，或者是与人发生了什么样的交流，甚至是思考了什么问题，或者是对某件事的感想，这些可以培养记录的好习惯。</p><h3 id="习惯养成"><a class="header-anchor" href="#习惯养成"></a>习惯养成</h3><p>这个是与月历相关，可以在页面上记录一个月的习惯养成情况，与日历上的日期一一对应，比如坚持运动、阅读等事情，或者是增加一些希望养成的习惯。</p><p>针对阅读，可以设定为阅读某一本书，或者是阅读多少时间，这样可以让任务更具体，而越是具体的任务，越容易完成。</p>]]></content>
      
      
      <categories>
          
          <category> 生活总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> 子弹笔记 </tag>
            
            <tag> 手帐体系 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 刷机实践</title>
      <link href="/archives/feff8405.html"/>
      <url>/archives/feff8405.html</url>
      
        <content type="html"><![CDATA[<h2 id="获取"><a class="header-anchor" href="#获取"></a>获取</h2><p>#在刷机之前，需要在电脑上下载 <strong>Android Preview</strong> 包，一般我都是到<a href="https://developer.android.google.cn/preview/download#flash" target="_blank" rel="noopener">安卓中国</a> ，这里可以下载最新的包。</p><h2 id="手机"><a class="header-anchor" href="#手机"></a>手机</h2><p>相对下载包的获取，比较难的是有一部支持最新的安卓系统的手机，一般 <strong>Preview</strong> 版的系统都是默认支持 <strong>Google</strong> 自己的手机的。</p><p>目前只支持 Pixel 系列的手机，包括 XL 系列。</p><ul><li>Pixel n</li><li>Pixel n XL</li></ul><h2 id="刷机"><a class="header-anchor" href="#刷机"></a>刷机</h2><p>刷机目前有两个比较麻烦的地方，第一就是需要安装 <code>adb</code> 的命令，也就是 <strong>Android</strong> 的功能模块，第二就是需要解锁手机。</p><h3 id="adb-配置"><a class="header-anchor" href="#adb-配置"></a>adb 配置</h3><p>即将 <strong>Android SDK</strong> 下载下来，然后将其配置到环境变量中即可</p><h4 id="Windows"><a class="header-anchor" href="#Windows"></a>Windows</h4><ol><li>配置 <strong>ANDROID_HOME</strong> 变量到环境变量中</li><li>配置 <strong>%ANDROID_HOME%\platform-tools</strong> 到 <strong>path</strong> 中</li><li>配置 <strong>%ANDROID_HOME%\tools</strong> 到 <strong>path</strong> 中</li></ol><h4 id="Linux-Mac"><a class="header-anchor" href="#Linux-Mac"></a>Linux &amp; Mac</h4><p>打开 <strong>profile</strong> 文件，默认为 <em>.bash_profile</em> 如果使用的是 <strong>zsh</strong> 则编辑 <em>.zshrc</em> 文件。</p><p>将下面的内容放到 <strong>profile</strong> 文件中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ANDROID_HOME=~/developerTools/adt-mac/sdk</span><br><span class="line">export ANDROID_HOME</span><br><span class="line">PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools</span><br></pre></td></tr></table></figure><h4 id="Mac"><a class="header-anchor" href="#Mac"></a>Mac</h4><p>Mac 电脑提供了一个自动安装的内容，可以将 <code>adb</code> 相关的内容直接安装，但是如果是想开发 <strong>Android</strong> 应用的话，则必须要按上面的方案进行配置。</p><p>首先需要先安装 <strong>brew</strong> ，具体方案见 <a href="https://brew.sh/index%5Fzh-cn" target="_blank" rel="noopener">Homebrew</a> ，或者可以直接看其 <strong>GitHub</strong> 的主页 <a href="https://github.com/Homebrew/brew" target="_blank" rel="noopener">Homebrew/brew</a> 。</p><p>然后执行下面的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask install android-platform-tools</span><br></pre></td></tr></table></figure><p>如果执行刷机的时候，提示 <strong>fastboot is too old</strong> 则需要重新安装 <em>android-platform-tools</em> , 因为 <code>brew update</code> 更新是不能更新 <em>cask</em> 库的内容的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask reinstall android-platform-tools</span><br></pre></td></tr></table></figure><p>最后，在命令行中执行 <code>adb devices</code> 不报错刚配置成功。如果配置之后，还依然报错的话，可以检查一下是否在使用过程中，将 <strong>USB 调试功能</strong> 关闭了。</p><h3 id="操作"><a class="header-anchor" href="#操作"></a>操作</h3><ol><li><p>连接手机</p></li><li><p><code>adb devices</code> 获取手机的 <strong>device id</strong></p></li><li><p><code>adb reboot bootloader</code> 进入 <strong>bootloader</strong> 模式</p></li><li><p><strong>如果已经解锁了，则进入第8步，如果未解锁则进入第五步</strong></p></li><li><p>进入到 <strong>bootloader</strong> 之后，执行 <code>fastboot flashing unlock</code></p></li><li><p>如果是 <strong>Pixel 2 XL</strong> 则执行 <code>fastboot flashing unlock_critical</code></p></li><li><p>如果是更早的设备，则需要执行 <code>fastboot oem unlock</code></p></li><li><p>进入下载的目录，然后执行 <strong>flash-all</strong> 脚本，如果是 <em>Windows</em> 则是 <code>flash-all.bat</code> ，其它的则执行 <code>flash-all.sh</code></p></li><li><p>执行结束后，手机就已经刷好了，重启就可以使用了</p></li><li><p>如果执行失败的话，就需要解压目录下的 <em>image</em> 对应的包，然后执行下面的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fastboot flash vendor vendor.img</span><br><span class="line">fastboot flash boot boot.img</span><br><span class="line">fastboot flash system system.img</span><br></pre></td></tr></table></figure></li></ol><p>然后重启手机就可以了。</p><h3 id="V-版手机解锁"><a class="header-anchor" href="#V-版手机解锁"></a>V 版手机解锁</h3><p>需要刷入一个工具，才能解锁</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb push dePixel8 /data/local/tmp</span><br><span class="line">adb shell chmod 755 /data/local/tmp/dePixel8</span><br><span class="line">adb shell /data/local/tmp/dePixel8</span><br></pre></td></tr></table></figure><p>然后再执行 <code>adb reboot bootloader</code> 就可以正常解锁了。</p><p><a href="http://theroot.ninja/depixel8.html" target="_blank" rel="noopener">dePixel8.zip 下载</a></p><p>判断是否 V 版手机</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell getprop|grep cid</span><br></pre></td></tr></table></figure><p>如果出现 <strong>VZW_001</strong> 就是 V 版手机</p>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓系统 </tag>
            
            <tag> 手动更新手机系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何写总结类的博客</title>
      <link href="/archives/8d4adffc.html"/>
      <url>/archives/8d4adffc.html</url>
      
        <content type="html"><![CDATA[<p>学习是一个将别人的知识转换为自己的知识的过程，这其中最重要的就是思考，如果只是将看到的内容搬到一个地方，那这个过程不能称为学习，只能算是一个备份。</p><p>知识从阅读、思考过程中来，当看到一个比较好的用法的时候，我们可以去抄，但是在抄完之后，必须要有一个整理的过程，这个过程也是为了将一个大块的内容，转换成小块的内容，然后将已知的知识点进行巩固，然后将未学习过的点进行归纳，在后面再运用的时候，可以从我们自己的知识库中找到需要的内容，这个过程就是知识管理。</p><p>知识管理最重要的内容就是复盘和整理，做为一个单线程的程序员，必须对自己的一系列的知识进行整理和归纳，才能跟上前进的脚步，而现在知识的获取不是问题，真正的问题是知识的整理，毕竟自己好才是真的好。</p><p>所以现在我有一套整理的方案，比如阅读到好的文章，先收藏到滴答清单，然后在有时间的时候，把好的文章再重读一遍，然后整理成一篇博客。</p><p>再或者读到一个好解决方案，但是这个方案并不了解，一般会再重新搜索一下具体的内容，将文章先能读一遍，然后再把整篇文章细读一遍，然后保存下来，再看看，等觉得文章已经没问题，再进行整理，最后才是写出一篇总结文档，有时候，前几遍读不明白没什么问题，但是如果不经过整理、归纳、重读、复盘这些操作，等到下次，再读到还是不明白，才是真的问题。</p><p>知识就是要有学习和进步，哪怕慢点，也是有成效的，最怕的就是看起来很努力，看起来很好学，但事实上，并没有在学，没有进步。</p>]]></content>
      
      
      <categories>
          
          <category> 生活总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> 知识管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 反射获取数据</title>
      <link href="/archives/29237c14.html"/>
      <url>/archives/29237c14.html</url>
      
        <content type="html"><![CDATA[<h2 id="反射获取成员变量"><a class="header-anchor" href="#反射获取成员变量"></a>反射获取成员变量</h2><p>使用 Sql2o 方法读取数据库的时候，发现表名类似，但是有一些差别，如果使用 <code>select *</code> 方式查询，需要针对对象声明多个内容，但是实际上用的都是一样的，所以想通过获取成员变量的名称来拼接成 <code>select</code> 后面的内容，经过尝试，发现可以用下面的方法获取：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">allName</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String allName = <span class="string">""</span>;</span><br><span class="line">    Field[] fields = <span class="keyword">this</span>.getClass().getDeclaredFields();</span><br><span class="line">    <span class="keyword">for</span>(Field field : fields)&#123;</span><br><span class="line">        allName += field.getName() + <span class="string">","</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> allName.substring(<span class="number">0</span>, allName.length() -<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样之后，调用 <code>allName()</code> 方法就能直接获取对应的变量名称了。</p><h2 id="反射获取父类实例化对象中的值"><a class="header-anchor" href="#反射获取父类实例化对象中的值"></a>反射获取父类实例化对象中的值</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Field[] fields = <span class="keyword">super</span>.getClass.getDeclaredFields();</span><br><span class="line">    <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">        field.setAcessible(<span class="keyword">true</span>);</span><br><span class="line">        Method method = <span class="keyword">super</span>.getClass().getDeclaredMethod(<span class="string">"get"</span> + upperHeadChar(field.getName()));</span><br><span class="line">        Object obj = method.invoke(<span class="keyword">super</span>);</span><br><span class="line">        field.set(<span class="keyword">this</span>, obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (NoSuchMethodException | IllegalAcessException | InvocationTargetException e)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">upperHeadChar</span><span class="params">(String in)</span></span>&#123;</span><br><span class="line">    String head = in.substring(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> head.toUpperCase() + in.substring(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后台技术 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reflex </tag>
            
            <tag> Field </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Selenium 操作下拉框</title>
      <link href="/archives/9b20002f.html"/>
      <url>/archives/9b20002f.html</url>
      
        <content type="html"><![CDATA[<p>使用 Selenium 进行 Web 端的自动化测试的时候，不能通过 findElement 进行自动选择，后来发现，需要先声明一个 Select 类型，再进行选择，实现方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Select dropdown = <span class="keyword">new</span> Select(driver.findElement(By.id(<span class="string">"selectId"</span>)));</span><br><span class="line">dropdown.selectByValue(<span class="string">"optionValue"</span>);</span><br><span class="line"><span class="comment">// 或者使用 Index</span></span><br><span class="line">dropdown.selectByIndex(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// 或者使用下拉框中的内容</span></span><br><span class="line">dropdown.selectByVisibleText(<span class="string">"content"</span>);</span><br></pre></td></tr></table></figure><p>这样就可以操作下拉框了。</p>]]></content>
      
      
      <categories>
          
          <category> 后台技术 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Selenium </tag>
            
            <tag> 下拉框 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Emacs 功能键配置</title>
      <link href="/archives/749f099.html"/>
      <url>/archives/749f099.html</url>
      
        <content type="html"><![CDATA[<p>Emacs 和 Vim 最大的就是快捷键的体系不同，在 Emacs 中，快捷键要有对应的控制键配合，才能正常使用，比如打开 <strong>Agenda</strong> <code>C-c a</code> 一般指的是 <code>Ctrl + c a</code> 而在 Emacs 中，使用的控制键主要有以下几种：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s- : supper</span><br><span class="line">S- : Shift</span><br><span class="line">M- : Meta &#x2F; Alt</span><br><span class="line">C- : Ctrl</span><br><span class="line">H- : Hyper</span><br></pre></td></tr></table></figure><p>其中 Ctrl、Meta/Alt、Shift这几种快捷键比较常见，但是 supper 这个键就比较少见了，而且在键盘上，一般也看不到，所以我们在配置的时候，需要在配置中声明这几个键被绑定在哪些键上。</p><p>如果是在 /Windows/ 系统下需要增加如下的配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(setq w32-lwindow-modifier &#39;supper</span><br><span class="line">      w32-apps-modifier &#39;hyper)</span><br></pre></td></tr></table></figure><p>但是如果使用的是 /Mac/ 系统的话要增加如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(setq mac-command-modifier &#39;meta</span><br><span class="line">      mac-option-modifier &#39;super</span><br><span class="line">      mac-control-modifier &#39;control</span><br><span class="line">      ns-function-modifier &#39;hyper)</span><br></pre></td></tr></table></figure><p>但是这样的情况又有另外一个问题，需要在特定的系统中使用，所以我们要在对应的配置上增加上对系统的判断，绑定的方案如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(when sys&#x2F;winntp</span><br><span class="line">  ;; 经过测试，在 windows 下，window 键是不能修改的</span><br><span class="line">  (setq ;;w32-lwindow-modifier &#39;supper</span><br><span class="line">    w32-apps-modifier &#39;hyper)</span><br><span class="line">  (w32-register-hot-key [s-t]))</span><br><span class="line"></span><br><span class="line">(when sys&#x2F;macp</span><br><span class="line">  (setq mac-command-modifier &#39;meta</span><br><span class="line">    mac-option-modifier &#39;super</span><br><span class="line">    mac-control-modifier &#39;control</span><br><span class="line">    ns-function-modifier &#39;hyper))</span><br></pre></td></tr></table></figure><p>这样我们就可以在不同的系统中正确的使用不同的功能键了。</p>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Emacs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> modifier keys </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Emacs 个人使用</title>
      <link href="/archives/4c7b9a02.html"/>
      <url>/archives/4c7b9a02.html</url>
      
        <content type="html"><![CDATA[<p>使用 Emacs 已经有两三年的时间了，从最开始自己配置了一个垃圾版，到后来使用的 <strong>spacemacs</strong> ，再到后来又重新配置了一个个人简单版，再到又配置了一个综合版，个人版最大的问题就是慢，启动几十个配置比大神们配置的启动几百个还要慢，但是最大的优势就是符合我的使用习惯，可以用我最喜欢的方式配置，也可以把我认为没用的配置删除掉。</p><p>当然使用大神们的配置也有一个问题，太大了，而且对于工程化的配置，总需要跟紧开发的路线，可能更新了版本之后，还需要同步更新自己的配置才能使用。这总是让人觉得特别的不爽，而且想要从头学习配置话，总是有一些东西不知道是为什么，也不知道就言怎么用，可是删除掉就是不行，会慢，会报错，会出各种的问题。</p><p><a href="https://www.jianshu.com/p/e952cd0ad48b" target="_blank" rel="noopener">怎么学习 Emacs ? 达到真正融汇贯通的境界?</a></p><p>今天读到的这篇文章让我知道应该如果去使用自己的 Emacs。但是大神毕竟是大神，对于我这样的凡人来说，有点太难了，拿到大神说的这篇文章，1241页的全英文文档。但是从大神的思路中，我觉得我找到了一个比较符合我这样的凡人的路线。</p><p>熟悉快捷键 : 这个没什么可说的，如果不熟悉快捷键的话，几乎所有的工具都用不好，但是 Emacs 最大的特点就是可以定制你的快捷键，这样可以让你更容易习惯这个工具，能更快的上手。</p><p>复杂插件和抄录配置 : 这个也没什么，在入手之后，一个可以使用的配置才是最合适的配置，如果不能使用，那永远也不知道 Emacs 的美在什么的地方，而且工具不能使用，又怎么能当做工具呢？</p><p>找到自己的插件 : 这里的插件是指的从你抄录的或者使用过的配置中找到有用的配置，然后吸收为自己的配置，这个过程可能是大神们的一步，但是对于我来说不得不拆分为几步才能慢慢的使用。我现在找到的，呼声最高的 Emacs 就是 <em>org mode</em> , 然后就是 <em>magit</em> 。这两个工具几乎是 Emacs 的半边天。当然对于非程序员来说， <em>org mode</em> 就已经是半边天了，很多人就是冲着 <em>org mode</em> 来使用 Emacs 的。</p><p>针对自己的插件进行整理和学习 : 将整理出来的插件，针对插件的文档进行阅读和学习，主要是因为这些插件的文档都相对比较短，目前我看到的最后的也就是 <em>org-mode</em> 的341页，与上千页的文档比较，当然是比较简单的了。</p><p>阅读 Emacs Manual : 终于到了最重要的功能了，但是经过了之前的学习之后，应该也就能把这本特别长的文档看完看明白了，然后按大神的思路，一页一页的挨着看, 一个 API 一个 API 的读, 不要跳过每个 API , 都在 ielm 里面实践一下，遇到不知道啥鬼用的 API , 去 Google 或 EmacsWiki 上搜索一下, 看看别人怎么用这些API的。</p><p>暂时先就这些工作，等我到了这个技术之后，再进行第二次更新。</p>]]></content>
      
      
      <categories>
          
          <category> 生活总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Emacs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>让自己生活的更好</title>
      <link href="/archives/9c3a1f23.html"/>
      <url>/archives/9c3a1f23.html</url>
      
        <content type="html"><![CDATA[<h2 id="学会早睡"><a class="header-anchor" href="#学会早睡"></a>学会早睡</h2><p>想要早睡，需要减少自己的兴奋点，在生活中，如果无法早睡，白天的工作效率也就会降低，可能要拖拉到半夜才完成，这样就成了一个恶性循环了。</p><p>我尝试过早睡，但是未必能早起，主要是就算我10点躺下，也不可能在10点半入睡，毕竟手机、pad等等太好玩了。</p><p>所以想要早睡的会，要学会给自己降噪。</p><ol><li>早一点运动和洗澡，避免淋水让自己重回清醒状态；</li><li>调暗室内灯光，尽量用暖色灯；</li><li>点燃香薰，或者其它助眠的东西；</li><li>阅读简单轻快的小说或者看一些轻松的视频，不要让自己兴奋或者让自己思考；</li><li>放下手机；</li></ol><h2 id="努力运动"><a class="header-anchor" href="#努力运动"></a>努力运动</h2><p>作为已经迈入中年油腻男境界的人来说，其实可以好的，比如给自己更好的身材，就算光头也可以很有型，所以运动是必不可少的，不过现在的我还是先从减肥开始，这里就不会有更多的问题，就是坚持二字，必然会瘦下来。</p><h2 id="断舍离"><a class="header-anchor" href="#断舍离"></a>断舍离</h2><h3 id="生活断舍离"><a class="header-anchor" href="#生活断舍离"></a>生活断舍离</h3><p>“把不用的东西扔掉！”</p><p>这是非常简单的几乎所有人都知道的真理，但是在生活中，不用的东西到底是怎么定义的，我现在不用，将来也不会用到的一定是。但是我们怎么知道将来会不会呢？</p><p>所以应该把自己的物欲降低，先从不买或者真正有用或者想用的时候再买，千万不能图打折，图降价而购入一些不需要的东西。</p><p>特别是对于自己有吸引力的东西，对我来说，最常购买的东西就是图书，经常看到当当网、京东网、亚马逊有便宜的或者折扣的力收的时候就管不住自己的手，而有一些商家还经常用优惠来吸引人。结果导致了购买了许多的书，但是实际上看的书特别少。</p><p>所以在这里，自己定义了一个新的书单，用来记录自己实际读了什么、要读什么，再定一个计划，比如：阅读多少本已购书籍之后再购入新的书籍。</p><p>对于一些可能用又不可能不用，或者近一年都不会用的东西都扔掉，这样就可以让我们的家更整洁。等到一年后或许你发现你也不会用这个东西了。或者是再重新购入即可。</p><h3 id="思想断舍离"><a class="header-anchor" href="#思想断舍离"></a>思想断舍离</h3><p>除了我们的生活，对于我们的思想也应该 <strong>“断舍离”</strong> 。</p><p>当有了一个想法，如果一直想着，就会把时间和记忆固定在这里，而如果中途又遇到另外的事情，又特别容易将某些事情忘记，所以我们应该选择记下来，用实体的东西代替大脑，这样可以让我们思考更多的东西。</p><p>或者我们忽然读到了一篇好文章，但是现在不适合详读，我们可以在这个是时候把文章通过工具记录下来，等有时间了，再重新详读这篇文章。</p><p>比如在通勤的路上，会遇到一些比较好的文章，我会利用手机 app 将文章保存到 <strong>滴答</strong> 清单中，当有时间的时候，将好的文章再重新阅读一遍，或者重新学习一遍。</p><p>当然有时候，也会因为<sub>懒怠</sub>繁忙导致累积了许多内容没有读，最多的时候，滴答的待办清单中有500篇文章要读。</p><p>除了这些，还可以把自己心中的那些不满啊、忧愁啊都记下来，这样也可以有效的控制我们的感情，让自己更开心的生活。</p><p>这个主要用了两个东西，一个是电子版的笔记系统——Org Mode Journal系统，另外一个就是一个简单的横格本和一支笔就可以手工记录了，具体的可以看一些手帐相关的文章来学习如何简单清晰的记录生活。</p>]]></content>
      
      
      <categories>
          
          <category> 生活总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 减法生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 中三个常见的问题解决</title>
      <link href="/archives/53f313a5.html"/>
      <url>/archives/53f313a5.html</url>
      
        <content type="html"><![CDATA[<h2 id="重置-root-用户密码"><a class="header-anchor" href="#重置-root-用户密码"></a>重置 root 用户密码</h2><p>因为长时间未使用 MySql 导致忘记了 root 密码，现在将修改 root 用户密码的方法记录下来。</p><h3 id="修改配置"><a class="header-anchor" href="#修改配置"></a>修改配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/my.cnf</span><br></pre></td></tr></table></figure><p>在 <strong>[mysqld]</strong> 中添加 <code>skip-grant-tables</code></p><p>例如：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[mysqld]</span></span><br><span class="line"><span class="string">skip-grant-tables</span></span><br><span class="line"><span class="string">datadir=/var/lib/MySQL</span></span><br><span class="line"><span class="string">socket=/var/lib/mysql/mysql.sock</span></span><br></pre></td></tr></table></figure><h3 id="重启mysql"><a class="header-anchor" href="#重启mysql"></a>重启mysql</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysql restart</span><br></pre></td></tr></table></figure><h3 id="用户无密码登录"><a class="header-anchor" href="#用户无密码登录"></a>用户无密码登录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p (直接点击回车，密码为空)</span><br></pre></td></tr></table></figure><h3 id="选择数据库并修改密码"><a class="header-anchor" href="#选择数据库并修改密码"></a>选择数据库并修改密码</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> mysql;</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> authentication_string=<span class="keyword">password</span>(<span class="string">'123456'</span>) <span class="keyword">where</span> <span class="keyword">user</span>=<span class="string">'root'</span>;</span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure><h3 id="删除并重启-mysql-服务"><a class="header-anchor" href="#删除并重启-mysql-服务"></a>删除并重启 mysql 服务</h3><p>这个时候发现，确实可以用新的密码登录了， 但是操作的时候会提示：<br><code>ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement.</code> 。</p><p>这是因为少了一步修改导致，执行下面的命令进行修改：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> <span class="string">'root'</span>@<span class="string">'localhost'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'youpassword'</span>;</span><br></pre></td></tr></table></figure><p>执行的时候发现会提示一个新的报错： <code>ERROR 1819 (HY000): Your password does not satisfy the current policy requirements</code> ，经过搜索，发现是因为密码有要求导致，可以选择使用一个包含大小写字母、数字和符号的密码，也可以选择更新一个简单的密码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password_policy=<span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>这次密码的问题就彻底解决了。</p><h2 id="报错-10060"><a class="header-anchor" href="#报错-10060"></a>报错 10060</h2><p>除了可能是因为用户权限不足外，还有可能是服务器不允许请求 3306 端口，需要在服务器管理中，增加入站规则，允许 3306 端口即可。</p><p>具体的位置在：</p><p><strong>服务器管理 =&gt; 高级安全 Windows 防火墙 =&gt; 入站规则 =&gt; 新建规则 =&gt; 端口3306 =&gt; 允许连接</strong></p><h2 id="清理连接数"><a class="header-anchor" href="#清理连接数"></a>清理连接数</h2><p>在管理 MySQL 服务器的过程中，会出现连接时间过长的问题，分析之后发现主要是之前写的操作 MySQL 的程序未正常结束，导致资源占用过高。</p><p>这时可以使用以下的方案进行自理：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Threads%'</span>;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'%max_connections%'</span>;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Max_used_connections'</span>;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">status</span>;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">processlist</span>;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">OPEN</span> <span class="keyword">TABLES</span> <span class="keyword">where</span> In_use &gt; <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>这时可以找到真正占用数据库资源的进程，然后使用 <code>kill &lt;process id&gt;</code> 结束掉进程。</p>]]></content>
      
      
      <categories>
          
          <category> 后台技术 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 重置 root 密码 </tag>
            
            <tag> 报错 10060 </tag>
            
            <tag> 清理连接数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 查看端口占用情况</title>
      <link href="/archives/f8281811.html"/>
      <url>/archives/f8281811.html</url>
      
        <content type="html"><![CDATA[<p>Linux 查看启动的后台进程，可以使用下面两个命令。</p><h2 id="lsof"><a class="header-anchor" href="#lsof"></a>lsof</h2><p><code>lsof -i:&lt;port&gt;</code> 用来查看某一端口占用情况，可以查询到对应的 COMMAND PID USER TYPE。</p><h2 id="netstat"><a class="header-anchor" href="#netstat"></a>netstat</h2><p><code>netstat -tunlp | grep &lt;port&gt;</code> 用于查看指定的端口号的进程情况，可以查看端口的监听情况，最后一项则是对应的 COMMAND 和 PID。</p>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lsof </tag>
            
            <tag> netstat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 上传文件超出最大值</title>
      <link href="/archives/a2153400.html"/>
      <url>/archives/a2153400.html</url>
      
        <content type="html"><![CDATA[<p>昨天在上传打包的程序的时候，git 意外报错了，试了一下，并不是因为有冲突什么的，仔细看了一下报错：</p><img src="https://cdn.jsdelivr.net/gh/zucchiniy/blog-assets@master/images/git-rpc-error.png" class="" title="git-rpc-error"><p>发现是 OpenSSL 中报的错，确认了一下 error 发现是因为上传的文件过大导致的。需要将 <strong>postbuffer</strong> 调整一下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config http.postbuffer 523288000</span><br></pre></td></tr></table></figure><p>再上传一次，果然可以了。查询一下看看到底修改了什么</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/zucchiniy/blog-assets@master/images/git-http.png" class="" title="git-http"><p>确认是修改了对应的最大 <strong>post</strong> 的请求的值。</p>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> postbuffer </tag>
            
            <tag> hung up </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cmder 无法显示中文</title>
      <link href="/archives/d5d74de1.html"/>
      <url>/archives/d5d74de1.html</url>
      
        <content type="html"><![CDATA[<p>cmder 默认是不支持中文字符的，可以在 <strong>Setting &gt; Startup &gt; Environment</strong> 下增加一行语言设置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set LANG=zh_CN.UTF8</span><br></pre></td></tr></table></figure><p>然后重启 cmder 即可。</p>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cmder </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编写自己的 Hugo 主题</title>
      <link href="/archives/c6e7960e.html"/>
      <url>/archives/c6e7960e.html</url>
      
        <content type="html"><![CDATA[<h2 id="页面"><a class="header-anchor" href="#页面"></a>页面</h2><p>使用 <code>hugo new theme paladin</code> 直接创建一个新的主题，然后可以在当前博客中（已经完成了多篇文章，但是还想自己定义一个主题）或者在新主题中增加测试用的项目。</p><p>目前所实现的大概样式如下：</p><p><img src="https://cdn.jsdelivr.net/gh/zucchiniy/blog-assets@master/images/sn01.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/zucchiniy/blog-assets@master/images/sn02.png" alt=""></p><p>创建之后，在 <strong>themes</strong> 目录下可以看到整个项目结构:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">themes&#x2F;paladin</span><br><span class="line">├── LICENSE</span><br><span class="line">├── archetypes</span><br><span class="line">│   └── default.md</span><br><span class="line">├── layouts</span><br><span class="line">│   ├── 404.html</span><br><span class="line">│   ├── _default</span><br><span class="line">│   │   ├── baseof.html</span><br><span class="line">│   │   ├── list.html</span><br><span class="line">│   │   └── single.html</span><br><span class="line">│   ├── index.html</span><br><span class="line">│   └── partials</span><br><span class="line">│       ├── footer.html</span><br><span class="line">│       └── header.html</span><br><span class="line">├── readme.md</span><br><span class="line">├── static</span><br><span class="line">│   └── css</span><br><span class="line">│       └── stylesheet.css</span><br><span class="line">└── theme.toml</span><br><span class="line">6 directories, 12 files</span><br></pre></td></tr></table></figure><p>可以看到目录下有一些已经创建好的 <strong>html</strong> 目录，有几个需要编辑的，分别是 <strong>single.html</strong> ， <strong>index.html</strong> ， <strong>404.html</strong> ， <strong>footer.html</strong> 和 <strong>header.html</strong> 这几个文件。</p><h2 id="default"><a class="header-anchor" href="#default"></a>_default</h2><p>这里放的，是主要几个网站模板，用来提交一些默认的配置的。</p><ul><li>single.html</li></ul><p>这个是用来渲染生成的单页文章的，主要是 <strong>content/</strong> 下的内容，可以用来渲染页面的名称、作者、时间和文章的具体内容。</p><ul><li>list.html</li></ul><p>这个是用来渲染生成的列表页的，包括文章列表页或者是标签列表和分类列表页。</p><h3 id="partials"><a class="header-anchor" href="#partials"></a>partials</h3><p>这个目录下主要是放需要利用的代码片断，通过 <strong>partial</strong> 方法调用。</p><ul><li>header.html</li></ul><p>这里主要定义 <code>&lt;head&gt;</code> 标签和导航栏 <code>&lt;nav&gt;</code> 相关内容。</p><ul><li>footer.html</li></ul><p>这里定义了网页脚标位置的相关内容。</p><h2 id="实现"><a class="header-anchor" href="#实现"></a>实现</h2><p>主题参照了 <a href="https://github.com/GenkunAbe/hugo-theme-hiruko" target="_blank" rel="noopener">hugo-theme-hiruko</a> 的样式，去掉了一些用不到的功能。</p><p>主要使用了<a href="https://getbootstrap.com" target="_blank" rel="noopener">bootstrap4</a>，其中的一些图标来源自<a href="http://www.iconfont.cn" target="_blank" rel="noopener">阿里巴巴的矢量库</a>，用起来方便快捷。</p><p>当文章过多时，可以使用连续页面的样式，如果不想使用，可以用上一页下一页的方式。通过参数 <strong>paginateOriginalStyle</strong> 来控制，如果为 <strong>true</strong> 则是上一页下一页的样子，如果是 <strong>false</strong> 则如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/zucchiniy/blog-assets@master/images/sn03.png" alt=""></p><p>将社交链接和logo放到到 <strong>about.html</strong> 页面中，可以方便的看到作者的相关内容。</p><p><img src="https://cdn.jsdelivr.net/gh/zucchiniy/blog-assets@master/images/sn04.png" alt=""></p><p>如果想修改logo的话，需要修改主题目录下的 <strong>static/media/zlogo.png</strong> 文件即可。</p>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
          <category> hugo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hugo </tag>
            
            <tag> theme </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用 Python 爬取小说</title>
      <link href="/archives/6dd2e3ae.html"/>
      <url>/archives/6dd2e3ae.html</url>
      
        <content type="html"><![CDATA[<p>Python 爬取网络的内容是非常方便的，但是在使用之前，要有一些前端的知识，比如： HTML、 CSS、XPath 等知识，再会一点点 Python 的内容就可以了。</p><p>因为使用的是 Anaconda ，所以大多数的包都已经有了，但是在使用过程中也有一些小问题，但是最终程序是实现了的。</p><ul><li>BeautifulSoup 是一个可以从HTML或XML文件中提取数据的Python库。非常好用，具体的 <a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html" target="_blank" rel="noopener">文档可以从这里跳转</a> ，利用这篇文章可以让你轻松的进行网页的解析。可以把仅有的一点前端知识也略去了。</li><li>requests 适合正常人类使用的一个 HTTP 解析工具</li><li>time 让网站以为你不是电脑</li><li>sys 显示和刷新</li></ul><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># _*_ coding:UTF-8 _*_</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">download 《武动乾坤》 from www.biqukan.com</span></span><br><span class="line"><span class="string">Parameters:</span></span><br><span class="line"><span class="string">    None</span></span><br><span class="line"><span class="string">Returns:</span></span><br><span class="line"><span class="string">    None</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">downloader</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.server = <span class="string">"http://www.biqukan.com"</span></span><br><span class="line">        self.target = <span class="string">"http://www.biqukan.com/3_3012"</span></span><br><span class="line">        self.names = []</span><br><span class="line">        self.urls = []</span><br><span class="line">        self.nums = <span class="number">0</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    To get Urls for download</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_download_url</span><span class="params">(self)</span>:</span></span><br><span class="line">        req = requests.get(url=self.target)</span><br><span class="line">        html = req.text</span><br><span class="line">        div_bf = BeautifulSoup(html, <span class="string">"html.parser"</span>)</span><br><span class="line">        div = div_bf.find_all(<span class="string">"div"</span>, class_=<span class="string">"listmain"</span>)</span><br><span class="line">        a_bf = BeautifulSoup(str(div[<span class="number">0</span>]), <span class="string">"html.parser"</span>)</span><br><span class="line">        a = a_bf.find_all(<span class="string">"a"</span>)</span><br><span class="line">        self.nums = len(a[<span class="number">12</span>:])</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'武动乾坤目录.txt'</span>, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> each <span class="keyword">in</span> a[<span class="number">12</span>:]:</span><br><span class="line">                f.write(each.string)</span><br><span class="line">                self.names.append(each.string)</span><br><span class="line">                f.write(self.server + each.get(<span class="string">"href"</span>))</span><br><span class="line">                self.urls.append(self.server + each.get(<span class="string">"href"</span>))</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    To get content</span></span><br><span class="line"><span class="string">    Parameters:</span></span><br><span class="line"><span class="string">        target - 下载链接</span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        content - 章节内容</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_contents</span><span class="params">(self, target)</span>:</span></span><br><span class="line">        headers = requests.utils.default_headers()</span><br><span class="line">        headers[<span class="string">'User-Agent'</span>] = <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:61.0) Gecko/20100101 Firefox/61.0'</span></span><br><span class="line">        req = requests.get(url=target, headers=headers)</span><br><span class="line">        html = req.text</span><br><span class="line">        bf = BeautifulSoup(html, <span class="string">"html.parser"</span>)</span><br><span class="line">        texts = bf.find_all(<span class="string">"div"</span>, class_=<span class="string">"showtxt"</span>)</span><br><span class="line">        content = texts[<span class="number">0</span>].text.replace(<span class="string">'\xa0'</span> * <span class="number">8</span>, <span class="string">'\n\n'</span>)</span><br><span class="line">        <span class="keyword">return</span> content</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    To save to text</span></span><br><span class="line"><span class="string">    Parameters:</span></span><br><span class="line"><span class="string">        name - 章节名称</span></span><br><span class="line"><span class="string">        path - 当前路径 + 小说名</span></span><br><span class="line"><span class="string">        text - 章节内容</span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        None</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">writer</span><span class="params">(self, name, path, text)</span>:</span></span><br><span class="line">       <span class="comment"># writer_flag = True</span></span><br><span class="line">        <span class="keyword">with</span> open(path, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(name + <span class="string">'\n'</span>)</span><br><span class="line">            f.writelines(text)</span><br><span class="line">            f.write(<span class="string">'\n\n'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    dl = downloader()</span><br><span class="line">    dl.get_download_url()</span><br><span class="line">    print(<span class="string">"第"</span>, dl.nums, <span class="string">"章"</span>)</span><br><span class="line">    print(<span class="string">"开始下载:"</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(dl.nums):</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        dl.writer(dl.names[i], <span class="string">'武动乾坤.txt'</span>, dl.get_contents(dl.urls[i]))</span><br><span class="line">        sys.stdout.write(<span class="string">"  已下载:%.3f%%"</span> % float(i/dl.nums*<span class="number">100</span>) + <span class="string">'\r'</span>)</span><br><span class="line">        sys.stdout.flush()</span><br><span class="line">    print(<span class="string">"下载完成"</span>)</span><br></pre></td></tr></table></figure><p>几个小点需要注意：</p><ol><li>不能访问的过快，所以在循环中进行一次等待，我这里用的是 <code>time.sleep(1)</code></li><li>为了不被反爬虫识别为爬虫，需要在访问的时候，增加一个 <strong>header</strong> ，利用 <code>headers = requests.utils.default_headers()</code> 和 <code>headers['User-Agent'] = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:61.0) Gecko/20100101 Firefox/61.0'</code> 两行，就可以不被识别了</li><li>解析的时候，出现了一个问题，就是一开始从目录页获取的时候，只能读取 193 篇文章，经过排查，发现是在使用 BeautifulSoup 的时候解析的有点问题，将原本的 <code>&quot;lxml&quot;</code> 方式修改为<code>&quot;html.parser&quot;</code> 方式就可以了</li></ol><p>不过因为这本小说字数真的有点多，所以下载过程有点慢，不过整体来说还是可以使用的。</p>]]></content>
      
      
      <categories>
          
          <category> 后台技术 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> beautifusoup </tag>
            
            <tag> 下载小说 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>select into 和 insert int select</title>
      <link href="/archives/f2aac1ad.html"/>
      <url>/archives/f2aac1ad.html</url>
      
        <content type="html"><![CDATA[<h2 id="远程连接-MySQL"><a class="header-anchor" href="#远程连接-MySQL"></a>远程连接 MySQL</h2><ol><li><code>mysql -h &lt;ip&gt; -P 3306 -u root -p</code> 然后输入密码即可连接</li><li><code>mysql -u &lt;user&gt; -p -h &lt;ip&gt;</code> 然后输入密码即可连接</li></ol><h2 id="SELECT-INTO"><a class="header-anchor" href="#SELECT-INTO"></a>SELECT INTO</h2><p><code>SELECT INTO</code> 语句从一个表复制数据，然后把数据插入到另一个表中。</p><blockquote><p>MySQL 是不支持 <code>select ... into</code> ，但是可以使用 <code>insert into ... select</code>，当然也可以使用 <code>create table &lt;new table&gt; select * from &lt;old tabel&gt;</code></p></blockquote><p>可以复制所有的列插入到新表中:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">into</span> newtable [<span class="keyword">in</span> externaldb]</span><br><span class="line"><span class="keyword">from</span> <span class="keyword">table</span></span><br></pre></td></tr></table></figure><p>或者复制希望的列到新表中:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> column_name(s)</span><br><span class="line"><span class="keyword">into</span> newtable [<span class="keyword">in</span> externaldb]</span><br><span class="line"><span class="keyword">from</span> <span class="keyword">table</span>;</span><br></pre></td></tr></table></figure><h2 id="INSERT-INTO-SELECT"><a class="header-anchor" href="#INSERT-INTO-SELECT"></a>INSERT INTO SELECT</h2><p>这个命令可以从一个表复制到另一个表。这个表之前的数据对最后的结果不会有影响。</p><p>同 <code>select ... into</code> 一样，可以所有列也可以指定列。</p><p>所有数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> table2</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> table1;</span><br></pre></td></tr></table></figure><p>指定列：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> table2</span><br><span class="line">(solumn_name(s))</span><br><span class="line"><span class="keyword">select</span> column_name(s)</span><br><span class="line"><span class="keyword">from</span> table1;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后台技术 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> select into </tag>
            
            <tag> insert into select </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>apt-get 中 update 与 upgrade 的区别</title>
      <link href="/archives/b38b9bda.html"/>
      <url>/archives/b38b9bda.html</url>
      
        <content type="html"><![CDATA[<p><code>update</code> : 更新 <strong>/etc/apt/sources.list</strong> 和 <strong>/etc/apt/sources.list.d</strong> 中列出的源的地址,这样才能获取到最新的软件包。<br><code>upgrade</code> : 升级已安装的所有软件包，升级之后的版本就是本地地址里的，因此，在执行 <strong>upgrade</strong> 之前一定要执行 <strong>update</strong> , 这样才能更新到最新的。</p>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> apt-get </tag>
            
            <tag> apt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Layui 表格</title>
      <link href="/archives/91a72e5d.html"/>
      <url>/archives/91a72e5d.html</url>
      
        <content type="html"><![CDATA[<p><strong>Layui</strong> 分页是由 <strong>laypage</strong> 实现的，所以既需要分页 <strong>laypage</strong> 还需要数据表格相关的内容。</p><h2 id="数据表格设置"><a class="header-anchor" href="#数据表格设置"></a>数据表格设置</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">table.render(&#123;</span><br><span class="line">    page: <span class="literal">true</span></span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这样就可以进行分页了，但是如果想要修改分页的样式，可以按下面的方式进行修改：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">table.render(&#123;</span><br><span class="line">    page: &#123;</span><br><span class="line">        layout: [<span class="string">'limit'</span>,<span class="string">'count'</span>,<span class="string">'prev'</span>,<span class="string">'page'</span>,<span class="string">'next'</span>,<span class="string">'skip'</span>] <span class="comment">// 分页布局</span></span><br><span class="line">        ,<span class="attr">groups</span>: <span class="number">1</span> <span class="comment">// 只显示1个连续页码</span></span><br><span class="line">        ,<span class="attr">first</span>: <span class="literal">false</span> <span class="comment">// 不显示首页</span></span><br><span class="line">        ,<span class="attr">last</span>: <span class="literal">false</span> <span class="comment">// 不显示尾页</span></span><br><span class="line">        ,<span class="attr">theme</span>: <span class="string">'#c00'</span> <span class="comment">// 可以传入颜色或者任意普通字符</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>其中 <em>layout</em> 中支持数据有：</p><ol><li><em>count</em> 总条目输区域</li><li><em>prev</em> 上一页区域</li><li><em>page</em> 分页区域</li><li><em>next</em> 下一页区域</li><li><em>limit</em> 条目选项区域</li><li><em>refresh</em> 页面刷新区域</li><li><em>skip</em> 快捷跳页区域</li></ol><h2 id="实现复选框"><a class="header-anchor" href="#实现复选框"></a><sub>实现复选框</sub></h2><p>在后来的版本，已经提供了复选框功能了。</p><h2 id="实现"><a class="header-anchor" href="#实现"></a>实现</h2><p>首先要在 <strong>templet</strong> 加上行号数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/html"</span> <span class="attr">id</span>=<span class="string">"test_id"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">“checkbox”</span> <span class="attr">title</span>=<span class="string">“testbox”</span> <span class="attr">id</span>=<span class="string">“id</span></span></span><span class="template-variable">&#123;&#123;d.LAY_TABLE_INDEX&#125;&#125;</span><span class="xml"><span class="tag">”&gt;</span></span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在 <strong>table</strong> 的表头中增加对应的内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">table.render(&#123;</span><br><span class="line">    cols: [[ <span class="comment">//表头</span></span><br><span class="line">        field: <span class="string">'test'</span></span><br><span class="line">        ,<span class="attr">title</span>: <span class="string">'test'</span></span><br><span class="line">        ,<span class="attr">templet</span>: <span class="string">'#test_id'</span></span><br><span class="line">    ]]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>然后对数据进行赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = res.data;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> item <span class="keyword">in</span> data)&#123;</span><br><span class="line">    $(‘#testbox’ + data[item].LAY_TABLE_INDEX).attr(‘checked’, ‘checked’);</span><br><span class="line">&#125;</span><br><span class="line">form.render();</span><br></pre></td></tr></table></figure><p>这主要是因为 <strong>table</strong> 中默认有一个数值，叫 <strong>LAY_TABLE_INDEX</strong> 是用来做为返回的组数据的行号，这里使用这个参数对每一行进行操作，就可以了。</p>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> layui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Eclipse 项目层次结构设置</title>
      <link href="/archives/8562600d.html"/>
      <url>/archives/8562600d.html</url>
      
        <content type="html"><![CDATA[<p><strong>Eclipse</strong> 中新建工程或者是导入一个工程，包层次默认为 <strong>Flat</strong> ，也就是完成名称，但是这种显示会让包结构非常复杂，而且非常不好找，一般我是将其配置为 <strong>Hierarchical</strong> 即分层次的。</p><p>路径在 <strong>Windows-&gt;Navigation-&gt;Show View Menu-&gt;Package Presentation-&gt;Hierarchical</strong> 下，调整后，包会按文件夹样式一层层显示。</p><p>当然，也可以使用快捷键 <code>Ctrl + F10</code> 打开，将 <strong>Package Presentation</strong> 调整为 <strong>Hierarchical</strong> 即可。</p>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Eclispe </category>
          
      </categories>
      
      
        <tags>
            
            <tag> presentation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>in 和 exists 的不同</title>
      <link href="/archives/4a975a81.html"/>
      <url>/archives/4a975a81.html</url>
      
        <content type="html"><![CDATA[<h2 id="in-OR-exists"><a class="header-anchor" href="#in-OR-exists"></a>in OR exists</h2><p>in 是把外表和内表做 <strong>hash</strong> 连接，而 exists 是对外表作 <strong>loop</strong> 循环，每次 <strong>loop</strong> 循环再对内表进行查询。</p><p>简单的认为 exists 比 in 的效率高的说法是不准确的。</p><p>如果两个表大小相当，则 in 和 exists 的效率是差不多的，如果两个表的一大一小，则子查询表大的用 exists，子查询表小的用 in。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> a <span class="keyword">where</span> <span class="keyword">id</span> <span class="keyword">in</span>(<span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">where</span> b);</span><br></pre></td></tr></table></figure><p>即我们可以理解， in 实际上是做了两个循环：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt; a.length;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; b.length;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i].id == b[j].id)&#123;</span><br><span class="line">            <span class="keyword">return</span> a[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>所以极限点是 <strong>a.length * b.length</strong> 。</p><p>同理，可以把 exists 理解为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; a.length;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">exists</span>(a[i].id))&#123;</span><br><span class="line">        <span class="keyword">return</span> a[i];</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>这里需要说明的是： <code>exists(a[i].id)</code> 的过程，实际上是去数据库中查询 b 表的过程。</p><p>所以在看这两种查询的时候，如果 a 表有10000条记录，b表有100条记录，则 in 需要遍历 10000 * 100 次，但是如果 b 表有 10000000 条记录，则 in 需要 10000 * 10000000 次。同样的数据，如果是使用 exists 的话，则是需要做一个 10000 次数据库查询，所以 <strong>子查询的表较大时，最好使用 exits 去做查询</strong>。但是如果两个表差不多大，或者子查询的表较小的时候，就可以选择 in 做查询了。</p><h2 id="not-in-OR-not-exists"><a class="header-anchor" href="#not-in-OR-not-exists"></a>not in OR not exists</h2><p>not in 和 not exists 两个的选择就比较简单了，就是仅使用 not exists 即可。其原因主要有两个：</p><h3 id="not-in-会出现-BUG"><a class="header-anchor" href="#not-in-会出现-BUG"></a>not in 会出现 BUG</h3><p>表t1</p><table><thead><tr><th>c1</th><th>c2</th></tr></thead><tbody><tr><td>1</td><td>2</td></tr><tr><td>1</td><td>3</td></tr></tbody></table><p>表t2</p><table><thead><tr><th>c1</th><th>c2</th></tr></thead><tbody><tr><td>1</td><td>2</td></tr><tr><td>1</td><td></td></tr></tbody></table><p>先执行 <code>not in</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t1 <span class="keyword">where</span> t2 <span class="keyword">not</span> <span class="keyword">in</span>(<span class="keyword">select</span> c2 <span class="keyword">from</span> t2);</span><br></pre></td></tr></table></figure><p>这个时候，我们可以看到，先查询出 t2.c2 的值(2,null), 也就是，我们把这个语句变成了 <code>select * from t1 where t2 &lt;&gt; 2 and t2 &lt;&gt; null</code> 。</p><p>这是为什么呢？</p><p>这主要是因为 null 是无法进行 /操作/ 的，也就是 null 的几个原则：</p><ol><li>如果 null 参与算术运算，则该算术表达式的值为 null 。</li><li>如果 null 参与比较运算，则结果可视为 false 。</li><li>如果 null 参与聚集运算，则聚集函数都置为 null 。除 count(*) 之外。</li></ol><p>这个时候，我们可以看到，查询回来的结果是空，但是这并不是我们想看到的。这时我们来测试一下 <code>not exists</code> 方法。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t1 <span class="keyword">where</span> <span class="keyword">not</span> <span class="keyword">exists</span>(<span class="keyword">select</span> c2 <span class="keyword">from</span> t2 <span class="keyword">where</span> t2.c2 = t1.c2);</span><br></pre></td></tr></table></figure><p>得到的结果是</p><table><thead><tr><th>c1</th><th>c2</th></tr></thead><tbody><tr><td>1</td><td>3</td></tr></tbody></table><p>OK，这就是我们想要的结果。</p><h3 id="not-in-比-not-exists-慢"><a class="header-anchor" href="#not-in-比-not-exists-慢"></a>not in 比 not exists 慢</h3><p>如果查询语句使用了 <code>not in</code> 那么内外表都进行全表扫描，没有用到索引；而 <code>not extsts</code> 的子查询依然能用到表上的索引。所以无论那个表大，用 <code>not exists</code> 都比 <code>not in</code> 要快。</p><p>所以，我们在选择的时候，不要使用 <code>not in</code> 而是需要将这些语句用 <code>not exists</code> 来替换。</p>]]></content>
      
      
      <categories>
          
          <category> 后台技术 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> exists </tag>
            
            <tag> in </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用 Travis 自动部署博客</title>
      <link href="/archives/696d7205.html"/>
      <url>/archives/696d7205.html</url>
      
        <content type="html"><![CDATA[<p><strong>Travis CI</strong> 是一个非常好用持续集成工具。</p><p><strong>集成</strong> 主要是用来将多个用户的开发模块构建成一个可运行版本；而 <strong>持续集成</strong> 则是在集成之上，尽量将每一次提交都进行一次构建，这个个过程就是 <strong>持续集成</strong> 。</p><h2 id="Travis-自动构建"><a class="header-anchor" href="#Travis-自动构建"></a>Travis 自动构建</h2><p><strong>Travis Ci</strong> 的自动构建周期分为两步：</p><ol><li>install</li><li>Script</li></ol><p>但是我们可以根据这两步将相关的内容分成更细的步骤：</p><ol><li>before_install</li><li>install</li><li>befor_script</li><li>script</li><li>after_success 或者 after_failure</li><li>before_deploy</li><li>deploy</li><li>after_deploy</li><li>after_script</li></ol><p><strong>持续集成就是把一系列的手工操作合并成一个脚本的过程。</strong></p><p>所以可以这样实现部署脚本:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">sudo: false</span><br><span class="line">language: go</span><br><span class="line">os: osx</span><br><span class="line">install:</span><br><span class="line">  brew install hugo</span><br><span class="line"></span><br><span class="line">script:</span><br><span class="line">  - hugo --config jane-config.toml</span><br><span class="line"></span><br><span class="line">branches:</span><br><span class="line">  only:</span><br><span class="line">    - source</span><br><span class="line">after_success:</span><br><span class="line">    - git add -A</span><br><span class="line">    - git commit -m "update blog"</span><br><span class="line">    - git push -u origin master</span><br></pre></td></tr></table></figure><p>这个脚本中，我们主要工作是生成 <strong>hugo</strong> 博客这一步，如果成功了，我们就进行提交，也就完成了。</p><h2 id="Travis-GitHub-Pages"><a class="header-anchor" href="#Travis-GitHub-Pages"></a>Travis GitHub Pages</h2><p>经过查阅之后，发现 <strong>Travis Ci</strong> 本身就支持直接部署到 <strong>GitHub Pages</strong> 上，并拥有单独的章节。</p><h3 id="个人令牌"><a class="header-anchor" href="#个人令牌"></a>个人令牌</h3><p>在 <strong>GitHub</strong> 中的 <strong>Setting</strong> 下的 <strong>Developer settings</strong> 中，有一个 <strong>Personal access tokens</strong> 中，可以生成，然后配置到 <strong>Travis Ci</strong> 对应的 <strong>My Repositories</strong> 中的项目中，一般的话，使用 <strong>public_repo</strong> 权限就足够了。</p><p>如果在 <strong>My Repositories</strong> 中看不到 <strong>Settings</strong> ，可以在 <strong>More options</strong> 中找到 <strong>Settings</strong> 然后在 <strong>Environment Variables</strong> 中配置对应的令牌即可。</p><h3 id="个人配置"><a class="header-anchor" href="#个人配置"></a>个人配置</h3><p>在项目中新增 <strong>.travis.yml</strong> ，内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  provider: pages</span><br><span class="line">  skip-cleanup: true</span><br><span class="line">  github-token: $GITHUB_TOKEN</span><br><span class="line"><span class="meta">  #</span><span class="bash"> Set <span class="keyword">in</span> the settings page of your repository, as a secure variable</span></span><br><span class="line">  keep-history: true</span><br><span class="line">  on:</span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure><p>GitHub Pages 默认的一些参数：</p><ul><li>local-dir: 推送到 <strong>GitHub Pages</strong> 的目录，当前路径的相对路径，默认为当前路径</li><li>repo: 项目仓库的地址，默认为当前项目</li><li>keep-history: 可选参数，使用递增的推送信息代替强制推送，默认为 <strong>false</strong></li><li>target-branch: 将 <strong>local-dir</strong> 内容推送的分支，默认为 <strong>gh-pages</strong> ，如果 <strong>keep-history</strong> 为 <strong>true</strong> ，则强制推送 <code>git push -f</code></li><li>fqdn: 可选参数，设置用户的自定义域名，默认为无自定义域名</li><li>project-name: 默认为 <strong>fqdn</strong> 的值或者是仓库的固定路径，用于元数据</li><li>email: 可选参数，提交人信息，默认为 <strong><a href="mailto:deploy@travis-ci.org">deploy@travis-ci.org</a></strong></li><li>name: 可选参数，提交人，默认为 <strong>Deployment Bot</strong></li><li>committer-from-gh: 可选参数，默认为 <strong>false</strong> ，允许令牌拥有者使用，会覆盖掉 <strong>email</strong> 和 <strong>name</strong> 两个的值</li><li>allow-empty-commit: 可选参数，默认为 <strong>false</strong> ，仅在 <strong>keep-history</strong> 参数为 <strong>true</strong> 时启用</li><li>github-url: 可选参数，默认为 <strong><a href="http://github.com" target="_blank" rel="noopener">github.com</a></strong> ，是企业级自托管 <strong>GitHub</strong> 项目的 <strong>URL</strong> 地址</li><li>verbose: 可选参数，冗余的内部步骤，默认为 <strong>false</strong></li></ul><p>备注：</p><ol><li>默认情况下，travis 会自动执行 <code>git submodule init</code> ，但是需要使用 <strong>https</strong> 的路径，否则需要配置 <strong>ssh key</strong> ，而 GITHUB_TOKEN 要保证和 travis 设置的变量一致，名称和值都要一致</li><li>fqdn 如果需要设置自定义域名，可以设置这个参数，travis 会自动生成 <strong>CNAME</strong> 文件提交，同时要设置 <strong>config.toml</strong> 中的相应的 <strong>baseURL</strong></li><li><code>branches: only: source</code> 等价于 <code>deploy: on: branch: source</code></li></ol><h3 id="Environment-Variables"><a class="header-anchor" href="#Environment-Variables"></a>Environment Variables</h3><p>除了令牌之后，我们也可以将 <strong>name</strong> 、 <strong>email</strong> 等相关信息配置到这里，比如推送的分支，可以设置为 <strong>P_BRANCH</strong> 然后在推送的时候，使用 <strong>${P_BRANCH}</strong> 来引用。</p>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> travis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hugo </tag>
            
            <tag> travis </tag>
            
            <tag> 自动部署博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新增 MySQL 用户</title>
      <link href="/archives/5688b61f.html"/>
      <url>/archives/5688b61f.html</url>
      
        <content type="html"><![CDATA[<ul><li>创建本地用户</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">'test'</span>@<span class="string">'localhost'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'password'</span>;</span><br></pre></td></tr></table></figure><ul><li>创建局域网用户</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">'test'</span>@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'password'</span>;</span><br></pre></td></tr></table></figure><ul><li>刷新</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure><ul><li>修改密码</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">password</span> <span class="keyword">for</span> <span class="string">'test'</span>@<span class="string">'localhost'</span> = <span class="keyword">password</span>(<span class="string">'newpassword'</span>);</span><br></pre></td></tr></table></figure><p>如果是当前用户：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">PASSWORD</span> = <span class="keyword">PASSWORD</span>(<span class="string">"newpassword"</span>);</span><br></pre></td></tr></table></figure><ul><li>授权</li></ul><p>授权相关操作见: </p><p>这里补充一下 MySql 移除权限的命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">REVOKE</span> privilege <span class="keyword">ON</span> databasename.tablename <span class="keyword">FROM</span> <span class="string">'username'</span>@<span class="string">'localhost'</span>;</span><br></pre></td></tr></table></figure><ul><li>删除用户</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> <span class="string">'username'</span>@<span class="string">'localhost'</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后台技术 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> create user </tag>
            
            <tag> set password </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git submodule 管理子项目</title>
      <link href="/archives/df4b5a39.html"/>
      <url>/archives/df4b5a39.html</url>
      
        <content type="html"><![CDATA[<h2 id="使用场景"><a class="header-anchor" href="#使用场景"></a>使用场景</h2><p>拆分项目，当项目越来越大之后，我们希望 <strong>子模块</strong> 可以单独管理，并由 <strong>专门</strong> 的人去维护，这个时候只可以使用 <code>git submodule</code> 去完成。</p><h2 id="常用命令"><a class="header-anchor" href="#常用命令"></a>常用命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git clone &lt;repository&gt; --recursive # 递归方式克隆整个项目</span><br><span class="line">git submodule add &lt;repository&gt; path # 添加子模块</span><br><span class="line">git submodule init # 初始化子模块</span><br><span class="line">git submodule update # 更新子模块</span><br><span class="line">git submodule foreach git pull # 拉取所有子模块</span><br></pre></td></tr></table></figure><h2 id="使用方式"><a class="header-anchor" href="#使用方式"></a>使用方式</h2><h3 id="添加子模块"><a class="header-anchor" href="#添加子模块"></a>添加子模块</h3><p><code>git submodule add &lt;repository&gt; path</code> 即可添加</p><h3 id="克隆子模块"><a class="header-anchor" href="#克隆子模块"></a>克隆子模块</h3><p><code>git clone &lt;repository&gt; --recursive</code> 直接递归克隆，如果是克隆父项目，可以在克隆完成之后，使用 <code>git submodule init</code> 初始化子项目列表和 <code>git submodule update</code> 更新最新的子项目。</p><h3 id="更新子模块"><a class="header-anchor" href="#更新子模块"></a>更新子模块</h3><p>如果子模块和新的修改，但是父项目没有更新到最新，则可以使用 <code>git submodule foreach git pull</code> 将所有的子项目中更新，如果子项目比 <strong>.gitmodules</strong> 新，则需要更新一下 <strong>.gitmodules</strong> 。</p><p>父项目中的子模块的版本是由 <strong>commit id</strong> 标识的，所以需要更新 <strong>.gitmodules</strong> 。</p><h3 id="删除子模块"><a class="header-anchor" href="#删除子模块"></a>删除子模块</h3><p>首先需要 <code>git rm --cached &lt;path&gt;</code> ，然后依次删除对应的目录、<strong>.gitmodules</strong> 文件中的记录、 <strong>.git/cofig</strong> 中的记录。再提交到远程服务器，就可以删除了。</p><p>注意：</p><blockquote><p>在执行 <code>git rm --cached &lt;path&gt;</code> 的时候，最后不可以有 <strong>/</strong> 。</p></blockquote><h3 id="修改子模块配置信息"><a class="header-anchor" href="#修改子模块配置信息"></a>修改子模块配置信息</h3><p>与删除相同，需要同时修改 <strong>.gitmodules</strong> 和 <strong>.git/config</strong> 两个文件中的 <strong>URL</strong> 值，然后执行 <code>git submodule sync</code> 来同步，然后再提交到远程即可。</p>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> submodule </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iframe 滚动条</title>
      <link href="/archives/1c5bba53.html"/>
      <url>/archives/1c5bba53.html</url>
      
        <content type="html"><![CDATA[<h2 id="滚动条重复"><a class="header-anchor" href="#滚动条重复"></a>滚动条重复</h2><p>在调用框架或者多级 <strong>iframe</strong> 的时候，经常会出现多个滚动条或者左右都有的情况，需要我们进行调整，现就设置方法记录如下。</p><h2 id="去掉全部滚动条"><a class="header-anchor" href="#去掉全部滚动条"></a>去掉全部滚动条</h2><h3 id="设置scrolling属性"><a class="header-anchor" href="#设置scrolling属性"></a>设置scrolling属性</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scrolling: auto <span class="comment">// 在需要的时候显示滚动条</span></span><br><span class="line">scrolling: yes <span class="comment">// 始终显示滚动条</span></span><br><span class="line">scrolling: no <span class="comment">//始终隐藏滚动条</span></span><br></pre></td></tr></table></figure><h3 id="设置-body"><a class="header-anchor" href="#设置-body"></a>设置 body</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;<span class="attribute">overflow</span>: hidden&#125;</span><br></pre></td></tr></table></figure><p>可以去看滚动条，也可以用来去看某一个滚动条时的方案。</p><h2 id="有选择的去掉滚动条"><a class="header-anchor" href="#有选择的去掉滚动条"></a>有选择的去掉滚动条</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;<span class="attribute">overflow-x</span>: auto; <span class="attribute">overflow-y</span>: hidden;&#125; <span class="comment">/* 去看右边的滚动条，保留下面的 */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;<span class="attribute">overflow-x</span>: hidden; <span class="attribute">overflow-y</span>: auto;&#125; <span class="comment">/* 去掉底下的滚动条，保留右边 */</span></span><br></pre></td></tr></table></figure><h2 id="代码优先级"><a class="header-anchor" href="#代码优先级"></a>代码优先级</h2><p>如果 <code>scrolling: auto</code> 或者 <code>scrolling:yes</code> 会依据 <strong>body</strong> 的值显示或者隐藏；如果 <code>scrolling:no</code> 无论什么设置都不会再显示滚动条。</p>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> 滚动条 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax 关闭异步请求</title>
      <link href="/archives/a97db946.html"/>
      <url>/archives/a97db946.html</url>
      
        <content type="html"><![CDATA[<p>在代码中，因为进行了后台的取值操作，导致有些内容还未加载就执行到了新的地方，所以想着 ajax 的异步关闭来解决。</p><p><code>async</code> 设置为 <code>false</code> 的时候，变成同步操作，默认( <code>true</code> )为异步操作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    cache: <span class="literal">false</span>,</span><br><span class="line">    <span class="keyword">async</span>: <span class="literal">false</span>,   <span class="comment">// 太关键了，学习了，同步和异步的参数</span></span><br><span class="line">&#125;);</span><br><span class="line">alert(<span class="string">"2"</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
          <category> ajax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> async </tag>
            
            <tag> 异步请求 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 包含某个字符串</title>
      <link href="/archives/a64e3e79.html"/>
      <url>/archives/a64e3e79.html</url>
      
        <content type="html"><![CDATA[<p>JavaScript 判断子串方法。</p><h2 id="String-对象方法"><a class="header-anchor" href="#String-对象方法"></a>String 对象方法</h2><ul><li><p><code>indexOf()</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"123"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">"3"</span>) != <span class="number">-1</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(str.search(<span class="string">"3"</span>) != <span class="number">-1</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg));<span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p>方法返回指定字符串首次出现的位置，如果未找到，则返回 <strong>-1</strong> 。</p></li><li><p>方法用来检索字符串中指定的子串，或检索与正则表达式相配置的字符串，如果未找到配置，则返回 <strong>-1</strong> 。</p></li><li><p>方法可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。</p></li></ul><h2 id="RegExp-对象方法"><a class="header-anchor" href="#RegExp-对象方法"></a>RegExp 对象方法</h2><h3 id="创建正则对象"><a class="header-anchor" href="#创建正则对象"></a>创建正则对象</h3><p><code>new RegExp(pattern, attributes);</code></p><ul><li><strong>pattern</strong> 是一个字符串，指定了正则表达式的模式，或者其它正则。</li><li><strong>attributes</strong> 是一个可选的字符串，包含 <strong>g</strong> 、 <strong>i</strong> 、 <strong>m</strong> 。分别是全局匹配，区分大小写和多行匹配。</li></ul><p>正则匹配相关内容见<a href="/archives/a3183791.html" title="通配符与正则">通配符与正则</a>。</p><h3 id="使用正则方法查找"><a class="header-anchor" href="#使用正则方法查找"></a>使用正则方法查找</h3><ul><li><p><code>test()</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"1123"</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="built_in">RegExp</span>(<span class="regexp">/3/</span>);</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str)); <span class="comment">// null 数组</span></span><br></pre></td></tr></table></figure></li><li><p><code>test()</code> 方法用于检索字符串指定的值。返回 <strong>true</strong> 或者 <strong>false</strong> 。</p></li><li><p><code>exec()</code> 用于检索字符串中正则匹配，返回一个数组，其中存放匹配的结果，如果未找到，则返回 <strong>null</strong> 。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> substring </tag>
            
            <tag> indexOf </tag>
            
            <tag> RegExp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>grep 命令</title>
      <link href="/archives/a85b713d.html"/>
      <url>/archives/a85b713d.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a class="header-anchor" href="#简介"></a>简介</h2><p><code>grep</code> 是一个强大的文本搜索工具，支持正则表达式搜索文本并把匹配的行打印出来。</p><h2 id="常规用法"><a class="header-anchor" href="#常规用法"></a>常规用法</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep [-acinv] [--color=auto] 'string to search' filename</span><br></pre></td></tr></table></figure><p><code>-a</code> : 将二进制文件以 <code>text</code> 文件的方式搜索数据</p><p><code>-c</code> : 计算找到的字符串的次数</p><p><code>-i</code> : 忽略大小写的不同</p><p><code>-n</code> : 输出行号</p><p><code>-v</code> : 反向选择，即输出没有 「字符串」 的内容</p><p><code>--color=auto</code> : 将找到的关键词部分加上颜色</p><h2 id="示例"><a class="header-anchor" href="#示例"></a>示例</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 搜索 root</span></span><br><span class="line">grep root temp.txt</span><br><span class="line">cat temp.txt | grep root </span><br><span class="line"><span class="meta">#</span><span class="bash"> 搜索 root 同时显示 这些行的行号</span></span><br><span class="line">grep -n root temp.txt</span><br><span class="line"><span class="meta">#</span><span class="bash"> 搜索没有 root 的行</span></span><br><span class="line">grep -v root temp.txt </span><br><span class="line"><span class="meta">#</span><span class="bash"> 搜索没有 root 和 nologin 的行 </span></span><br><span class="line">grep -v root temp.txt | grep -v nologin</span><br><span class="line"><span class="meta">#</span><span class="bash"> 搜索 root 并显示出行号和前两行与后三行 </span></span><br><span class="line">grep -n -A3 -B2 --color=auto 'root'</span><br></pre></td></tr></table></figure><h3 id="递归查找目录"><a class="header-anchor" href="#递归查找目录"></a>递归查找目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grep 'title' # 在当前目录搜索</span><br><span class="line">grep -r 'title' # 在当前目录及其子目录搜索</span><br><span class="line">grep -r -l 'title' # 在当前目录及其子目录下搜索但不输入匹配的行，只显示文件</span><br></pre></td></tr></table></figure><h2 id="grep-与正则表达式"><a class="header-anchor" href="#grep-与正则表达式"></a>grep 与正则表达式</h2><p><code>grep -n 't[ea]st' temp.txt'</code> : 匹配 <code>test</code> 和 <code>tast</code> 两个单词的行。<br><code>grep -n '[^g]oo' temp.txt</code> : 匹配含有 <code>oo</code> 的行，便是不能是 <code>goo</code> 内容。</p><p>更多内容见 <a href="/archives/a3183791.html" title="通配符与正则">通配符与正则</a> 。</p>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> grep </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>形意拳的学与练</title>
      <link href="/archives/2498c534.html"/>
      <url>/archives/2498c534.html</url>
      
        <content type="html"><![CDATA[<ul><li>劈拳手的一探一回，犹如人的一呼一吸。</li><li>炮拳以下扎的拳形来上挑。打炮拳时，后手不直线出击，而斜着撇出去。</li><li>横拳的练法，是斜着进一小步，横着退一大步，横拳等于是倒着打的。</li><li>钻拳是进一大步退一小步，横拳是进一小步退一大步。钻拳犹如螃蟹，是横着走的，左向一掌跟一拳，右向一掌跟一拳。</li><li>横拳是无形的，而有形的横拳就是蛇行，一横身子。就有了兜、裹、丢、顶。</li></ul><h2 id="站桩"><a class="header-anchor" href="#站桩"></a>站桩</h2><p>站桩的要点是 “学虫子”，冬天虫子钻进地里死了一般，等到春季，土里物理机一起，虫子就又活了。站桩就是站得这份物理机，如虫子复苏般的萌动，身上就有了精力。站桩有无穷益处，这就是练功。</p><p>其它打拳也是练功。形意拳要 <strong>『练精化气，练气化神，练神还虚』</strong> 。气不是呼吸的气，是所谓的生机勃勃。至于呼吸的气，叫作“息”，劈拳就是练息。</p><p>腿功是站桩站出来的，也是走出来的，唐维禄的徒弟尤其要走。早晨起来一走便是十里，两手背后，活动着脊椎，或带着点拳意。</p><p>站桩与打拳最关键的要点是一个，对这个要点没体会，练拳不出功夫，站桩也照样不出功夫。这就是 <strong>『桩法能融入拳法中，拳法能融入桩法中』</strong> 的道理。</p><p><strong>练武其实是在练心智。</strong></p><p><strong>唐师所传的桩功，有一个要点，时常浑身抖一抖。</strong> 传说狗熊冬眠的时候，每隔几天，它就自发的浑身颤抖，否则僵滞不动，身体要有问题。同样，站桩为什么站不下去？就是缺这一rufh.tve细致很轻微的抖抖，就能够享受桩功，养生了。另外，其实比武发力。也就是这么一抖擞。</p><p><strong>薛颠传的桩功，一个练法是，小肚子像打太极拳一般，很沉着地鼓出，再很慢很沉着地缩回，带动全身，配合上呼吸，不是意守丹田，而是气息在丹田中来去。</strong></p><p>桩法是活动的，不是静功而是慢练。薛颠原话为 “此桩法之慢练，增力之妙法也，慢慢以神意运动，舒展四肢” ——桩法是动的，只不过动得极慢，外人看不出来。</p><p>站桩时，也要动起 <strong>步趟进、侧身而闪</strong> 的心思，外表看似不动，其实里面换着身形。要静之又静，长呼长吸尽，站空了自己。</p><p><strong>浑圆桩足以眼神站桩，两眼要往上高瞟。练武先练眼，跟能生神，所以是练武先练神。人爬上山顶，累得疲惫不堪，但目光一远眺，身上就轻松一浑圆桩是这个原理。</strong></p><p>所谓 “心有灵犀一点通” ，眼神就是这个灵犀。久站磨炼筋骨，但只坚实了筋骨。等于没有站桩。眼神和肉体的关系，是浑圆桩要体味的东西。有了灵犀，才能有生机，冬天过去大地回春，生机一起，土里都是香的，抓把土，粒粒都是活的，站桩也要把自己站活了。</p><p>站浑圆桩时，身子让眼睛领走了，身子不能做作。</p><p>摆拳架看似不动，其实筋骨肌肉都牵挂着，扑出去一厘米。犹如山谷有回声，身体也有回力，扑出去一厘米。再回来一厘米，要用回力来锻炼，如此易出刚劲。</p><p>站桩之苦首先是筋骨软弱的疲劳之苦，学会了这个方法，站二十分钟桩，等于打二十分钟拳，也就喜欢站桩了。</p><h2 id="五行拳"><a class="header-anchor" href="#五行拳"></a>五行拳</h2><p>开始练劈拳，要找个开阔地带，犹如人登上高山，视野一开，会禁不住地长呼一口气。在开阔地带，气息容易放开。</p><p><strong>劈拳的姿势是手的一探一回，犹如人的一呼一吸。</strong> 一趟四五百米地打下去，气息越来越绵长，越来越深远，精力便充沛了。</p><p>手部动作激发了全身，渐渐就会感到气息鼓荡，全身毛孔开合。薛颠说过：“练拳的人要学会体呼吸。”呼吸的妙处在打劈拳时可以体会到。</p><p><strong>气息充沛，这是习武的基础，形意拳先练劈拳。</strong> 劈拳中本就含有钻拳的姿势，练好劈拳接着练钻拳较容易。正是“金生水”，劈拳属金，钻拳属水。而再学一个全新的拳架，如崩拳就比较困难。</p><p><strong>劈拳养肺，人的两条胳膊对肺直接作用，是通过运动两条胳膊，来达到锻炼呼吸，强健肺部的效果。</strong></p><p>而人的两条腿属于肾。钻拳以打法来说，是要练肘或指节的，但以练法来说，是要练腿，以活腿来养肾。</p><p>所以钻拳的步伐 <strong>不是直来直去，而是螺旋前进</strong> 。让两条腿有一个松快的余地，这样肺气足，肾水旺，上下身都修好，方可以向上进修。所以 <strong>要钻拳接着劈拳练。</strong></p><p>在练劈拳的阶段，都会遇到这样的情况，觉得 *身上皮肤增厚，像大象皮似的，而日，觉得手指粗得像胡萝卜，两个手心像有两个小漩涡，十根手指自发地紧紧握起，不愿意打开… 这都是错觉。是因为身上的气充足了，情绪也变得活跃了，忙了这个忙那个，如小孩一样，干什么都兴致盎然。* 这是一个必经的阶段，发现自己变成这样了，就说明功夫已上路了。</p><p>此时就不必再到开阔地去练拳了。形意拳自古讲究“拳打卧牛之地”，有个能挪步的地方就练上了，到开阔地打拳只是入门的方便之法。</p><p>因为劈拳练息，这个功夫得一年才能成就，先祛病再强身。通过练息，身上的气养育起来，大脑时常会有灵感，此时学拳就真是趣味无穷了。</p><p><strong>炮拳出手后，要向后一耸，就是上挑的枪法，所以炮拳里有两个家伙，明显的足下扎枪，隐藏的是上挑枪，一个在形上，一个在劲上，以下扎的拳形来上挑，所以才妙。炮拳要到杆子上去体会——这是以后的事情，那时候，便要扎一枪有一枪的讲究了。</strong></p><p><strong>横拳的练法，是斜着进一小步，横着退一大步，横拳等于是倒着打的，正好练这“踏荷叶”，脚伸在地上，要感到踏在荷叶杆上，只有一根丝能支持，要用脚的肉感，把这根丝探测出来。</strong></p><p><strong>练形意要养成“上虚下实”的习惯，上身永远松快不着力，功力蕴藏在下身。</strong></p><p>劈、崩、炮的基本型都如此，而钻、横的基本型就把这个“重收”耍在动作上了，<br><strong>钻拳是进一大步退一小步，横拳是进一小步退一大步。</strong> 而在变化中，劈、崩、炮都有退步法。最有名的是崩拳的“退步崩”了。</p><p>炮拳前手横架在眉前，后手由面门径直打出去，攻击敌人面门，取开炮的意象，称前手为炮架，后手为炮弹，后手的出拳路线是直的，而且要有股爆炸力(开始练时可先从弹力人手)。</p><p><strong>打炮拳时，后手不直线出击，而斜着撇出去，正是“遇敌好似火烧身”，就像往火堆里滴一滴油，不是一般地火苗跳起。</strong> 而是整簇大火都跳起，炮拳就是令全身劲力跳起，劲力不在最外的手上，而在内里的根节，手随着根节升腾起的劲力挥出。</p><p><strong>五行拳不是练拳，而在练五种不同的劲，所以每一种拳的转身姿势都不同。转身姿势是为劲而设立的，多练转身，对领悟劲有帮助。</strong></p><p>“崩”字怎么解释，就是一崩劲吗?其实崩拳的妙处在于张弛。</p><p>五行拳是拳母，一辈子离不开，上手就受益。将五行拳的小动都学到，方能出形意的功夫。十二形就是从五行拳罩变化出来的，而练象形术的人能变回五行拳，一练起来，就知道两者是一个脉。</p><p>形意的拳母是五行拳，而五行的拳母是横拳，横拳属土，万物归于土，土含育万物，生发着劈、崩、钻、炮，所以横拳是无形的，横拳劲是形意拳最独特的东西。</p><p><strong>横拳是无形的，而有形的横拳就是蛇行，一横身子。就有了兜、裹、丢、顶。</strong><br>我年轻时与人试手(试手就是试试，较量是拼命)，一下子把人打出去了。自己却奇怪上了，这是个什么动作?回味一下觉得像是蛇行，连带着横拳也明白了。</p><p>把直来直去的拳打转了。把转着的圈打直了，这是崩拳的练法。</p><p>“崩拳有儿、钻拳有六”，钻拳的六个变招中，学会了两个就全有了。一个是前手压住对方，扯带得后手撵锥子似的撵进去。另一个是，前手一晃，你就撞在他后手上了，变魔术一般，不是障眼法，而是他换了身型。</p><p>两者的前后虚实不同。整体说来，钻拳不是钻拳，是钻身。旧时代的北京很冷，冬天商店挂着沉甸甸的棉帘子，人进商店，前手一撩门帘，身子就往里钻，身子一动，手上搭的分量卸了，人进了门，帘子也刚好落下，有道缝就进了人。这是生活里转换虚实的现象，形意拳的“换影”也是这个意思。</p><p><strong>拳劲起自腰劲，只有头虚领了，腰里才生力，站桩首先是为了生腰力。脊椎敏感时，要让站桩法动起来，可以尝试一下薛颠的蛇形。</strong> 蛇形是肩打，“后手只在胯下藏”，后手绕在后臀胯下，贴着尾椎骨向上一提。犹如马尾巴乍起来，才能跑狂了，撑上这个劲，尾椎乍了，肩膀才能打人，这是桩法融入拳法。</p><p>从薛颠的角度讲。 <strong>劈拳起手势、半步崩拳都是猴蹲身，</strong> 这样十二形就如五行拳一样，其实这是五行拳该有的东西。</p><p>指望摆出劈、崩、钻、炮、横的架子赢人，是指望不上的。不能蛮干，否则一下子就被人借了劲。为人处事也要这样，练了功就要藏着，藏不住就会得罪人，一得罪就是一大片，藏还得深藏。关键时候露一手就行了，形意拳是留给写实用功、心地纯正的君子的。</p><h2 id="二十形"><a class="header-anchor" href="#二十形"></a>二十形</h2><p><strong>蛇形是肩打，鸡形是头打，燕形是足打</strong> ，不是李存义传的，是他从山西学来的。其中的蛇形歌诀是“后手只在胯下藏”，后手要兜到臀后胯下，开始时，只有这样才能练出肩打的劲。</p><p>武林里讲 <strong>薛颠“能把自己练没了”，指的是他的猴形。他身法快、比武时照面一晃，就看不住他了，眼里有他，但确定不了他的角度。</strong></p><p>“龙形搜骨”不是龙形，就是 <strong>劈拳里前脚外撇的大跨步</strong> ，说这个步子开天辟地。打通三盘，调理百骸，是成就身子的关键。有了步子有功夫，没步子没功夫。这个步子就是内功。</p><p><strong>只撇脚不展腿，撇脚的打法，是别住敌人的脚，但也是在擒拿时较从容的情况下使用，情况紧急一拳见生死时，就用不上了。撇前脚的大跨步，主要是练法。</strong></p><p><strong>前脚外撇的大跨步是形意的大步子，还有个小步子，就是崩拳步。崩拳步很微妙，步子只是向前，两膝盖是挤着的。但腿根里夹着活的动势，稍稍一调，就能随时随意地转向、转劲。所以崩拳微妙。</strong></p><p>对于蛇形。薛颠说：“一动手，就是这事，没旁的事。”</p><p>说形意拳难看也主要是有这个猴蹲身，练拳时，处处都有只猴子蹲着，可想这一式的重要。猴蹲身之后，有张狂的招数。蹲身先练了膝盖，所以猴蹲身一变，就是扬身膝击，名猴挂印。 <strong>这一蹲一扬，正如劈拳的一起一伏，也如崩拳的一紧一弛，只不过是猴形放肆，劈崩含蓄。</strong></p><p>猴挂印的下一变是猴摘桃，就是抓敌人脸，泼妇打架一般，这是为膝击做掩护。不抬腿是立于不败之地。抬了腿是兵行险道，得有收场、后撤的伎俩。这连抓带点，练着滑稽、打起来狼狈，但这一番乱七八糟，兴许就乱中取了胜。比武时要懂得挑事端，找头绪，无理取闹一下，也许就乱了对方的方寸。</p><p>炮拳两手有前后，马形足两只手的炮拳，两手齐出，好像呆板，但只要转起来，呆板的也就变化无穷了。 *这个左右翻身的打法，不是翻胳膊，而是要把整个身子的重量从这边翻到那边，所以马形对整劲有好处，马形有践踏之意，动了手就不停，这个打法能先发制人。* 动手想快，光抡胳膊不行，脚下得踏上劲，手上才能快。所以马形抡胳膊却练了脚。</p><p>马形成就了，脚下有弹力，随时可撩起伤人，冲着对方的胫骨、脚踝，撩上就踏，脚离地的时间越少越好。马形的腿击法，不是明目张胆，而是在抡胳膊的时候藏着。其中的巧妙，希望初学者，用“打一厘米”的方法好好揣摩，这是个容易使上的防身之技。</p><p>鸡单足立地时是抓着爪子缩脚，所以要含着抓意提膝，有了抓意，膝盖下就能生出一踹。此踹很低，脚背外斜翘起，所以名为鸡翘脚。鸡形的腿击是从膝盖生出来的，不是直接使脚，所以能够“有机会就甩一脚，没机会就藏着。”</p><h2 id="象形术"><a class="header-anchor" href="#象形术"></a>象形术</h2><p>猿象的返身动作比钻拳大，因为 <strong>钻拳把由下往上的钻势压缩到一直线里了，</strong> 而猿象把这个上下钻势张扬了，蹲身时一回头就转了向，这一转比钻拳带的动静大。转了向就钻，犹如猴子一下蹿上树，人虽然没跳起来，劲要蹿起来。</p><p>象形术猿象的手指头向着人脸，形意拳猴形的猴挂印也要预备着——这个比武要点，我看书上提一句，在此特别强调，这两招是一招，少了谁都有危险，猴挂印，膝盖是一大块骨头，等于一方大印，要把这大印的分量挂到敌人胸膛里去，最佳的落点是敌人两胸尖的腹中穴。</p><p>这是个狠招。但不会返身换影，一抬膝盖便会挨打。</p><h2 id="交手法"><a class="header-anchor" href="#交手法"></a>交手法</h2><p><strong>形意拳的肩打、胯打、臀打就是一蹭，</strong> 而不是像出拳似的打出去，摆胯、凸肩、甩屁股是很难看的，这种近身打法是要蜻蜓点水一般，一闪一闪的。</p><p>世上永远是强者影响弱者，交战步法的原理也如此。你的步法强，能影响别人，别人不自觉地一学你，就败了。</p><p>对于交手的大原则，唐维禄总结为： <strong>『身子挂在手上，眼睛盯着根节，冷静。』</strong><br>手上要挂着身体一二百斤的分量，拳谱有“追风赶月不放松”的话，追上敌人容易，身子能追上自己的手，就难了；肩膀为根节，敌人要有作为，肩膀必有征兆，练武人练出眼力容易，养成明察秋毫的习惯，就难了；而最难的是冷静，练功夫练得开了智。方能冷静。</p><p><strong>腿击法是身法的发挥。所以练腿先练身。</strong></p><p>比武就是比谁先知道。形意拳的后发制人，不是等对方动手了我再动手，而是对方的征兆一起，我就动了手。不是爱什么招就使什么招，要应着对方，适合什么用什么，平时动心思多练，有出手就足合适的。只有练拳时方方面面的心思都动到，在比武电闪雷鸣的一瞬，才能变出东西来。</p><p>跟高手比武，精神一亢奋就觉得有种东西兴旺起来，这就是力到丹田。说不清楚，只能体会，站桩就兴旺这个东西。</p><p>形意拳专有打法，那是另一种分寸。薛颠的打法，在“占先于”方面有独到之处。示范时，做徒弟的防不住他，他的手到徒弟身上，就变打为摔了，把人摔出去，又一下捞起来，在他的手里不会受伤。做徒弟的被他吓几次，反应能力都有所提高。</p><p>只有崩拳和蛇行，是我多年练武、比武自然形成的。我的崩拳、蛇行都只是看似崩拳、蛇行的东西，究竟是什么东西我也不知道，顺手就行了。</p><p>形意拳是一动就有步数，身形得换在点上。看着你的动静，变得越快越好，越小越好，犹如好朋友见而一下就搭上了肩膀，得一下就近了，敌身。</p><p>至于薛颠的马形，叫“马形炮”，手势与炮拳相似，犹如马立着前腿蹬人，也是在脚上有劲撑着。马形藏着腿击，绊子，跟着手变。形意拳是主要攻中路的拳。崩拳要坐腰，一坐腰，人就低蹿出去，正好打在敌人的胸膛、小腹。 <strong>站桩时也要揣摩提腰坐腰。微微活动着。这是拳法融在桩法中。</strong></p><p>能硬打硬进，也不硬打硬进，一对一，可以硬碰硬，但一个对七八个时，怎么办?练武修出的劲道跟人硬拼了，那么练武修出的灵性干什么呢? <strong>内劲是虎、身法是龙，功力足还要智慧深。</strong> 只能力胜，是俗于，能智取人，方是高人。</p><p>练法的大纲是“二十四法”，打法的大纲是“八打”，师傅们讲拳都是结合着个人体验，在这两首歌诀上发挥。“头打落意随足走，起而未起占中央” ——鸡形是头打，鸡啄米就是擒住敌人两手时，用头下“啄”鼻软骨，上顶下巴，“啄”鼻软骨能让敌人血流满面，而项下巴，能一下把敌人顶晕过去。</p><p><strong>鸡形头打就是练头，头为一身之枢纽，头部僵硬、脚下再能变步数，转换身形时也仍然快不了。鸡总是一探头一探头地走，以头领身，鸡形就足用这个方法练身子。</strong></p><p>形意拳在发力时，只在碰到对手身上的瞬间，手才握紧。同样的道理，只在打倒敌人的一瞬间，才露真形——这是五形拳的用法，只用一点，一点即可。大部分时间存而不用，神经上有储备就行了。《西游记》里的妖精，关键时候才显原形。“真身只在刹那”。</p><h2 id="八卦掌"><a class="header-anchor" href="#八卦掌"></a>八卦掌</h2><p>尚云祥说八卦就是教人“送”，八卦像推磨，凡推过磨的人都知道，要将谷物磨得细腻。直愣愣地推肯定不行， <strong>手上的那般劲得把磨杆“送”出去，送得“平、圆、悠、远”，还要送出一般向下的辗劲，这股另有的劲叫做“留”。</strong></p><p>八卦掌便是有送有留，这不是靠站桩就能站出来的，所以八卦门人不站桩，都是<br><strong>在运动中求“送”、“留”。</strong></p><p>八卦如推磨，除向前推，还要推出向下的辗劲， <strong>八卦掌一迈步要有两股劲，随时转化。</strong> 明白了这两股劲的道理，就能理解八卦掌的招数为何千变万化。</p><p>程延华打八卦，劲力浑身鼓荡，感觉不到他在打，只感到他在动。大蟒蛇从头到尾都蹭着劲，才能爬动得起来，这种威势，又怎是打一拳、踹一脚所能比的?</p><p>“只动不打”是程派八卦的练功口诀，“硬退硬进天遮拦”是形意的古歌诀，尚云祥还有“练拳要学瞎子走路”的窍门，说瞎子走路身子前后都提着小心，从头到脚都有反应，练拳不是练拳头。而是全身敏感。</p><p>八卦掌走偏门，一下就抢到人侧面，与练八卦掌的人交手，你就能体会到 <strong>崩拳的转身动作——狸猫上树的巧妙，狸猫上树可迎敌人攻侧面。</strong></p><p>形意拳打法的要诀也是攻敌侧面，等于两个人打一个人。正面迎敌就吃力了。唐师腿法妙，不单善走，还能迅速抢到敌人侧面。</p><p>形意门中的偏门攻防，返身打法是李存义发扬的，从李存义开始，形意的钻拳中就融入了八卦的东西，借着八卦的动作往身侧点。唐师，尚师传我的都是这个功架。</p><p>我的钻拳基本形不是从下往上钻，而是从中往侧点。 <strong>那个借来的八卦动作，借了就不还了，融在钻拳里起了变化，还有八卦“回身掌”的形态，向体外侧一滑步，前手向外撸去，还有塌劲。胳膊撑起来，手掌是横的。</strong></p><p>然后， <strong>后手随着点过去，手虽有前后，但两臂要有合力。犹如弓弩，两头绷上劲，才能射出东西，松了哪头都小灵。钻拳犹如螃蟹，是横着走的，左向一掌跟一拳，右向一掌跟一拳，就练上了返身。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 生活总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 形意拳 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>.gitignore 文件配置</title>
      <link href="/archives/676ce982.html"/>
      <url>/archives/676ce982.html</url>
      
        <content type="html"><![CDATA[<p>git 使用过程中，有许多文件或者文件夹是不希望更新到远程仓库了，因为他们比较占地方，这个时候我们可以利用 <code>.gitignore</code> 文件忽略文件。</p><h2 id="按项目进行忽略"><a class="header-anchor" href="#按项目进行忽略"></a>按项目进行忽略</h2><p><strong>.gitignore</strong> 文件用于忽略文件</p><ul><li>所有空行或者以没注释符号 <strong>#</strong> 开头的行都会被 Git 忽略。</li><li>可以使用 glob 模式进行匹配。</li><li>匹配模式最后跟反斜杠 <code>(/)</code> 说明忽略的是目录。</li><li>要忽略指定模式以外的文件或者目录，可以在模式前加上惊叹号。</li></ul><h3 id="glob-模式"><a class="header-anchor" href="#glob-模式"></a>glob 模式</h3><p>* : 表示任意个任意字符</p><p>? : 表示匹配一个任意字符</p><p>所以我们只需要在对应的 <strong>git</strong> 目录下，创建一个 <strong>.gitignore</strong> 文件，然后配置上 <strong>.DS_Store</strong> 即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">touch .gitignore</span><br><span class="line">echo */.DS_Store" &gt; .gitignore</span><br></pre></td></tr></table></figure><p>然后保存，就可以生效了。</p><h2 id="全局进行配置"><a class="header-anchor" href="#全局进行配置"></a>全局进行配置</h2><p>然后我们发现，只要是 Mac 下的 Git 项目我们都需要这样操作一次，太麻烦了，所以我们可以在 home 目录下创建一个 <strong>.gitignore_global</strong> 文件，然后按 <strong>.gitignore</strong> 文件的配置方式完成配置。</p><p>在每个项目下的 <strong>.gitignore</strong> 文件中，我们可以引用这个 global 文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.excludesfile ~/.gitignore_global</span><br></pre></td></tr></table></figure><p>这样就可以将全局方法加载到项目配置文件中了。</p>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> .gitignore </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串按排序和时间戳</title>
      <link href="/archives/85f1b411.html"/>
      <url>/archives/85f1b411.html</url>
      
        <content type="html"><![CDATA[<h2 id="排序"><a class="header-anchor" href="#排序"></a>排序</h2><p>自建了一个表，其中的字段为 <strong>char</strong> 或者 <strong>varchar</strong> 的类型。</p><p>我们如果直接进行的排序的话，得到的序列是字符顺序的，即 <strong>1,10,2,20,…</strong><br>，但是我们希望得到的是 <strong>1,2,3,4,…</strong> 这种序列，有两种方法可以实现排序。</p><ul><li>手动转换</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> db.sql <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">id</span> + <span class="number">0</span> <span class="keyword">desc</span></span><br></pre></td></tr></table></figure><p>但是这种方式显得有点丑，其实 Mysql 提供了一个非常好用的函数进行操作。</p><ul><li>使用函数</li></ul><p><strong>CAST()</strong> 函数和 <strong>CONVERT()</strong> 可以使用。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> db.sql <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">CAST</span>(<span class="keyword">id</span> <span class="keyword">as</span> SIGNED) <span class="keyword">desc</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> db.sql <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">CONVERT</span>(<span class="keyword">id</span>, SIGNED) <span class="keyword">desc</span></span><br></pre></td></tr></table></figure><h2 id="时间戳"><a class="header-anchor" href="#时间戳"></a>时间戳</h2><ul><li>创建新记录和修改现有记录都更新方式</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span></span><br></pre></td></tr></table></figure><ul><li>创建的时候设置时间，后续的修改不再更新</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TIMESTAMP DEFAULT CURRENT_TIMESTAMP</span><br></pre></td></tr></table></figure><ul><li>创建的时候把字段设置为 0 ，以后修改才更新</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TIMESTAMP ON <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span></span><br></pre></td></tr></table></figure><ul><li>创建时设置为给定值，以后更新会刷新这个时间</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TIMESTAMP DEFAULT 'yyyy-mm-dd hh:mm:ss' ON <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后台技术 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CAST </tag>
            
            <tag> CONVERT </tag>
            
            <tag> timestamp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通配符与正则</title>
      <link href="/archives/a3183791.html"/>
      <url>/archives/a3183791.html</url>
      
        <content type="html"><![CDATA[<h2 id="简述"><a class="header-anchor" href="#简述"></a>简述</h2><p>通配符和正则表达式很容易混淆，首先二者所应用的对象是不同的，通配符主要是用在 <strong>Shell</strong> 命令中，比如 <code>find</code> 、 <code>ls</code> 、 <code>cp</code> 等，而正则是使用在文本过滤工具（可以是字符串搜索和替换等），例如 <code>awk</code> ， <code>sed</code> 等。</p><h2 id="通配符"><a class="header-anchor" href="#通配符"></a>通配符</h2><p>[a-z] […] : 匹配方括号中指定范围内的单个字符或方括号列出的其中一个字符<br>[!9] [!..] : 不匹配方括号中的字符或指定范围内的单个字符<br>* : 匹配 0 个字符或多个字符<br>? : 匹配任何单个字符，且不能为空的字符</p><blockquote><p>因为 <strong>Shell</strong> 会将方括号( <code>[</code> 、 <code>]</code> )、问号( <code>?</code> )、星号( <code>*</code> )等内容特殊处理，因此想匹配这几个字符时，需要加转义符 <code>\</code> 。</p></blockquote><table><thead><tr><th>通配符号</th><th>内容</th></tr></thead><tbody><tr><td>*</td><td>万用字符，代表0个或者多个字符（包括数字）</td></tr><tr><td>?</td><td>万用字符，代表一定有一个字符</td></tr><tr><td>#</td><td>注解字符，常用在说明或者备注中</td></tr><tr><td>\</td><td>转义字符，将特殊字符还原为一般字符</td></tr><tr><td>|</td><td>分隔字符，分隔两个管道命令</td></tr><tr><td>;</td><td>连续命令界定符，用来分隔</td></tr><tr><td>~</td><td>登录用户的 home 路径</td></tr><tr><td>$</td><td>变量声明字符，用来表示变量</td></tr><tr><td>&amp;</td><td>后台执行命令</td></tr><tr><td>!</td><td>逻辑运算符非</td></tr><tr><td>&gt; &gt;&gt;</td><td>输出导入符，一个为取代，两个为累加</td></tr><tr><td>’</td><td>单引号，不具有变量转换功能</td></tr><tr><td>&quot;</td><td>具有变量转换功能</td></tr><tr><td>``</td><td>中间为可以先执行的指令</td></tr><tr><td>()</td><td>中间为子 shell 起始与结束</td></tr><tr><td>[]</td><td>中间为字符组合</td></tr><tr><td>{}</td><td>中间为命令区块的组合</td></tr></tbody></table><h2 id="正则表达式"><a class="header-anchor" href="#正则表达式"></a>正则表达式</h2><h3 id="字符匹配"><a class="header-anchor" href="#字符匹配"></a>字符匹配</h3><p>. : 匹配任意单个字符<br>* : 匹配其前面一个字符出现任意次<br>? : 匹配其前面的字符1次或者0次<br>+ : 匹配其前面的字符至少出现1次（扩展正则表达式中）</p><h3 id="位置匹配"><a class="header-anchor" href="#位置匹配"></a>位置匹配</h3><p>^ : 行首<br>$ : 行尾<br>\&lt; 或 \b : 词首，其后面的任意字符必须作为单词首部出现<br>\&gt; 或 \b : 词尾，其前面的任意字符必须作为单词尾部出现<br>\B : 非单词开头或结尾<br>^$ : 空白行</p><h3 id="分组"><a class="header-anchor" href="#分组"></a>分组</h3><p>(ab)* : 匹配 <strong>ab</strong> 这个分组出现任意次<br>\1 : 引用第一个左括号以及与之对应的右括号所包括的内容<br>\n : 同 \1</p><h3 id="特殊"><a class="header-anchor" href="#特殊"></a>特殊</h3><p><code>[:alnum:]</code> : 任何字母和数字<br><code>[:alpha:]</code> : 任何字母<br><code>[:cntrl:]</code> : 控制字符，包括 <strong>ASCII</strong> 表中的 <strong>000</strong> - <strong>037</strong> 再加上 <strong>177(‘DEL’)</strong><br><code>[:digit:]</code> : 任何数字<br><code>[:punct:]</code> : 标点符号，<code>'!&quot;#$%&amp;()*-+,./:;&lt;=&gt;?@[]\\^_{|}~</code><br><code>[:graph:]</code> : 打印字符，等价于 <code>[:alnum:]</code> + <code>[:punct:]</code><br><code>[:lower:]</code> : 小字字母<br><code>[:upper:]</code> : 大写字母<br><code>[:print:]</code> : 可打印字符，等价于 <code>[:alnum:]</code> + <code>[punct:]</code> + <code>[:space:]</code><br><code>[:space:]</code> : 空白字符，包括 tab/newline/vertical tab/form feed/carriage return/space<br><code>[:xdigit:]</code> : 任何16进制数字，相当于 [0-9a-fA-F]</p><blockquote><ol><li><code>^[[:space:]]*$</code> : 匹配没有任何内容的行</li><li>[] : 中的特殊字符( <strong>.</strong> , ***** )会失去特殊含义</li></ol></blockquote><table><thead><tr><th>正则</th><th>意义</th></tr></thead><tbody><tr><td>^word</td><td>搜索在行首的字符串</td></tr><tr><td>word$</td><td>搜索在行尾的字符串</td></tr><tr><td>.</td><td>任意一个字符</td></tr><tr><td>\</td><td>转义字符</td></tr><tr><td>*</td><td>重复0个或者多个前一字符情况</td></tr><tr><td>{n,m}</td><td>连续 n 到 m 个的前一个字符，若为 {n} 则是连续的 n 个前一个字符，若是 {n,} 则是连续 n 个以上的前一个字符</td></tr><tr><td>[list]</td><td>表示字符列表集合</td></tr><tr><td>[ch1-ch2]</td><td>表示字符顺序列表</td></tr><tr><td>[^]</td><td>表示不包含字符</td></tr></tbody></table><h3 id="使用正则进行匹配的示例"><a class="header-anchor" href="#使用正则进行匹配的示例"></a>使用正则进行匹配的示例</h3><p><code>grep -n '^#' temp.txt</code>:搜索到行首为 # 的那一行<br><code>grep -n '!$' temp.txt</code>:搜索行尾为 ! 的那一行<br><code>grep -n 'e.e' temp.txt</code>:搜索字符串可以是 eve ，eae ，e e ，但是不会是 ee<br><code>grep -n ''' temp.txt</code>:搜索含有 ’ 的那一行<br><code>grep -n 'ess*' temp.txt</code>:找出有 es ， ess ， esss 的一行，因为 * 是大于等0个，所以可以匹配 es<br><code>grep -n 'go{2,3}g' temp.txt</code>:在 g 和 g 之间有 2 到 3 个 o 存在，即 goog ， gooog<br><code>grep -n 'g[ld]' temp.txt</code>:搜索含有 gl 和 gd 的那一个，注意，这里只代表一个，如 [lad]f ，只有 glf ， gaf 和 gdf 可以被搜索到，如果是 glaf 这种则是不能被找到的<br><code>grep -n '[0-9]' temp.txt</code>:搜索含有任意数字的一行，注意，在 [] 中的 - 是有特殊含义的，同时也可以使用 <code>grep -n [:digit:] temp.txt</code>来代替。而 - 中的顺序是由 ASCII 来设定的<br><code>grep -n 'oo[^t]' temp.txt</code>:搜索不为 oot 的那一行</p>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> 正则表达式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> regex </tag>
            
            <tag> wildcard </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>拼接查询结果中的字符串</title>
      <link href="/archives/e958b1c9.html"/>
      <url>/archives/e958b1c9.html</url>
      
        <content type="html"><![CDATA[<h2 id="CONCAT"><a class="header-anchor" href="#CONCAT"></a>CONCAT</h2><ul><li>将多个结果作为字符串拼接在一起</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">concat(str1,str2,...)</span><br></pre></td></tr></table></figure><p>实例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">concat</span>(o.user_name,o.user_number) <span class="keyword">from</span> <span class="keyword">user</span> o <span class="keyword">where</span> user_id = <span class="string">'1'</span></span><br></pre></td></tr></table></figure><p>但是如果查询过程中有一个字符串为 <strong>null</strong> 则整个结果都将是 <strong>null</strong> ，这时可以将 <strong>null</strong> 转换为 ‘’</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">concat</span>(<span class="keyword">IFNULL</span>(o.user_name,<span class="string">''</span>),o.user_number) <span class="keyword">from</span> <span class="keyword">user</span> o <span class="keyword">where</span> user_id = <span class="string">'1'</span></span><br></pre></td></tr></table></figure><p>如果想将结果分隔，则可以使用下面的方法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">concat</span>(o.user_name,<span class="string">','</span>,o.user_number) <span class="keyword">from</span> <span class="keyword">user</span> o <span class="keyword">where</span> user_id = <span class="string">'1'</span></span><br></pre></td></tr></table></figure><p>但是这种方式显得过于难用，如果字段多了，要写很多将分隔符，这时可以用 <strong>concat_ws</strong> 进行拼接。</p><h2 id="CONCAT-WS"><a class="header-anchor" href="#CONCAT-WS"></a>CONCAT_WS</h2><ul><li>将多个结果拼接在一起，使用指定的分隔符</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">concat_ws(separator,str1,str2,...)</span><br></pre></td></tr></table></figure><p>实例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">concat_ws</span>(<span class="string">';'</span>,o.user_name,o.user_number) <span class="keyword">from</span> <span class="keyword">user</span> o <span class="keyword">where</span> user_id = <span class="string">'1'</span></span><br></pre></td></tr></table></figure><p>这种情况下，结果中有 <strong>null</strong> 的话，也不会返回 <strong>null</strong> ，但是如果将分隔符指定为 <strong>null</strong> 则结果会全变成 <strong>null</strong></p><h2 id="GROUP-CONCAT"><a class="header-anchor" href="#GROUP-CONCAT"></a>GROUP_CONCAT</h2><ul><li>将多行的字符串分组整合成一个字符串，必须配合 <strong>group</strong> 使用</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">group_concat([distinct] str1 [order by asc/desc] [separator])</span><br></pre></td></tr></table></figure><p><strong>distinct</strong> 可以排除重复值<br><strong>order by</strong> 可以按升序 ( <strong>asc</strong> ) 或者降序 ( <strong>desc</strong> ) 进行排序<br><strong>separator</strong> 是分隔符，默认为 ‘,’</p><p>实例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    o.class_id,</span><br><span class="line">    <span class="keyword">group_concat</span>(o.student_name)</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    student o</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    o.class_id</span><br></pre></td></tr></table></figure><p>上面这个 sql 是将学生按班级进行分组，然后将学生的姓名拼装到一起</p><p>更复杂一些的例子，可以将学生的名字、学生的学科和分数进行分组查询并拼接结果</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    o.name,</span><br><span class="line">    <span class="keyword">group_concat</span>(<span class="keyword">concat_ws</span>(<span class="string">'-'</span>, o.subject,o.score) <span class="keyword">order</span> <span class="keyword">by</span> o.id <span class="keyword">asc</span>)</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    student o</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> o.name;</span><br></pre></td></tr></table></figure><h2 id="UNION"><a class="header-anchor" href="#UNION"></a>UNION</h2><p>UNION 操作符用于连接两个以上的 SELECT 语句的结果到一个结果集合中。多个 SELECT 语句会删除重复的数据。</p><p>语法格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> expression1, expression2, ... expression_n</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">tables</span></span><br><span class="line">[<span class="keyword">WHERE</span> conditions]</span><br><span class="line"><span class="keyword">UNION</span> [<span class="keyword">ALL</span> | <span class="keyword">DISTINCT</span>]</span><br><span class="line"><span class="keyword">SELECT</span> expression1, expression2, ... expression_n</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">tables</span></span><br><span class="line">[<span class="keyword">WHERE</span> conditions];</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li>expression1,expression2,…expression_n: 要查询的列名</li><li>tables: 要查询的表名</li><li>WHERE conditions: 可选，查询条件</li><li>DISTINCT: 可选，删除结果集中重复的数据。默认情况下 UNION 会删除重复数据，所以对结果无影响</li><li>ALL: 可选，返回所有结果集，包含重复数据</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后台技术 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> concat </tag>
            
            <tag> concat_ws </tag>
            
            <tag> group_concat </tag>
            
            <tag> union </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zsh shell</title>
      <link href="/archives/9d1e89c2.html"/>
      <url>/archives/9d1e89c2.html</url>
      
        <content type="html"><![CDATA[<p>zsh 是一个非常好用的 <strong>shell</strong> ，也是 <strong>bash</strong> 的替代品中比较优秀的一个。</p><h2 id="启用"><a class="header-anchor" href="#启用"></a>启用</h2><p>如果未安装，则可以使用对应的命令行进行安装。</p><p><code>brew install zsh</code> 或者 <code>pacman -S zsh</code> 等方法，然后使用选择器，将默认的 <strong>shell</strong> 设置为 <strong>zsh</strong> 。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s `which zsh`</span><br></pre></td></tr></table></figure><h2 id="iTerm2"><a class="header-anchor" href="#iTerm2"></a>iTerm2</h2><p>如果是在 <strong>Mac</strong> 上，可以和 <strong>iTerm2</strong> 一起使用。</p><h2 id="补全"><a class="header-anchor" href="#补全"></a>补全</h2><p>zsh 的命令补全功能非常强大，可以补齐路径、命令、参数等。</p><p>然后利用 <strong>tab</strong> 键可以在选项中选择，如果过多，可以使用 <strong>ctrl+b</strong> / <strong>ctrl+p</strong> / <strong>ctrl+f</strong> / <strong>ctrl+n</strong> 来进行左上右下的选择。</p><p>还有另外一种用法，对于查询到的进程，可以直接转换为 <strong>PID</strong> 进行处理。</p><h2 id="跳转"><a class="header-anchor" href="#跳转"></a>跳转</h2><h3 id="省略-cd"><a class="header-anchor" href="#省略-cd"></a>省略 <code>cd</code></h3><p>zsh 中跳转的时候，可以省略掉 <code>cd</code> 这个命令，直接输入 <code>..</code> 等同于 <code>cd ..</code> 这个命令。</p><h3 id="session-跳转"><a class="header-anchor" href="#session-跳转"></a>session 跳转</h3><p>在 zsh 中，记录了你最近访问过的地址，可以使用 <code>d</code> 命令进行打开，然后按前面序号进行跳转。</p><h2 id="osx"><a class="header-anchor" href="#osx"></a>osx</h2><p><code>cdf</code> : 在 <strong>Finder</strong> 中打开要 <code>cd</code> 的目录</p><p><code>quick-look</code> : 快速预览文件，类似在 <strong>Finder</strong> 中按下空格</p><p><code>man preview</code> : 在 <strong>preview</strong> 中打开 <strong>man page</strong></p><p><code>itunes</code> : 在命令行中操作 <strong>Itunes</strong></p>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zsh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot 常用配置</title>
      <link href="/archives/d3f4d776.html"/>
      <url>/archives/d3f4d776.html</url>
      
        <content type="html"><![CDATA[<h2 id="MyBatis-模糊查询"><a class="header-anchor" href="#MyBatis-模糊查询"></a>MyBatis 模糊查询</h2><h3 id="mysql"><a class="header-anchor" href="#mysql"></a>mysql</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> DB.SQL <span class="keyword">WHERE</span> MYNAME <span class="keyword">LIKE</span> <span class="keyword">CONCAT</span>(<span class="string">'%'</span> , <span class="comment">#&#123;myName&#125; , '%')</span></span><br></pre></td></tr></table></figure><p>或者使用 <strong>${}</strong> 来进行查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> DB.SQL <span class="keyword">WHERE</span> MYNAME <span class="keyword">LIKE</span> <span class="keyword">CONCAT</span>(<span class="string">'%'</span> , <span class="string">'$&#123;myName&#125;'</span> , <span class="string">'%'</span>)</span><br></pre></td></tr></table></figure><h3 id="Oracle"><a class="header-anchor" href="#Oracle"></a>Oracle</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> DB.SQL <span class="keyword">WHERE</span> MYNAME <span class="keyword">LIKE</span> <span class="string">'%'</span>||<span class="comment">#&#123;myName&#125;||'%'</span></span><br></pre></td></tr></table></figure><h2 id="拆分-SpringBoot-的基础-lib-包"><a class="header-anchor" href="#拆分-SpringBoot-的基础-lib-包"></a>拆分 SpringBoot 的基础 lib 包</h2><p>最近发现使用 Springboot 项目上传到服务器越来越慢，所以决定将项目拆分一下，将需要的 <em>lib</em> 包拆分开来。</p><p>首先需要按原来的内容进行打包，然后就打好的包解压，然后将 <strong>BOOT-INF</strong> 下的内容，上传到服务器，然后将 <em>pom.xml</em> 文件中的 <strong>org.springframework.boot</strong> 增加 <strong>configuration</strong> 的配置，增加之后如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">layout</span>&gt;</span>ZIP<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>nothing<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nothing<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后再重新打包，生成的内容就只有自己编写的内容了。</p><p>上传到服务器之后，先新建一个 <strong>shell</strong> 角本，然后增加执行权限： <code>chmod x+a start.sh</code> 然后将启动的脚本增加如果下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Dloader.path&#x3D;.&#x2F;lib -jar .&#x2F;xxx.jar</span><br></pre></td></tr></table></figure><p>再启动的时候，更新了代码，打包再上传服务器，也就一分钟的事儿。</p><h2 id="Springboot-日志级别"><a class="header-anchor" href="#Springboot-日志级别"></a>Springboot 日志级别</h2><ul><li><p>打印 Mybatis 中调用的 Sql</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.xxxx.mapper:</span> <span class="string">DEBUG</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>com.xxxx.mapper 是 Mybatis 接口的影射文件包</strong></p><ul><li><p>Logger 日志按级别打印</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">    <span class="attr">level:</span></span><br><span class="line">        <span class="attr">org.springframework.web:</span> <span class="string">DEBUG</span></span><br></pre></td></tr></table></figure></li></ul><p>其中，日志级别有： <strong>ERROR</strong> <strong>WARN</strong> <strong>INFO</strong> <strong>DEBUG</strong> <strong>TRACE</strong></p><ul><li><p>root 的日志级别设置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">    <span class="attr">level:</span></span><br><span class="line">        <span class="attr">root:</span> <span class="string">DEBUG</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后台技术 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> oracle </tag>
            
            <tag> 模糊查询 </tag>
            
            <tag> logging level </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Homebrew 入门</title>
      <link href="/archives/711ab194.html"/>
      <url>/archives/711ab194.html</url>
      
        <content type="html"><![CDATA[<h2 id="homebrew-安装"><a class="header-anchor" href="#homebrew-安装"></a>homebrew 安装</h2><p>使用下面的命令进行安装，但是需要先安装 <code>curl</code> :</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</span><br></pre></td></tr></table></figure><h2 id="常用命令"><a class="header-anchor" href="#常用命令"></a>常用命令</h2><ul><li>搜索</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew search mysql</span><br></pre></td></tr></table></figure><ul><li>查询</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew info mysql</span><br></pre></td></tr></table></figure><p>主要看具体的信息，比如目前的版本，依赖，安装后注意事项等</p><ul><li>更新</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew update</span><br></pre></td></tr></table></figure><p>这会更新 Homebrew 自己，并且使得接下来的两个操作有意义</p><ul><li>检查过时</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew outdated</span><br></pre></td></tr></table></figure><p>这回列出所有安装的软件里可以升级的那些</p><ul><li>升级</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew upgrade</span><br></pre></td></tr></table></figure><p>升级所有可以升级的软件们</p><ul><li>清理</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cleanup</span><br></pre></td></tr></table></figure><p>清理不需要的版本极其安装包缓存</p><h2 id="后台启用服务"><a class="header-anchor" href="#后台启用服务"></a>后台启用服务</h2><p><code>brew services</code> 命令是用来管理 Mac 系统中后台服务的，比如在 Mac 上安装了 MySQL ，当我希望将这个变成一个后台服务启动的时候，可以使用，有点像 Linux 下的 <code>service</code> 和 <code>systemctl</code> 两个命令。</p><p>具体的使用命令也非常简单：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">brew services list  # 查看使用brew安装的服务列表</span><br><span class="line">brew services run formula|--all  # 启动服务（仅启动不注册）</span><br><span class="line">brew services start formula|--all  # 启动服务，并注册</span><br><span class="line">brew services stop formula|--all   # 停止服务，并取消注册</span><br><span class="line">brew services restart formula|--all  # 重启服务，并注册</span><br><span class="line">brew services cleanup  # 清除已卸载应用的无用的配置</span><br></pre></td></tr></table></figure><h2 id="配置国内镜像"><a class="header-anchor" href="#配置国内镜像"></a>配置国内镜像</h2><p>使用了一段时间的 <strong>Homebrew</strong> 之后，发现网络波动有点大，好多时间都是更新10多分钟，所以就想到了国内镜像问题。</p><p>其实无论是什么内容，只要是需要更新的，就有两个优先选择的，一个是清华源，一个是科大源，这两个是最好用的镜像了。</p><p>另外一个就是 NPM 的阿里源，这三个源都非常好用。</p><p>对于我的使用，主要是两个，一个是 <strong>formula</strong> 索引，另一个是 <strong>bottles</strong> 。</p><p><strong>formula</strong> 更新使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cd "$(brew --repo)"</span><br><span class="line">git remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git</span><br><span class="line"></span><br><span class="line">cd "$(brew --repo)/Library/Taps/homebrew/homebrew-core"</span><br><span class="line">git remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git</span><br><span class="line"></span><br><span class="line">brew update</span><br></pre></td></tr></table></figure><p><strong>bottles</strong> 镜像则需要配置到环境变量中，我使用的是 zsh shell 所以配置到 <strong>.zshrc</strong> 文件中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles' &gt;&gt; ~/.zshrc</span><br><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure><p>如果你想临时使用的话，则需要在终端中输入 <code>export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles</code> ，当然如果你使用的是 bash shell 则可以将其配置到 <strong>.bash_profile</strong> 或者 <strong>.bashrc</strong> 文件中。</p><h2 id="更新报错"><a class="header-anchor" href="#更新报错"></a>更新报错</h2><p>更新的时候，发现 homebrew 安装的时候，会报错 <strong>curl: (7) Failed to connect to <a href="http://raw.githubusercontent.com" target="_blank" rel="noopener">raw.githubusercontent.com</a> port 443: Operation timed out</strong> ，测试了一下，发现是因为 <code>curl</code> 这个命令有问题了，使用 homebrew 重新安装一下就可以。 <code>brew reinstall curl</code>。</p>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> homebrew </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Mac 电脑制作 U 盘</title>
      <link href="/archives/74995ec8.html"/>
      <url>/archives/74995ec8.html</url>
      
        <content type="html"><![CDATA[<h2 id="Mac-下写入命令"><a class="header-anchor" href="#Mac-下写入命令"></a>Mac 下写入命令</h2><ul><li>找出 U 盘挂载位置</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">diskutil list</span><br></pre></td></tr></table></figure><ul><li>将 U 盘移除</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">diskutil unmountDisk /dev/disk[num]</span><br></pre></td></tr></table></figure><ul><li>写入 U 盘</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dd if=isopath of=/dev/disk[num] bs=1m rdisk</span><br></pre></td></tr></table></figure><p><code>rdisk</code> 是指定方式后，可以加快写入速度。</p><h2 id="iso-转换为-dmg"><a class="header-anchor" href="#iso-转换为-dmg"></a>iso 转换为 dmg</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo hdiutil convert -format UDRW -o linux.dmg kali.iso</span><br></pre></td></tr></table></figure><h2 id="弹出-U-盘"><a class="header-anchor" href="#弹出-U-盘"></a>弹出 U 盘</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">diskutil eject /dev/disk[num]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dd </tag>
            
            <tag> diskutil </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 补遗</title>
      <link href="/archives/afae679a.html"/>
      <url>/archives/afae679a.html</url>
      
        <content type="html"><![CDATA[<h2 id="文件退出暂存区，但是保留修改"><a class="header-anchor" href="#文件退出暂存区，但是保留修改"></a>文件退出暂存区，但是保留修改</h2><p>在代码或者一些内容更新完成好，进行了 <code>git add .</code> 或者 <code>git add -A</code> 操作，但是发现操作错误了，不希望进行暂存区，但是又不想移除已经修改的内容，可以执行 <code>git reset --mixed</code> 操作，这样将文件退出暂存区，但是修改的内容保留。</p><h2 id="多次修改，一次-commit"><a class="header-anchor" href="#多次修改，一次-commit"></a>多次修改，一次 commit</h2><p>在进行一个功能的开发过程中，希望将整个功能仅做一次 <em>commit</em> ，可以在修改完成后，执行 <code>git add .</code> ， 然后再执行 <code>git commit --amend</code> ，这样可以把修改的内容分次写入到 <em>commit</em> 文件中，最后再进行提交。</p><h2 id="git-移除-cache-的内容"><a class="header-anchor" href="#git-移除-cache-的内容"></a>git 移除 cache 的内容</h2><ul><li>git 删除暂存区的文件，不会移除文件，即保留工作区。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm --cache fileName</span><br></pre></td></tr></table></figure><blockquote><p>fileName 为对应的文件名</p></blockquote><ul><li>删除暂存区和工作区的文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm -f fileName</span><br></pre></td></tr></table></figure><h2 id="git-删除错误的-commit"><a class="header-anchor" href="#git-删除错误的-commit"></a>git 删除错误的 commit</h2><blockquote><p>commitId 为对应的 id</p></blockquote><ul><li>仅仅撤销已经提交的版本库，不会个性暂存区和工作区</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --soft commitId</span><br></pre></td></tr></table></figure><ul><li>撤销已提交的版本库和暂存区，不会修改工作区</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --mixed commitId</span><br></pre></td></tr></table></figure><ul><li>彻底将工作区、暂存区和版本库记录恢复到指定的版本</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard commitId</span><br></pre></td></tr></table></figure><blockquote><p>如果你希望保留修改，但是撤销提交，则使用 <code>--mixed</code> ，如果想彻底恢复，则使用 <code>--hard</code></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cache </tag>
            
            <tag> reset </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven 使用笔记</title>
      <link href="/archives/2200c068.html"/>
      <url>/archives/2200c068.html</url>
      
        <content type="html"><![CDATA[<h2 id="创建一个项目"><a class="header-anchor" href="#创建一个项目"></a>创建一个项目</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mvn archetype:generate -DarchetypeCatalog=internal</span><br><span class="line">-DgroupId=com.mycompany.app -DartifactId=my-app</span><br><span class="line">-DarchetypeArtifactId=maven-archetype-quickstart</span><br><span class="line">-DinteractiveMode=false</span><br></pre></td></tr></table></figure><ul><li><code>mvn archetype:generate</code> 固定格式</li><li><code>-DgroupId</code> 组织标识，包名</li><li><code>-DartifactId</code> 项目名称</li><li><code>-DarchetypeCatalog=internal</code> 不要从远程服务器上取 catalog，解决新建项目卡在 Generating project in interactive mode 处的问题</li><li><code>-DarchetypeArtifactId</code> 指定 ArchetypeId ,<br><code>maven-archetype-quickstart</code> , 创建一个 java 项目；<br><code>maven-archetype-webapp</code> ，创建一个 web 项目</li><li><code>-DinteractiveMode</code> 是否使用交互模式</li></ul><h2 id="修改本地仓库路径"><a class="header-anchor" href="#修改本地仓库路径"></a>修改本地仓库路径</h2><p>在 <code>setting.xml</code> 中增加下面的配置，将 <strong>本地地址</strong> 改成对应的路径即可。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>本地地址<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="导出工程依赖的-jar-包"><a class="header-anchor" href="#导出工程依赖的-jar-包"></a>导出工程依赖的 jar 包</h2><ul><li>导出到默认目录下</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn dependency:copy-dependencies</span><br></pre></td></tr></table></figure><ul><li>导出到指定目录下</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn dependency:copy-dependencied -DoutputDirecrtory=lib</span><br></pre></td></tr></table></figure><ul><li>设置依赖级别，并导出到对应的目录下</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn dependency:copy-dependencied -DoutputDirecrtory=lib -DincludeScope=jcompile</span><br></pre></td></tr></table></figure><p>对应的5个级别：</p><ul><li>complie: 表示 dependency 都在生命周期中使用，同时会传递到依赖项目中</li><li>provided: 表示 dependency 由 JDK 或者容器提供，只作用在编译和测试时，无传递性</li><li>runtime: 表示 dependency 不作用在编译时，但会作用在运行和测试时</li><li>test: 表示 dependency 作用在测试时，不作用在运行时，不随项目发布</li><li>system: 与 provided 类似，但是在系统中要以外部 jar 包形式提供，maven 不会在 repository 查找它</li></ul><h2 id="使用华为镜像"><a class="header-anchor" href="#使用华为镜像"></a>使用华为镜像</h2><p>在 <code>setting.xml</code> 文件中 <strong>mirrors</strong> 节点中添加下面的内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>huaweicloud<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://mirrors.huaweicloud.com/repository/maven/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><p>另外华为的镜像站为 <a href="https://mirrors.huaweicloud.com/" target="_blank" rel="noopener">https://mirrors.huaweicloud.com</a>。</p><h2 id="maven-常用命令"><a class="header-anchor" href="#maven-常用命令"></a>maven 常用命令</h2><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>mvn clean</td><td>清理项目生产的临时文件，一般是模块下的 target 目录</td></tr><tr><td>mvn compile</td><td>编译源代码，一般编译模块下的src/main/java目录</td></tr><tr><td>mvn package</td><td>项目打包工具,会在模块下的target目录生成jar或war等文件</td></tr><tr><td>mvn install</td><td>将打包的jar/war文件复制到你的本地仓库中,供其他模块使用</td></tr><tr><td>mvn deploy</td><td>将打包的文件发布到远程参考,提供其他人员进行下载依赖</td></tr><tr><td>mvn site</td><td>生成项目相关信息的网站</td></tr><tr><td>mvn dependency:tree</td><td>打印出项目的整个依赖树</td></tr><tr><td>mvn spring-boot:run</td><td>启动 springboot 项目</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 后台技术 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Surround 笔记</title>
      <link href="/archives/3873eb44.html"/>
      <url>/archives/3873eb44.html</url>
      
        <content type="html"><![CDATA[<h2 id="surroud-插件"><a class="header-anchor" href="#surroud-插件"></a>surroud 插件</h2><p>项目的地址如下</p><ul><li><a href="https://github.com/tpope/vim-surround" target="_blank" rel="noopener">vim surround</a></li></ul><table><thead><tr><th>原文本</th><th>命令</th><th>新文本</th></tr></thead><tbody><tr><td>“Hellow world!”</td><td>ds&quot;</td><td>Hellow world!</td></tr><tr><td>[123+456]/2</td><td>cs])</td><td>(123+456)/2</td></tr><tr><td>“Look ma, I’m *HTML!”</td><td>cs&quot;<q></td><td><q>Look ma, I’m HTML!</q></td></tr><tr><td>if  x &gt; 3 {</td><td>ysW(</td><td>if( x&gt;3 ) {</td></tr><tr><td>my $str = whee!;</td><td>vllllS’</td><td>my $str = ‘whee!’;</td></tr><tr><td><code>&lt;div&gt;Yo!&lt;/div&gt;</code></td><td>dst</td><td>Yo!</td></tr><tr><td><code>&lt;div&gt;Yo!&lt;/div&gt;</code></td><td><code>cst&lt;p&gt;</code></td><td><code>&lt;p&gt;Yo!&lt;/p&gt;</code></td></tr></tbody></table><p>上面的示例中，添加成对的括号时，如果使用后半括号，是没有空格的，如第 2 个示例，如果使用前半个括号，则是有空格的，如第 4 个示例。另外对于一些常见的标记，需要记住：</p><ol><li>t 表示 xml 或者 html 中的 Tag</li><li>w word</li><li>W WORD</li><li>p paragraph</li></ol><h2 id="命令表格"><a class="header-anchor" href="#命令表格"></a>命令表格</h2><h3 id="Normal-mode"><a class="header-anchor" href="#Normal-mode"></a>Normal mode</h3><p><code>ds</code> : 删除一对配对符号</p><p><code>cs</code> : 替换原来的配对符号</p><p><code>ys</code> : 加一对配对符号</p><p><code>yS</code> : 增加一对配对符号，并将内容新建一行，并缩进</p><p><code>yss</code> : 为整行增加一对配对符号</p><p><code>ySs</code> : 为整行增加一对配对符号，并新起一行，然后缩进</p><p><code>ySS</code> : 同 ySs</p><h3 id="Visual-mode"><a class="header-anchor" href="#Visual-mode"></a>Visual mode</h3><p><code>s</code> : 增加一对匹配符号</p><p><code>S</code> : 增加一对匹配符号，并新起一行，然后缩进</p><h3 id="Insert-mode"><a class="header-anchor" href="#Insert-mode"></a>Insert mode</h3><p><code>C-s</code> : 增加一对匹配符号</p><p><code>C-s C-s</code> : 增加一对匹配符号，并新起一行，然后缩进</p><p><code>C-g s</code> : 增加一对匹配符号</p><p><code>C-G S</code> : 增加一对匹配符号，新起一行然后进行缩进</p><h2 id="修改-surrounding-内文本为例："><a class="header-anchor" href="#修改-surrounding-内文本为例："></a>修改 <code>surrounding</code> 内文本为例：</h2><p><code>ci</code> : 修改匹配符号内的文本，并进入插入模式</p><p><code>di</code> : 剪切匹配符号之间的文本</p><p><code>yi</code> : 复制匹配符号之间的文本</p><p><code>ca</code> : 同 <code>ci</code> 但是也修改符号本身</p><p><code>da</code> : 同 <code>di</code> 但是也修改符号本身</p><p><code>ya</code> : 同 <code>yi</code> 但是也修改箱号本身</p><blockquote><p><strong>b 可以表示小括号，B 表示大括号</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Emacs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> evil </tag>
            
            <tag> surround </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac 上执行命令报错解决方案</title>
      <link href="/archives/845ef21d.html"/>
      <url>/archives/845ef21d.html</url>
      
        <content type="html"><![CDATA[<h2 id="git"><a class="header-anchor" href="#git"></a>git</h2><p>mac 执行 git 命令时候出现 <code>invalid active developer path</code> ：</p><p>具体如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xcrun: error: invalid active developer path</span><br><span class="line">(/Library/Developer/CommandLineTools), missing xcrun at:</span><br><span class="line">/Library/Developer/CommandLineTools/usr/bin/xcrun</span><br></pre></td></tr></table></figure><p>解决方法：</p><p>打开终端输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcode-select --install</span><br></pre></td></tr></table></figure><p>回车后，系统弹出下载 xcode，点击确认，下载完成后即可。（实际上不是下载 xcode，可能下载 xcode 有关插件，下载时长约 1 分钟）</p><p>原因 : <strong>出现这个错误原因猜想可能是因为之前安装过 xcode 卸载后或者是因为 xcode 更失丢失内容导致的。</strong></p><h2 id="node-gyp"><a class="header-anchor" href="#node-gyp"></a>node-gyp</h2><p>安装 node-gyp 的时候报错 <strong>xcode-select: error: command line tools are already installed, use “Software Update” to install updates</strong> 。</p><p>解决办法是重新安装 CommandLineTools 工具，用下面的命令处理：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">softwareupdate --install -a # 查看安装状态</span><br><span class="line">softwareupdate --list # 查看安装的列表</span><br><span class="line">reinstall xcode-select # 重装 xcode-select</span><br><span class="line">sudo rm -rf /Library/Developer/CommandLineTools # 删除旧的版本</span><br><span class="line">xcode-select --install # 自动重新安装</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xcode </tag>
            
            <tag> xcrun </tag>
            
            <tag> node-gyp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub Pull Request 方案</title>
      <link href="/archives/bf0a41db.html"/>
      <url>/archives/bf0a41db.html</url>
      
        <content type="html"><![CDATA[<h2 id="操作流程"><a class="header-anchor" href="#操作流程"></a>操作流程</h2><ul><li>登录自己的账号，然后克隆一下原始项目。</li><li>将自己账号下的项目克隆到本地。</li><li>为了追踪原始仓库的更新，需要添加要更新的分支的原始仓库为远程分支</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add upstream &lt;origin&gt;/&lt;xxxx&gt;</span><br></pre></td></tr></table></figure><ul><li>创建私有分支 <em>develop</em> ，用来开发项目</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b develop</span><br></pre></td></tr></table></figure><ul><li>本地 <em>develop</em> 分支提交</li><li>切换 <em>master</em> 分支，同步原始仓库</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git pull upstream master</span><br></pre></td></tr></table></figure><ul><li>切换本地 <em>develop</em> 分支，合并本地 <em>master</em> 分支并解决冲突</li><li>提交本地 <em>develop</em> 分支到自己的 <em>develop</em> 分支</li><li>向原始仓库发起 <strong>Pull Request</strong> 请求</li><li>等待原作者回复 (接受/拒绝)</li></ul><h2 id="注意点"><a class="header-anchor" href="#注意点"></a>注意点</h2><blockquote><p>在拉取新分支时，最好使用 <strong>rebase</strong> ，需如果使用 <strong>merge</strong> 的话，会增加许多 <strong>commit</strong> 信息，这会降低更新的整洁性。</p></blockquote><p>如果有许多提交，可以先将自己的修改合并的一起，再进行提交，合并方案可以参考 <a href="/archives/d5debf46.html" title="Git 合并多次提交">Git 合并多次提交</a>。</p><p>如果在提交的时候与远程有冲突，或者希望在本地解决冲突问题，可以参考 <a href="/archives/a7a0f436.html" title="Git 解决分支冲突">Git 解决分支冲突</a>进行冲突解决。</p>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub Pull Request </tag>
            
            <tag> pr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 合并多次提交</title>
      <link href="/archives/d5debf46.html"/>
      <url>/archives/d5debf46.html</url>
      
        <content type="html"><![CDATA[<p>在合并分支的时候，希望将多次提交合并成一个，然后再 cherry-pick 到主分支。</p><h2 id="合并分支"><a class="header-anchor" href="#合并分支"></a>合并分支</h2><p>develop 分支做开发，可能会进行多次提交，但是在发布或者进行 PR 的时候，我们只希望看到一次提交。这个时候，我们需要进行 <code>git rebase</code> 之后进行合并。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> HEAD~3 表示将近三次提交都合并，如果是将 2 次合并则为 HEAD~2</span></span><br><span class="line">git rebase -i HEAD~3</span><br></pre></td></tr></table></figure><p>这个时候，看到的是一上对 <strong>COMMIT</strong> 信息的提示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">pick 9ba5122 2017 年 8 月 2 日</span><br><span class="line">pick c6da035 ~~</span><br><span class="line"></span><br><span class="line"># Rebase 9b6bae1..c6da035 onto 9b6bae1 (2 commands)</span><br><span class="line">#</span><br><span class="line"># Commands:</span><br><span class="line"># p, pick &#x3D; use commit</span><br><span class="line"># r, reword &#x3D; use commit, but edit the commit message</span><br><span class="line"># e, edit &#x3D; use commit, but stop for amending</span><br><span class="line"># s, squash &#x3D; use commit, but meld into previous commit</span><br><span class="line"># f, fixup &#x3D; like &quot;squash&quot;, but discard this commit&#39;s log message</span><br><span class="line"># x, exec &#x3D; run command (the rest of the line) using shell</span><br><span class="line"># d, drop &#x3D; remove commit</span><br><span class="line">#</span><br><span class="line"># These lines can be re-ordered; they are executed from top to bottom.</span><br><span class="line">#</span><br><span class="line"># If you remove a line here THAT COMMIT WILL BE LOST.</span><br><span class="line">#</span><br><span class="line"># However, if you remove everything, the rebase will be aborted.</span><br><span class="line">#</span><br><span class="line"># Note that empty commits are commented out</span><br></pre></td></tr></table></figure><p>第一列对应的是 <code>rebase</code> 具体的操作，其含义如下</p><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>pick§</td><td>git 会应用这个补丁，以同样的提交信息（commit message）保存提交</td></tr><tr><td>reword®</td><td>git 会应用这个补丁，但需要重新编辑提交信息</td></tr><tr><td>edit(e)</td><td>git 会应用这个补丁，但会因为 amending 而终止</td></tr><tr><td>squash(s)</td><td>git 会应用这个补丁，但会与之前的提交合并</td></tr><tr><td>fixup(f)</td><td>git 会应用这个补丁，但会丢掉提交日志</td></tr><tr><td>exec(x)</td><td>git 会在 shell 中运行这个命令</td></tr><tr><td>drop(d)</td><td>git 会移除这次 COMMIT</td></tr></tbody></table><p>将第二个 <code>pick c6da035 ~~~</code> 这一行修改成 <code>squash c6da035 ~~~</code> ，使之与之前的提交合并。</p><p>保存之后可以看到下面的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">This is a combination of 2 commits.</span><br><span class="line"># This is the 1st commit message:</span><br><span class="line"></span><br><span class="line">2017 年 8 月 2 日</span><br><span class="line"></span><br><span class="line">删除无用配置，提高启动速度</span><br><span class="line"></span><br><span class="line">1. 更新 zucchini-org</span><br><span class="line">2. 增加 CHANGELOG 用来记录每次更新</span><br><span class="line">3. 更新 plantuml 配置</span><br><span class="line">   FIXED Can&#39;t find plantuml-jar-path</span><br><span class="line">4. 增加 parinfer 配置，用来优化 lisp 的编写速度</span><br><span class="line"></span><br><span class="line"># This is the commit message #2:</span><br><span class="line"></span><br><span class="line">~~</span><br><span class="line"></span><br><span class="line"># Please enter the commit message for your changes. Lines starting</span><br><span class="line"># with &#39;#&#39; will be ignored, and an empty message aborts the commit.</span><br><span class="line">#</span><br><span class="line"># Date:      Tue Aug 1 10:24:44 2017 +0800</span><br><span class="line">#</span><br><span class="line"># interactive rebase in progress; onto 9b6bae1</span><br><span class="line"># Last commands done (2 commands done):</span><br><span class="line">&quot;~&#x2F;spacemacs&#x2F;spacemacs.d&#x2F;.git&#x2F;COMMIT_EDITMSG&quot; 36L, 1003C</span><br></pre></td></tr></table></figure><p>修改成正确的 <code>commit</code> 信息之后，保存存并退出，可以看到下面的内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git rebase -i HEAD~2</span></span><br><span class="line">[detached HEAD 0238691] 2017 年 8 月 2 日</span><br><span class="line"> Date: Tue Aug 1 10:24:44 2017 +0800</span><br><span class="line"> 5 files changed, 65 insertions(+), 34 deletions(-)</span><br><span class="line"> create mode 100644 CHANGELOG.org</span><br><span class="line"> rewrite local/custom.el (66%)</span><br><span class="line">Successfully rebased and updated refs/heads/develop.</span><br></pre></td></tr></table></figure><p>这个时候，就已经将我们这几次的更改都合并到一次中了。</p><h2 id="cherry-pick-分支并更新"><a class="header-anchor" href="#cherry-pick-分支并更新"></a>cherry-pick 分支并更新</h2><p>这个时候，就可以更新我们的代码了。</p><p>首先 <code>git checkout master</code> 分支, 然后更新我们的代码 <code>git pull</code> 。</p><p>然后将我们合并之后的 <strong>develop</strong> 分支的内容更新过来</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log -b develop</span><br></pre></td></tr></table></figure><p>看到如下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">commit 02386914b9e5ab13c23451a3463813bfdecb157a</span><br><span class="line">Author: 语乱 &lt;banshiliuli1990@sina.com&gt;</span><br><span class="line">Date:   Tue Aug 1 10:24:44 2017 +0800</span><br><span class="line"></span><br><span class="line">    2017 年 8 月 2 日</span><br><span class="line"></span><br><span class="line">    删除无用配置，提高启动速度</span><br><span class="line"></span><br><span class="line">    1. 更新 zucchini-org</span><br><span class="line">    2. 增加 CHANGELOG 用来记录每次更新</span><br><span class="line">    3. 更新 plantuml 配置</span><br><span class="line">       FIXED Can&#39;t find plantuml-jar-path</span><br><span class="line">    4. 增加 parinfer 配置，用来优化 lisp 的编写速度</span><br></pre></td></tr></table></figure><p>或者使用上次的操作的中的提示 <code>[detached HEAD 0238691] 2017 年 8 月 2 日</code> 其中的 <strong>0238691</strong> 就是我们需要</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git cherry-pick 0238691</span><br></pre></td></tr></table></figure><p>这样我们再推送到远程就可以实现合并更新了。</p>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rebase </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Org mode 中不能执行 dot 、 Python 代码</title>
      <link href="/archives/b203efa6.html"/>
      <url>/archives/b203efa6.html</url>
      
        <content type="html"><![CDATA[<ul><li>无法执行的代码</li></ul><p>更新之后，<strong>dot</strong> 、 <strong>plantuml</strong> 的代码段在 <strong>Org-mode</strong> 下无法执行，需要引入对应的 <strong>ob-xxx.el</strong> 才能正常执行。</p><p>可以手工重新编译或者重新下载 <strong>Org</strong> 相关 <strong>package</strong> 即可，也可以使用下面的命令进行更新。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:spacemacs&#x2F;recompile-elpa</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Emacs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spacemacs </tag>
            
            <tag> org babel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 的环境配置</title>
      <link href="/archives/291b15f4.html"/>
      <url>/archives/291b15f4.html</url>
      
        <content type="html"><![CDATA[<h2 id="切换更新源"><a class="header-anchor" href="#切换更新源"></a>切换更新源</h2><p>刷新 <strong>Manjaro</strong> 源，由快到慢并指定为中国源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman-mirrors -gb testing -c China</span><br></pre></td></tr></table></figure><p>然后更新系统：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -Syyu</span><br></pre></td></tr></table></figure><h2 id="plantuml-中文乱码"><a class="header-anchor" href="#plantuml-中文乱码"></a>plantuml 中文乱码</h2><p>在 Linux 系统中，无论是官方 <strong>JDK</strong> 还是 <strong>OpenJDK</strong> 都有中文字库不全的问题。需要通过安装默认字体来解决这个问题：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dnf install cjkuni-uming-fonts</span><br></pre></td></tr></table></figure><p>安装之后，重新执行 <strong>PlantUML</strong> 代码块，中文可以正常显示。</p>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pacman </tag>
            
            <tag> plantuml </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 解决分支冲突</title>
      <link href="/archives/a7a0f436.html"/>
      <url>/archives/a7a0f436.html</url>
      
        <content type="html"><![CDATA[<p>在使用 git 进行版本管理的开发过程中，经常遇到上传或者拉取分支的时候冲突，在遇到冲突的时候，经常使用下面两个方式解决，虽然第一个方案看起来比较复杂，但是如果按我之前的文章: <a href="/archives/fea0ccee.html" title="Git 工作流">Git 工作流</a> 进行工作的话，只需要执行3、4、5三步即可。</p><p>虽然提供的解决方案，但是最好还是从根源上降低冲突出现的频率才是最好的方案。</p><h2 id="新建分支方法"><a class="header-anchor" href="#新建分支方法"></a>新建分支方法</h2><p>本文主要讨论 Git feature 与 <strong>master(develop)</strong> 分支冲突解决方案。</p><ol><li><code>git pull</code> : 同步远程分支，发现当前的开发流有了新的提交，且与自己开发的功能有冲突。</li><li><code>git checkout -b feature</code> : Checkout 到 feature 分支。</li><li><code>git checkout master</code> <code>git pull origin master</code> : 切换到 master 分支并拉取最新的内容。</li><li><code>git checkout feature</code> <code>git rebase master</code>: 切换到 feature 分支并将 master 的修改合并，并解决冲突。</li><li><code>git add -A</code> <code>git rebase --continue</code> : 将修改内容保存并继续 rebase 操作。</li><li><code>applying: xxxx</code> : 看到这个提示表示已经完成了合并。</li><li><code>git checkout master</code> <code>git merge feature</code> : 切换到 master 分支并将 feature 分支内容合并过来。</li></ol><h2 id="暂存提交方案"><a class="header-anchor" href="#暂存提交方案"></a>暂存提交方案</h2><p>在修改的时候，忘记新建对应的分支了，可以按上面的方案，但保存，然后创建新的分支，再将远程分支对应分支的内容 <code>reset</code> 回未修改的状态。或者使用 <code>git stash</code> 系列命令解决冲突。</p><ol><li><code>git stash</code> : 暂存修改的内容</li><li><code>git pull</code> : 拉取最新的内容</li><li><code>git stash apply</code> or <code>git stash pop</code> : 将暂存的内容合并进来</li></ol><h2 id="git-stash-命令"><a class="header-anchor" href="#git-stash-命令"></a>git stash 命令</h2><p><code>git stash apply</code> : 应用暂存内容但是不删除，可以是最近的一次暂存，也可以按序号应用 <code>git stash apply stash@{0}</code><br><code>git stash drop</code> : 移除暂存的内容<br><code>git stash pop</code> : 应用的同时从列表中移除，只能操作最近的一次 stash 的内容<br><code>git stash list</code> : 查看整个的暂存列表<br><code>git stash save</code> : 来查看对应的所有的修改，这样就可以非常方便的找到最好的实现方案<br><code>git stash show -p stash@{1}</code> : 不输入对应的 <code>stash@{}</code> 内容则将最近的 stash 与当前分支做比较，如果加了则用指定的暂存</p><ul><li>Git stash apply 的时候，报错 :</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">error Your local changes to the follow files would be overwritten by merge: xxxx</span><br><span class="line">Please commit your changes or stash them before you merge .</span><br></pre></td></tr></table></figure><p>可以先add 修改的文件，然后再apply</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add test.txt</span><br><span class="line">git stash apply</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rebase </tag>
            
            <tag> merge </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tar 和 tree</title>
      <link href="/archives/3020d46d.html"/>
      <url>/archives/3020d46d.html</url>
      
        <content type="html"><![CDATA[<h2 id="tar-命令"><a class="header-anchor" href="#tar-命令"></a>tar 命令</h2><h3 id="命令格式"><a class="header-anchor" href="#命令格式"></a>命令格式</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar [必要参数] [选择参数] [文件]</span><br></pre></td></tr></table></figure><h3 id="命令功能"><a class="header-anchor" href="#命令功能"></a>命令功能</h3><blockquote><p>用来压缩和解压文件。tar 本身不具有压缩功能。他是调用压缩功能实现的。</p></blockquote><h3 id="命令参数"><a class="header-anchor" href="#命令参数"></a>命令参数</h3><p>必要参数如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">-A</span> <span class="string">新增压缩文件到已经存在的压缩</span></span><br><span class="line"><span class="string">-B</span> <span class="string">设置区块大小</span></span><br><span class="line"><span class="string">-c</span> <span class="string">建立新的压缩文件</span></span><br><span class="line"><span class="string">-d</span> <span class="string">记录文件的差别</span></span><br><span class="line"><span class="string">-r</span> <span class="string">添加文件到已经压缩的文件</span></span><br><span class="line"><span class="string">-u</span> <span class="string">添加改变了和现有的文件到已经存在的压缩文件</span></span><br><span class="line"><span class="string">-x</span> <span class="string">从压缩的文件中提取文件</span></span><br><span class="line"><span class="string">-t</span> <span class="string">显示压缩文件的内容</span></span><br><span class="line"><span class="string">-z</span> <span class="string">支持</span> <span class="string">gzip</span> <span class="string">解压文件</span></span><br><span class="line"><span class="string">-j</span> <span class="string">支持</span> <span class="string">bzip2</span> <span class="string">解压文件</span></span><br><span class="line"><span class="string">-Z</span> <span class="string">支持</span> <span class="string">compress</span> <span class="string">解压文件</span></span><br><span class="line"><span class="string">-v</span> <span class="string">显示操作过程</span></span><br><span class="line"><span class="string">-l</span> <span class="string">文件系统边界设置</span></span><br><span class="line"><span class="string">-k</span> <span class="string">保留原有文件不覆盖</span></span><br><span class="line"><span class="string">-m</span> <span class="string">保留文件不被覆盖</span></span><br><span class="line"><span class="string">-W</span> <span class="string">确认压缩文件的正确性</span></span><br></pre></td></tr></table></figure><p>可选参数如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">-b</span> <span class="string">设置区块数目</span></span><br><span class="line"><span class="string">-C</span> <span class="string">切换到指定目录</span></span><br><span class="line"><span class="string">-f</span> <span class="string">指定压缩文件</span></span><br><span class="line"><span class="string">--help</span> <span class="string">显示帮助信息</span></span><br><span class="line"><span class="string">--version</span> <span class="string">显示版本信息</span></span><br></pre></td></tr></table></figure><h3 id="常见解压、压缩命令"><a class="header-anchor" href="#常见解压、压缩命令"></a>常见解压、压缩命令</h3><ul><li>tar</li></ul><p>解包： <code>tar xvf FileName.tar</code></p><p>打包： <code>tar cvf FileName.tar DirName</code></p><ul><li>.gz</li></ul><p>解压 1： <code>gunzip FileName.gz</code></p><p>解压 2： <code>gzip -d FileName.gz</code></p><p>压缩 :  <code>gzip FileName</code></p><ul><li>.tar.gz 和 .tgz</li></ul><p>解压： <code>tar zxvf FileName.tar.gzip</code></p><p>压缩： <code>tar zcvf FileName.tar.gz DirName</code></p><ul><li>.bz2</li></ul><p>解压: <code>bzip2 -d FileName.bz2</code></p><p>解压: <code>bunzip2 FileName.bz2</code></p><p>压缩: <code>bzip2 -z FileName</code></p><ul><li>tar.bz2</li></ul><p>解压: <code>tar jxvf FileName.tar.bz2</code></p><p>压缩: <code>tar jcvf FileName.tar.bz2 DirName</code></p><ul><li>.tar.bz</li></ul><p>解压: <code>tar jxvf FileName.tar.bz</code></p><p>压缩: <code>tar jcvf FileName.tar.bz DirName</code></p><ul><li>.Z</li></ul><p>解压: <code>uncompress FileName.Z</code></p><p>压缩: <code>compress FileName</code></p><ul><li>.tar.Z</li></ul><p>解压: <code>tar Zxvf filename.tar.Z</code></p><p>压缩: <code>tar Zcvf FileName.tar.Z DirName</code></p><ul><li>.zip</li></ul><p>解压: <code>unzip FileName.zip</code></p><p>压缩: <code>zip FileName.zip DirName</code></p><ul><li>.rar</li></ul><p>解压: <code>rar x filename.rar</code></p><p>压缩: <code>rar a filename.rar dirName</code></p><h2 id="tree-命令"><a class="header-anchor" href="#tree-命令"></a>tree 命令</h2><p><code>tree</code> 命令在 <strong>Linux</strong> 里是一个非常方便的命令，可以让你方便的查看一个路径下的文件夹结构。</p><p>tree -C : 颜色显示</p><p>tree -f : 显示文件全路径</p><p>tree -L 2 : 只显示2层</p><p>tree -P *.pl : 只显示文件目录和 <strong>*.pl</strong> 为后缀的文件</p><p>tree -F : 显示目录后面的 __ ，显示可执行文件 <em>*</em> 功能类似 <code>ls -F</code></p><p>tree --help : 帮助手册</p>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tar </tag>
            
            <tag> tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Emacs 学习之旅</title>
      <link href="/archives/ba9b36be.html"/>
      <url>/archives/ba9b36be.html</url>
      
        <content type="html"><![CDATA[<p><strong>Emacs 的使用过程，就像是程序员的生涯一样——路漫漫其修远兮，吾将上下而求索。</strong></p><h2 id="万物始于-Emacs"><a class="header-anchor" href="#万物始于-Emacs"></a>万物始于 Emacs</h2><p>最早知道 <strong>Emacs</strong> 是从编辑器的圣战开始的，即编辑器之神——Vi，和神的编辑器——Emacs。两个编辑器在经历了几十年的战争之后，仍然是编辑世界不可超越的高峰。</p><p>但在一开始，我选择的是 Vi，因为在 <strong>*nix</strong> 中，都是有安装的，在服务器编辑文件——即使是很大的文件，Vi 也可以非常轻易的打开编辑，在一段时间内，我几乎是跪着使用 Vi 的。</p><p>后来随着想用的功能越来越多，而 Vi 只能做为编辑器使用，再加上被一些大神安利，我就选择尝试使用 Emacs 来<sub>装逼</sub>记笔记。于是下载了当时正流行的 <em>Purcell</em> 大神的配置，并开始尝试使用，不过没过多少就放弃了。</p><p>期间阅读了许多入门学习的内容，对 Emacs 有了一个大概的了解。</p><p>推荐阅读内容：</p><ul><li><a href="https://github.com/redguardtoo/mastering-emacs-in-one-year-guide/blob/master/guide-zh.org" target="_blank" rel="noopener">《一年成为 Emacs 高手（像神一样使用编辑器）》</a></li><li><a href="https://github.com/bbatsov/prelude" target="_blank" rel="noopener">Prelude 入门级 Emacs 配置</a></li><li><a href="https://github.com/purcell/emacs.d" target="_blank" rel="noopener">Purcell 大神的配置</a></li></ul><h2 id="Emacs-始于-Org"><a class="header-anchor" href="#Emacs-始于-Org"></a>Emacs 始于 Org</h2><p>Emacs 学习的无疾而终，让我的装逼大计一度沉沦。直到我开始尝试利用 <strong>Org-mode</strong> 进行博客写和作日程管理，阅读了一些文章之后，才真正开始了 Emacs 的学习苦旅。</p><p>如果说 Emacs 是神的编辑器的话， <strong>Org</strong> 可能是神器之中的神器，随着对 Org 的学习和使用，我从最初的装逼，到后来的<sub>逼格提升</sub>真正开始利用Emacs，都是因为Org-mode 。</p><p>推荐阅读内容：</p><ul><li><a href="https://github.com/mudan/mudan.github.io/blob/master/Emacs/The%5FOrg%5FManual/The%5FOrg%5FManual.org" target="_blank" rel="noopener">mudan 大神的 Org-mode 入门级手册</a></li><li><a href="https://github.com/mudan/mudan.github.io/blob/master/read/dx.org" target="_blank" rel="noopener">mudan 大神的漂亮的文言文排版</a></li><li><a href="http://forrestchang.com/14824097554043.html" target="_blank" rel="noopener">Tisoga 大神的 Org + GitHub 的博客教学</a></li></ul><h2 id="终于-Spacemacs-的战争"><a class="header-anchor" href="#终于-Spacemacs-的战争"></a>终于 Spacemacs 的战争</h2><p>从最开始的学习，到现在已经习惯于使用 Emacs ，主要因为其确实是可以提升效率的，当然这里要把配置时间拿走。虽然开始使用的原因有所不同，但是大家最后的目标却都是一样的——即提高工作（学习）效率。</p><p>但是经过了 Emacs 几次强行配置之后，学习了一些 Emacs 的填坑方案。</p><p>后来加入了一个 Emacs 的微信群——毫不夸张的说，这是我加入过的群里面质量最高的，学习效果最好的，而且所有的成员都自发的维护群里的闲聊问题，每一次讨论都是提问解决和讨论的过程。</p><p>在偶然的一次机会，被安利了一把 Spacemacs，Vi 的操作加上 Emacs 的扩展，不要太吸引人！</p><p>推荐关注的大神：</p><ul><li><a href="https://github.com/hick" target="_blank" rel="noopener">Hick</a> 高质量 <strong>Emacs</strong> 微信群群主，应该也是发起人，水的人自觉加入闲聊群，是我所有技术相关微信群中质量最高的。</li><li><a href="https://github.com/zilongshanren" target="_blank" rel="noopener">子龙山人</a> <strong>Spacemacs Rock</strong> 视频作者，我的配置里抄的最多的就是这位大神的。</li><li><a href="https://github.com/lujun9972" target="_blank" rel="noopener">DarkSun</a>  黑日大神，大神的文章非常多，而且质量都非常高，还维护着一个 Emacs 推广相关的项目，多读读，可以找到一些自己需要的配置。</li><li><a href="https://github.com/tumashu" target="_blank" rel="noopener">tumashu</a> 天然二呆，呆神，之前看到呆神在闲聊群里水，后来又看到呆神在帮忙解决问题，好奇的关注了一下 GitHub ，才发现，竟然这几个好用的 package 都是呆神写的，而且呆神竟然不是<sub>程序员</sub>靠程序吃饭！</li></ul><p>大神太多了，不一一推荐，如果需要，可以联系 Hick 加一下群，就都有了。</p><p>再推荐一下中文的 Emacs 论坛，可以提问，也可以讨论：</p><ul><li><a href="https://emacs-china.org" target="_blank" rel="noopener">Emacs China</a> 一堆大神在维护的论坛，经常看看，非常好用。</li></ul><h2 id="我的-Emacs-配置"><a class="header-anchor" href="#我的-Emacs-配置"></a>我的 Emacs 配置</h2><h3 id="初始"><a class="header-anchor" href="#初始"></a>初始</h3><p>为了更好管理配置，推荐使用 <strong>.spacemacs.d</strong> 文件夹进行管理配置，而不是使用 <strong>.spacemacs</strong> 文件。也为了方便后续的扩展。</p><h3 id="可能会遇到的问题"><a class="header-anchor" href="#可能会遇到的问题"></a>可能会遇到的问题</h3><p>如果是在 Windows 下使用，需要注意几个问题：</p><ol><li>推荐用编译版本，或者用官方网站加部分 <em>.dll</em> 文件来解决</li><li>使用过程中，为了配置的时候好用——更适合 Linux，我是使用在环境变量中增加默认的 <em>HOME</em> 的方案，也可以使用其它方法</li><li>直接下载就可以使用，维护的是 <em>develop</em> 分支，后续会慢慢往 <em>master</em> 分支中合并</li></ol><h3 id="最终选择"><a class="header-anchor" href="#最终选择"></a>最终选择</h3><p>在几经周折之后，最后还是选择自己从头开始配置一套 <strong>.emacs.d</strong> ，主要是因为以下几个问题：</p><ol><li>随着使用的人越来越多，维护的东西也越来越多，项目太大了</li><li>最终希望的是使用 Vi 的快捷键方案，可以使用 <code>evil-mode</code> 来替代</li><li>个人使用的特性话的内容太多，完全引用项目不如借鉴项目的配置方案</li></ol><p><a href="https://github.com/AboutEmacs/.emacs.d" target="_blank" rel="noopener">我的 emacs 原生配置</a></p><h3 id="我的博客地址"><a class="header-anchor" href="#我的博客地址"></a>我的博客地址</h3><p>如果想看我的博客，可以访问：<a href="https://www.zucchiniy.cn">hugo博客</a> 或者 <a href="https://zcodingtime.github.io" target="_blank" rel="noopener">hexo博客</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 生活总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> Emacs </tag>
            
            <tag> org mode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 数据库设置远程权限</title>
      <link href="/archives/43555396.html"/>
      <url>/archives/43555396.html</url>
      
        <content type="html"><![CDATA[<h2 id="设置访问单个数据库权限"><a class="header-anchor" href="#设置访问单个数据库权限"></a>设置访问单个数据库权限</h2><ul><li>设置用户名为 root，密码为空，可以访问数据库 test</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash">grant all privileges on <span class="built_in">test</span>.* to <span class="string">'root'</span>@<span class="string">'%'</span>;</span></span><br></pre></td></tr></table></figure><h2 id="设置访问全部数据库权限"><a class="header-anchor" href="#设置访问全部数据库权限"></a>设置访问全部数据库权限</h2><ul><li>设置用户名为 root，密码为空，可以访问所有数据库</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash">grant all privileges on *.* to <span class="string">'root'</span>@<span class="string">'%'</span>;</span></span><br></pre></td></tr></table></figure><h2 id="设置指定用户名访问权限"><a class="header-anchor" href="#设置指定用户名访问权限"></a>设置指定用户名访问权限</h2><ul><li>指定用户名为 liuhui，密码为空，可以访问所有数据库</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash">grant all privileges on *.* to <span class="string">'liuhui'</span>@<span class="string">'%'</span>;</span></span><br></pre></td></tr></table></figure><h2 id="设置密码访问权限"><a class="header-anchor" href="#设置密码访问权限"></a>设置密码访问权限</h2><ul><li>设置用户名为 liuhui，密码为 liuhui，可以访问所有数据库</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash">grant all privileges on *.* to <span class="string">'liuhui'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'liuhui'</span>;</span></span><br></pre></td></tr></table></figure><h2 id="设置指定可访问主机权限"><a class="header-anchor" href="#设置指定可访问主机权限"></a>设置指定可访问主机权限</h2><ul><li>设置用户名为 liuhui，密码为 liuhui，可以访问所有数据库，只有 10.1.1.1 这台机器有权限访问</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash">grant all privileges on *.* to <span class="string">'liuhui'</span>@<span class="string">'10.1.1.1'</span>;</span></span><br></pre></td></tr></table></figure><h2 id="设置对应的密码级别"><a class="header-anchor" href="#设置对应的密码级别"></a>设置对应的密码级别</h2><ul><li>参数解释<ul><li><code>validate_password_dictionary_file</code>: 用于难密码强度的字典文件路径</li><li><code>validate_password_length</code>: 密码最小长度，参数默认为 8，</li><li><code>validate_password_mixed_case_count</code>: 密码至少要包含的小写字母个数和大写字母个数</li><li><code>validate_password_number_count</code>: 密码至少要包含的数字个数</li><li><code>validate_password_policy</code>: 密码强度难 0/LOW 1/MEDIUM 2/STRONG</li><li><code>validate_password_special_char_count</code>: 密码至少要包含的特殊字符数</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash">show variables like <span class="string">'validate_password%'</span>;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后台技术 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> grant privileges </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 基础命令</title>
      <link href="/archives/c5f0918d.html"/>
      <url>/archives/c5f0918d.html</url>
      
        <content type="html"><![CDATA[<h2 id="新建代码库"><a class="header-anchor" href="#新建代码库"></a>新建代码库</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">在当前目录新建一个 git 代码库</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git init</span></span><br><span class="line"><span class="meta">#</span><span class="bash">新建一个目录，将其初始化为 git 代码库</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git init [project-name]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">下载一个项目和它的整个代码历史</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> [url]</span></span><br></pre></td></tr></table></figure><h2 id="全局配置和项目配置"><a class="header-anchor" href="#全局配置和项目配置"></a>全局配置和项目配置</h2><p>git 的设置文件为 <code>.gitconfig</code> ，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">显示当前 git 配置</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --list</span></span><br><span class="line"><span class="meta">#</span><span class="bash">编辑 git 配置文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config -e [--global]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">设置提交代码时的用户信息</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config [--global] user.name <span class="string">"[name]"</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config [--global] user.email <span class="string">"[email address]"</span></span></span><br></pre></td></tr></table></figure><h2 id="增加-删除文件"><a class="header-anchor" href="#增加-删除文件"></a>增加/删除文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">添加指定文件到暂存区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git add [file1] [file2] ...</span></span><br><span class="line"><span class="meta">#</span><span class="bash">添加指定目录到暂存区，包括子目录</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git add [dir]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">添加当前目录的所有文件到暂存区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git add .</span></span><br><span class="line"><span class="meta">#</span><span class="bash">删除工作区文件，并且将这次删除放入到暂存区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git rm [file1] [file2] ...</span></span><br><span class="line"><span class="meta">#</span><span class="bash">停止追踪指定文件，但该文件会保留在工作区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git rm --cached [file]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">改名文件，并将这个改名放入暂存区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git mv [file-original] [file-renamed]</span></span><br></pre></td></tr></table></figure><h2 id="代码提交"><a class="header-anchor" href="#代码提交"></a>代码提交</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">提交暂存区到仓库区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -m [message]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">提交暂存区的指定文件到仓库区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit [file1] [file2] ... -m [message]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">提交工作区自上次 commit 之后的变化，直接到仓库区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -a</span></span><br><span class="line"><span class="meta">#</span><span class="bash">提交时显示所有 diff 信息</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -v</span></span><br><span class="line"><span class="meta">#</span><span class="bash">使用一次新的 commit,替代上一次提交</span></span><br><span class="line"><span class="meta">#</span><span class="bash">如果代码没有变化，则用来改写上一次的 commit 的提交信息</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit --amend -m [message]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">重做上一次 commit, 并包括指定文件的新变化</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit --amend [file1] [file2] ...</span></span><br></pre></td></tr></table></figure><h2 id="分支"><a class="header-anchor" href="#分支"></a>分支</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">列出所有本地分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch</span></span><br><span class="line"><span class="meta">#</span><span class="bash">列出所有远程分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch -r</span></span><br><span class="line"><span class="meta">#</span><span class="bash">列出所有本地分支和远程分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch -a</span></span><br><span class="line"><span class="meta">#</span><span class="bash">新建一个分支，但依然停留在当前分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch [branch-name]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将原有分支名称 old branch name 修改为 new name</span></span><br><span class="line">git branch -m &lt;old branch name&gt; &lt;new name&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改当前分支名称为 new name</span></span><br><span class="line">git branch -m &lt;new name&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash">新建一个分支，并切换到当该分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout -b [branch-name]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">新建一个分支，指向指定 commit</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch [branch] [commit]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">新建一个分支，与指定的远程分支建立追踪关系</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch --track [branch] [remote-branch]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">切换到指定分支，并更新工作区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout [branch-name]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">建立追踪关系，在现有分支与指定的远程分支之前</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch --<span class="built_in">set</span>-upstream [branch] [remote-branch]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">合并指定分支到当前分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git merge [branch]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">选择一个 commit,合并进当前分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git cherry-pick [commit]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">删除分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch -d [branch-name]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">删除远程分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push origin --delete [branch-name]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">删除与远程分支关联</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch -dr [remote/branch]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">删除远程分支 2</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch -r -d origin/[branch-name]</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push origin :[branch-name]</span></span><br></pre></td></tr></table></figure><h2 id="标签"><a class="header-anchor" href="#标签"></a>标签</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">列出所有 tag</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git tag</span></span><br><span class="line"><span class="meta">#</span><span class="bash">在当前 commit，新建一个 tag</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git tag [tag]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">在指定 commit，新建一个 tag</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git tag [tag] [commit]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">删除本地 tag</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git tag -d [tag]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">删除远程 tag</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push origin :refs/tags/[tagName]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">查看 tag 信息</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git show [tag]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">提交指定的 tag</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push [remote] [tag]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">提交所有 tag</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push [remote] --tags</span></span><br><span class="line"><span class="meta">#</span><span class="bash">新建一个分支，指向某个 tag</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout -b [branch] [tag]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">重命名 tag</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git tag -f [new-tagName] [old-tagName]</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git tag -d [old-tagName]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">将本地 tag 推送到远程</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push origin :refs/tags/[old-tagName]</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push --tags</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 拉取 tag</span></span><br><span class="line">git fatch origin tag tag_name</span><br></pre></td></tr></table></figure><h2 id="查看信息"><a class="header-anchor" href="#查看信息"></a>查看信息</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">显示所有变更的文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git status</span></span><br><span class="line"><span class="meta">#</span><span class="bash">显示当前分支的版本历史</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">显示 commit 历史，以及每次 commit 发生变更的文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> --<span class="built_in">stat</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">显示某个 commit 之后的所有变动，每个 commit 占据一行</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> [tag] HEAD --pretty=format:%s</span></span><br><span class="line"><span class="meta">#</span><span class="bash">显示某个 commit 之后的所有变动，其“提交说明”必须符合条件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> [tag] HEAD --grep feature</span></span><br><span class="line"><span class="meta">#</span><span class="bash">显示某个文件的版本历史，包括文件改名</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> --follow [file]</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git whatchanged [file]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">显示指定文件相关的每一次 diff</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> -p [file]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">显示指定文件是什么人在什么时间修改过</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git blame [file]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">显示暂存区与工作区的差异</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff</span></span><br><span class="line"><span class="meta">#</span><span class="bash">显示暂存区和上一个 commit 的差异</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff --cached [file]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">显示工作区与当前分支最新 commit 之间的差异</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff HEAD</span></span><br><span class="line"><span class="meta">#</span><span class="bash">显示两次提交之间的差异</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff [first-branch] ... [second-branch]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">显示某次提交的元数据和内容变化</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git show [commit]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">显示某次提交发生的变化的文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git show --name-only [commit]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">显示某次提交时，某个文件的内容</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git show [commit]:[filename]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">显示当前分支的最近几次提交</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git reflog</span></span><br></pre></td></tr></table></figure><h2 id="远程同步"><a class="header-anchor" href="#远程同步"></a>远程同步</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">下载运程仓库的所有变动</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git fetch [remote]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">显示所有远程分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote -v</span></span><br><span class="line"><span class="meta">#</span><span class="bash">显示某个远程仓库的信息</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote show [remote]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">增加一个新的远程仓库，并命名</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote add [shortname] [url]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">取回远程仓库的变化，并与本地分支合并</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git pull [remote] [branch]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">上传本地指定分支到远程仓库</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push [remote] [branch]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">强行推送当前分支到远程仓库，即使有冲突</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push [remote] --force</span></span><br><span class="line"><span class="meta">#</span><span class="bash">推送所有分支到远程仓库</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push [remote] --all</span></span><br></pre></td></tr></table></figure><h2 id="修改远程仓库地址"><a class="header-anchor" href="#修改远程仓库地址"></a>修改远程仓库地址</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 先删除远程分支地址</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote rm origin</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 然后重新增加远程分支地址</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote add origin [url]</span></span><br></pre></td></tr></table></figure><h2 id="撤销"><a class="header-anchor" href="#撤销"></a>撤销</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">恢复暂存区的指定文件到工作区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout [file]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">恢复某个 commit 的指定文件到工作区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout [commit] [file]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">恢复上一个 commit 的所有文件到工作区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout .</span></span><br><span class="line"><span class="meta">#</span><span class="bash">重置暂存区的指定文件，与上一次 commit 保持一致，但工作区不变</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git reset [file]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">重置暂存区与工作区，与上一次 commit 保持一致</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git reset --hard</span></span><br><span class="line"><span class="meta">#</span><span class="bash">重置当前分支的指针为指定 commit，同时重置暂存区，但工作区不变</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git reset [commit]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">重置当前分支的 HEAD 为指定 commit，同时重置暂存区和工作区，与指定 commit 一致</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git reset --hard [commit]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">重置当前 HEAD 为指定 commit，但保持暂存区和工作区不变</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git reset --keep [commit]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">新建一个 commit, 用来撤销指定 commit</span></span><br><span class="line"><span class="meta">#</span><span class="bash">后者的所有变化都将被前者抵消，并且应用到当前分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git revert [commit]</span></span><br></pre></td></tr></table></figure><h2 id="其它"><a class="header-anchor" href="#其它"></a>其它</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">生成一个可供发布的压缩包</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git archive</span></span><br></pre></td></tr></table></figure><h2 id="git-提升内容"><a class="header-anchor" href="#git-提升内容"></a>git 提升内容</h2><ul><li>储藏暂存内容</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 想要切换分支，但是还不想要提交之前的工作，可以储存修改信息，将新的储藏推送到栈上</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git stash / git stash save</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在这时，能够轻易的切换分支并在其他地方工作，你的修改被存储在栈上。要查看储藏的东西，可以使用 git stash list</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git stash list</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 可以将刚刚的储藏重新加载回来</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git stash apply</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 也可以通过储藏的序号进行加载</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git stash apply stash@&#123;1&#125;</span></span><br></pre></td></tr></table></figure><ul><li>核武器级选项 filter-branch</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 从每一个提交移除一个文件：指 git add . 的内容完整的上传到仓库，但是当希望开源这个内容的时候，需要移除一些无用的文件，--tre-filter 选项在的每一个提交后，运行指定的命令，然后重新提交结果。</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git filter-branch --tree-filter <span class="string">'rm -f passwords.txt'</span> HEAD</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使一个子目录作为新的根目录：假设已经从另一个源代码控制系统中导入，并且有几个没意义的子目录（trunk/tags 等等）。如果想要让 trunk 子目录作为每一个提交的新的项目根目录，filter-branch 也可以帮助你那么做，再在新项目根目录是 trunk 子目录且 Git 会自动移除所有不影响子目录的提交。</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git filter-branch --subdirectory-filter trunk HEAD</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在开始工作时忘记运行 git config 来设置你的名字与邮箱地址，或者你想要开源一个项目，并且修改所有你的工作邮箱地址为你的个人邮箱地址。任何情形下，你也可以通过 filter-branch 来一次性修改多个提交中的邮箱地址。需要小心的是只修改你自己的邮箱地址，所以使用 --commit-filter 来修改：</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git filter-branch --commit-filter <span class="string">'</span></span></span><br><span class="line">    if [ "$GIT_AUTHOR_EMAIL" = "schacon@localhost" ];</span><br><span class="line">    then</span><br><span class="line">        GIT_AUTHOR_NAME = "scott Chacon";</span><br><span class="line">        GIT_AUTHOR_EMAIL = "schacon@example.com";</span><br><span class="line">        git commit-tree "$@";</span><br><span class="line">    else</span><br><span class="line">        git commit-tree "$@";</span><br><span class="line">    fi' HEAD</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> command </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Emacs 快捷键使用</title>
      <link href="/archives/9951df45.html"/>
      <url>/archives/9951df45.html</url>
      
        <content type="html"><![CDATA[<ul><li>设置 Emacs 的默认编码格式</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(prefer-coding-system &#39;utf-8-unix)</span><br></pre></td></tr></table></figure><ul><li>改变文件编码格式</li></ul><p><code>C-x C-m f utf-8-unix RET</code> : 将当前文件转换为 <strong>utf-8</strong> 编码</p><p><code>C-x C-m c RET C-x C-w RET</code> : 将当前文件另存为指定编码</p><ul><li>查看需要的库文件</li></ul><p><code>M-: image-library-alist RET</code> : 查看 <strong>emacs</strong> 支持需要的库文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">((xpm "libxpm.dll" "xpm4.dll" "libXpm-nox4.dll")</span><br><span class="line">(png "libpng16.dll" "libpng16-16.dll")</span><br><span class="line">(tiff "libtiff-5.dll" "libtiff3.dll" "libtiff.dll")</span><br><span class="line">(jpeg "libjpeg-9.dll")</span><br><span class="line">(gif "libgif-7.dll")</span><br><span class="line">(svg "librsvg-2-2.dll")</span><br><span class="line">(gdk-pixbuf "libgdk_pixbuf-2.0-0.dll")</span><br><span class="line">(glib "libglib-2.0-0.dll")</span><br><span class="line">(gobject "libgobject-2.0-0.dll")</span><br><span class="line">(gnutls "libgnutls-28.dll" "libgnutls-26.dll")</span><br><span class="line">(libxml2 "libxml2-2.dll" "libxml2.dll")</span><br><span class="line">(zlib "zlib1.dll" "libz-1.dll"))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Emacs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> coding system </tag>
            
            <tag> image library </tag>
            
            <tag> keybind </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 工作流</title>
      <link href="/archives/fea0ccee.html"/>
      <url>/archives/fea0ccee.html</url>
      
        <content type="html"><![CDATA[<h2 id="中心化的工作流"><a class="header-anchor" href="#中心化的工作流"></a>中心化的工作流</h2><h3 id="优势"><a class="header-anchor" href="#优势"></a>优势</h3><ul><li>首先它让每个开发者都有自己的本地的完整项目副本。隔离的环境使得每个开发都的工作独立于项目的其它修改 —— 他们可以在自己的本地仓库中添加提交，完全无视上游的开发，直到需要的时候。</li><li>其次，它让你接触到了 Git 分支和合并模型。Git 分支被设计为故障安全的机制，用来在仓库之间整合代码和共享更改。</li></ul><h3 id="如何工作"><a class="header-anchor" href="#如何工作"></a>如何工作</h3><ul><li>中心化的工作将中央仓库作为项目中所有修改的唯一入口。默认的开发分支叫做 master，所有的更改都被提交到这个分支。这种工作流不需要 master 之外的其它分支。</li><li>开发者将中央仓库克隆到本地后开始工作。在他们的本地项目副本中，他们可以像 SVN 一样修改文件和提交更改；不过这些新的提交被保存在本地 —— 它们和中央仓库完全隔离。这使得开发者可以将和上游的同步推迟到他们方便的时候。</li><li>为了向官方项目发布修改，开发者将他们本地 master 分支“推送”到中央仓库。这一步等同于 svn commit，除了 Git 添加的是所有不在中央 master 分支上的提交。</li></ul><img src="https://cdn.jsdelivr.net/gh/zucchiniy/blog-assets@master/images/git-images-01.png" class=""><h3 id="管理冲突"><a class="header-anchor" href="#管理冲突"></a>管理冲突</h3><ul><li>中央仓库代码官方项目，因此它的提交历史应该被视为不可更改的。如果开发者的本地提交和中央仓库分叉了，Git 会拒绝将它们的修改推送上去，因为这会覆盖官方提交。</li></ul><img src="https://cdn.jsdelivr.net/gh/zucchiniy/blog-assets@master/images/git-images-02.png" class=""><ul><li>在开发在提交功能之前，需要 fetch 更新中央提交，在它们之上 rebase 自己的更改。</li><li>如果本地修改和上游提交的冲突时，Git 会暂停 rebase 流程，给你机会手工解决这些冲突。Git 很赞的一点是，它将 git status 和 git add 命令同时用来生成提交和解决合并冲突。这使得开发能够轻而易举的管理他们的合并。另外，如果他们改错了什么，Git 能让他们轻易的退出 rebase 过程，然后重试。</li></ul><h3 id="例子"><a class="header-anchor" href="#例子"></a>例子</h3><ul><li><p>项目管理员生成一个空的版本库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh user@host git init --bare /path/to/repo.git</span><br></pre></td></tr></table></figure></li><li><p>三个人 A, B, C 同时编写同一个项目，需要先在本地创建一个完整的项目副本。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone ssh://user@host/path/to/repo.git</span><br></pre></td></tr></table></figure></li></ul><p>此时，Git 自动添加了一个名为 origin 的运程连接，指向中央仓库，以方便提交。<br>A 可以使用标准 Git 提交流程开发功能：编辑、缓存、提交。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br><span class="line">git add &lt;some file&gt;</span><br><span class="line">git commit</span><br></pre></td></tr></table></figure><p>同时，B 也在本地进行自己的开发工作。</p><ul><li><p>A 发布了他们修改</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure></li></ul><p>此时中央仓库会将 master -&gt; origin/master</p><ul><li><p>B 试图发布修改</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure></li></ul><p>但是因为 A 已经提交了功能到中央仓库，导致 B 的本地历史和中央仓库分叉，Git 会拒绝本次提交。</p><ul><li>B 如果想提交，必须要先 rebase 本地仓库</li></ul><p>可以使用 git pull 来拉取并修改，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull --rebase origin master</span><br></pre></td></tr></table></figure><ul><li>–rebase 命令告诉 Git，在同步中央仓库的修改之后，将 B 的所有提交移到 master 分支的顶端。</li></ul><img src="https://cdn.jsdelivr.net/gh/zucchiniy/blog-assets@master/images/git-images-02.png" class=""><ul><li><p>如果没有冲突的文件，B 就可以直接进行提交了，但是如果存在冲突，可以根据提示查找冲突的文件，修改之后，可以继续 rebase 操作。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;some-file&gt;</span><br><span class="line">git rebase --continue</span><br></pre></td></tr></table></figure></li></ul><p>同样的，如果此时不知道自己做了什么，可以回滚一次操作。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase --abort</span><br></pre></td></tr></table></figure><ul><li>然后再进行 push 就可以提交到中央版本库了。</li></ul><h2 id="基于功能人分支的工作流"><a class="header-anchor" href="#基于功能人分支的工作流"></a>基于功能人分支的工作流</h2><h3 id="Feature-分支工作流"><a class="header-anchor" href="#Feature-分支工作流"></a>Feature 分支工作流</h3><ul><li>掌握了中心化工作流的使用姿势，在你的开发流程中添加功能分支是一个简单的方式，来促进协作和开发者之间的交流。这种封装使得多个开发专注自己的功能，而不会打扰主代码库。它还能保证 master 分支永远不会包含损坏的代码，给持续集成环境带来了很大的好处。</li><li>封装功能的开发使得 pull request 的使用成为可能，用来启动围绕一个分支的讨论。它给了其他开发者在功能并入主项目之前参与决策的机会。或者，如果你开发功能时卡在一半，可以发起一个 pull request，向同事寻求建议。重点是：pull request 使得团队在评论其他人的工作时，变得非常简单。</li></ul><h3 id="如何工作-2"><a class="header-anchor" href="#如何工作-2"></a>如何工作</h3><ul><li>Feature 分支工作流同样使用中央仓库，master 同样代码官方的项目历史。但是与其直接提交在本地的 master 分支，开发者每次进行新的工作时创建一个新的分支。Feature 分支应该包含描述性的名称，比如 animated-menu-items(菜单项动画)或 issue-*1061。每个分支都应该有一个清晰、高度集中的目的。</li><li>Git 在技术上无法区别 master 和功能分支，所以开发者可以在 feature 分支上编辑、缓存、提交，就和中心化工作流中一样。</li><li>此外，feature 分支可以被推送到中央仓库。这使得你和其他开发者共享这个功能，而又不改变官方代码。既然 master 只是一个“特殊”的分支，在中央仓库中储存多个 feature 分支不会引出什么问题。当然，这也是备份每个开发者本地提交的好办法。</li></ul><h3 id="Pull-Request"><a class="header-anchor" href="#Pull-Request"></a>Pull Request</h3><ul><li>除了隔离功能开发之外，分支使得通过 pull request 讨论修改成为可能。一旦有人完成了一个功能，他们不会立即将它并入 master。他们将 feature 分支推送到中央服务器上，发布一个 pull request，请求将他们的修改并入 master。这给了其他开发者在修改并入主代码库之前审查的机会。</li><li>代码审查是 pull request 的主要好处，但他们事实上被设计成为讨论代码的一般场所。你可以把 pull request 看作是专注某个分支的讨论版。也就是说他们可以用于开发流程之前。比如，一个开发者在某个功能上需要帮助，他只需要发起一个 pull request。感兴趣的小伙伴会自动收到通知，看到相关提交中的问题。</li><li>一旦 pull request 被接受了，发布功能的行为和中心化的工作流是一样的。首先，确定你本地的 master 和上游的 master 已经同步。然后，将 feature 分支并入 master 已经同步。然后可以将 feature 分支并入 master，将更新的 master 推送回中央仓库。</li></ul><h2 id="Gitflow-工作流"><a class="header-anchor" href="#Gitflow-工作流"></a>Gitflow 工作流</h2><ul><li>GitFlow 工作流围绕项目发布定义了一个严格的分支模型。有些地方比功能分支工作流更复杂，为管理大型项目提供了框架。</li><li>和功能分支工作流相比，这种工作流没有增加任何新的概念或命令。它给不同的分支指定了特定的角色，定义它们应该如何、什么时候交流。除了功能分支之外，它还为准备发布、维护发布、记录发布分别使用了单独的分支。当然，还能享受到功能分支工作流带来的所有好处：pull request、隔离实验和更高效的协作。</li></ul><h3 id="如何工作-3"><a class="header-anchor" href="#如何工作-3"></a>如何工作</h3><ul><li>GitFlow 工作流仍然使用中央仓库作为开发者沟通的中心。和其它工作流一样，开发者在本地工作，将分支推送到中央仓库。唯一的区别在于项目的分支结构。</li></ul><h4 id="历史分支"><a class="header-anchor" href="#历史分支"></a>历史分支</h4><ul><li>和单独的 master 分支不同，这种工作流使用两个分支来记录项目历史。master 分支储存官方发布历史，develop 分支用来整合功能分支。同时，这还方便了在 master 分支上给所有提交打上版本号标签。</li></ul><img src="https://cdn.jsdelivr.net/gh/zucchiniy/blog-assets@master/images/git-images-02.png" class=""><ul><li>工作流剩下的部分围绕这两个分支的差别展开。</li></ul><h4 id="功能分支"><a class="header-anchor" href="#功能分支"></a>功能分支</h4><ul><li>每个新功能都放置在自己的分支中，可以在备份/协作时推送到中央仓库。但是与其合并到 master，功能分支将开发分支作为父分支。当一个功能完成时，它将被合并回 develop。功能永远不应该支持在 master 上交互。</li></ul><img src="https://cdn.jsdelivr.net/gh/zucchiniy/blog-assets@master/images/git-images-02.png" class=""><ul><li>功能分支加上 develop 分支就是我们之前据说的功能分支工作流。</li></ul><h4 id="发布分支"><a class="header-anchor" href="#发布分支"></a>发布分支</h4><img src="https://cdn.jsdelivr.net/gh/zucchiniy/blog-assets@master/images/git-images-02.png" class=""><ul><li>一旦 develop 分支的新功能足够发布，你可以从 develop 分支 fork 一个发布分支。这个分支的创建开始了下个发布周期，只有和发布相关的任务应该在这个分支进行，如修复 bug、生成文档等。一旦准备好发布，发布分支将合并进 master，打上版本号的标签。另外，它也应该合并回 develop，后者可能在发布启动之后有了新的进展。</li><li>使用一个专门的分支来准备发布确保一个团队完善当前的发布，其它团队可以继续开发下一个发布的功能。它还建立了清晰的开发阶段。</li><li>通常约定：<ul><li>从 develop 创建分支</li><li>合并进 master 分支</li><li>命名规范 release-* 或者 release/*</li></ul></li></ul><h4 id="维护分支"><a class="header-anchor" href="#维护分支"></a>维护分支</h4><img src="https://cdn.jsdelivr.net/gh/zucchiniy/blog-assets@master/images/git-images-02.png" class=""><ul><li>维护或者“紧急修复”分支用来快速给产品发布打上补丁。这是唯一可以从 master 上 fork 的分支。一旦修复完成了，它应该被并入 master 和 develop 分支，master 应该打上更新的版本号的标签。</li><li>有一个专门的 bug 修复开发线使得团队能够处理 issue，而不打断其它工作流或是要等到下一个发布周期。你可以将维护分支看作在 master 分支上工作的临时发布分支。</li></ul><h3 id="例子-2"><a class="header-anchor" href="#例子-2"></a>例子</h3><h4 id="创建一个开发分支"><a class="header-anchor" href="#创建一个开发分支"></a>创建一个开发分支</h4><ul><li><p>为默认的 master 分支创建一个互补的 develop 分支。最简单的办法是在本地创建一个空的 develop 分支，将他推送到服务器上：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch develop</span><br><span class="line">git push -u origin develop</span><br></pre></td></tr></table></figure></li><li><p>这个分支将会包含项目中所有的历史，而 master 将包含不完全的版本。其他开发者应该将中央仓库克隆到本地，创建一个分支来追踪 develop 分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone http://xxx/xx/repo.git</span><br><span class="line">git checkout -b develop origin/develop</span><br></pre></td></tr></table></figure></li></ul><h4 id="开始了新的功能"><a class="header-anchor" href="#开始了新的功能"></a>开始了新的功能</h4><ul><li><p>当两个人都需要在不同分支上开始工作，即为自己的功能创建单独的分支。且他们的分支都是基于 develop 而不是 master：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b some-feature develop</span><br></pre></td></tr></table></figure></li><li><p>他们都使用“编辑、缓存、提交”的一般约定来向功能分支添加提交：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br><span class="line">git add &lt;some-file&gt;</span><br><span class="line">git commit</span><br></pre></td></tr></table></figure></li></ul><h3 id="完成功能"><a class="header-anchor" href="#完成功能"></a>完成功能</h3><ul><li><p>添加了一些提交后，可以使用 pull request，现在正是发起的好时机，请求将新功能并入 develop 分支。否则可以先并入本地的 develop 分支，推送到中央仓库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git pull origin develop</span><br><span class="line">git checkout develop</span><br><span class="line">git merge some-feature</span><br><span class="line">git push</span><br><span class="line">git branch -d some-feature</span><br></pre></td></tr></table></figure></li><li><p>第一个命令在尝试并入功能分支之前确保 develop 分支已经是最新的。注意，功能绝不该直接并入 master。冲突的处理方式和中心化工作流相同。</p></li></ul><h3 id="发布新功能"><a class="header-anchor" href="#发布新功能"></a>发布新功能</h3><ul><li><p>当另外的开发人员，仍在他自己的分支上工作时，开始准备项目的第一个官方发布。和开发功能一样，新建一个分支来封装发布的准备工作。这也正是发布的版本号创建的第一步：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b release-0.1 develop</span><br></pre></td></tr></table></figure></li><li><p>这个分支用来整理提交，充分测试，更新文档，为即将到来的发布做各种准备。它就像是一个专门用来完善发布的功能分支。</p></li><li><p>一旦发布准备稳妥，即将其并入 master 和 develop，然后删除发布分支。合并回 develop 很重要，因为可能已经有关键的更新添加到发布分支上，而开发新功能需要用到它们。同样的，如果团队重视代码审查，现在将是发起 pull request 的完美时机。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git merge release-0.1</span><br><span class="line">git push</span><br><span class="line">git checkout develop</span><br><span class="line">git merge release-0.1</span><br><span class="line">git push</span><br><span class="line">git branch -d release-0.1</span><br></pre></td></tr></table></figure></li><li><p>发布分支是功能开发（develop）分支和公开发布（master）之间的过渡阶段。不论什么时候，将提交并入 msater 时，你应该为提交打上方便引用的标签：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git tag -a 0.1 -m "Initial public release" master</span><br><span class="line">git push --tags</span><br></pre></td></tr></table></figure></li><li><p>Git 提供了许多钩子，即仓库中特定事件发生时被执行的脚本。当你向中央仓库推送 master 分支或者标签时，你可以配置一个钩子来自动化构建公开发布。</p></li></ul><h3 id="终端用户发现一个-Bug"><a class="header-anchor" href="#终端用户发现一个-Bug"></a>终端用户发现一个 Bug</h3><ul><li><p>正式发布之后，两个开发一起为下一个发布开发功能。这时，一个终端用户开了一个 issue 抱怨说当前发布中存在一个 Bug。为了解决这个 bug，先从 master 创建一个维护分支，用几个提交修复这个 issue，然后直接合并回 master。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b issue*001 master</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#Fix the bug</span></span></span><br><span class="line">git checkout master</span><br><span class="line">git merge issue-*001</span><br><span class="line">git push</span><br></pre></td></tr></table></figure></li><li><p>和发布分支一样，维护分支包含了 develop 中需要的重要更新，因此需要执行同样的合并。接下来，可以删除这个分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git checkout develop</span><br><span class="line">git merge issue-*001</span><br><span class="line">git push</span><br><span class="line">git branch -d issue-*001</span><br></pre></td></tr></table></figure></li></ul><h3 id="各分支的意义"><a class="header-anchor" href="#各分支的意义"></a>各分支的意义</h3><ul><li>feature (多个) 主要是自己玩了，差不多的时候要合并回 develop 去。不与 master 交互。</li><li>develop (同时间一个) 主要是和 feature 以及 release 交互</li><li>release (同时间一个) 总是基于 develop，最后又合并回 develop。当然对应的 tag 要合并到 master 分支，生命周期短，仅是为了发布程序</li><li>hotfix (同一时间一个) 总是基于 master，并最后合并到 master 和 develop。生命同期较短，用来修复 bug 或小粒度修改发布</li><li>master (仅一个) 关联 tag 和发布</li></ul><h3 id="模型中各个模块内容的使用"><a class="header-anchor" href="#模型中各个模块内容的使用"></a>模型中各个模块内容的使用</h3><ul><li>在这个模型中，master 和 develop 都具有象征意义。master 分支上的代码总是稳定的 (stable build)，随时可以发布出去。develop 上的代码总是从 feature 上合并过来的，可以进行 Nightly Builds，但不直接在 develop 上进行开发。当 develop 上的 featur 足够多以致于可以进行新版本的发布时，可以创建 release 分支。</li><li>release 分支基于 develop，进行委阴简单的修改后就被合并到 master，并打上 tag，表示可以发布了。紧接着 release 将被合并到 develop；此时 Develop 可能往前跑了一段，出现合并冲突，需要手工解决冲突后再次合并，这步完成后就删除 release 分支</li><li>当从已发布版本中发现 bug 要修复时，就应用到 hotfix 分支了。hotfix 基于 master 分支，完成 bug 修复或者紧急修改后，要 merge 回 master，打上一个新的 tag，并 merge 回 develop，删除 hotfix 分支。</li><li>由此可见 release 和 hotfix 的生命周期都较短，而 master 和 develop 虽然总是存在，但去不常使用。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> workflow </tag>
            
            <tag> 工作流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pandoc 命令</title>
      <link href="/archives/4032e239.html"/>
      <url>/archives/4032e239.html</url>
      
        <content type="html"><![CDATA[<h2 id="org-转换为-docx"><a class="header-anchor" href="#org-转换为-docx"></a>org 转换为 docx</h2><ul><li>基本命令</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandoc xxx.org -o xxx.docx</span><br></pre></td></tr></table></figure><ul><li>利用 css 进行配置着色</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandoc 01-chapter2.markdown -o chapter2.docx -c Github.css</span><br></pre></td></tr></table></figure><h2 id="org-转换为-letex"><a class="header-anchor" href="#org-转换为-letex"></a>org 转换为 letex</h2><ul><li>使用指定字体</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandoc pandocCh.org -o pandocCh.pdf --latex-engine=xelatex -V mainfont="SimSun"</span><br></pre></td></tr></table></figure><ul><li>使用指定模板</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandoc pandocCh.org -o pandocCh.pdf --latex-engine=xelatex -template=pm-template.latex</span><br></pre></td></tr></table></figure><h2 id="org-转换为-html"><a class="header-anchor" href="#org-转换为-html"></a>org 转换为 html</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandoc 01-chapter2.org -o chapter2.html -c Github.css</span><br></pre></td></tr></table></figure><h2 id="org-转换为-Markdown"><a class="header-anchor" href="#org-转换为-Markdown"></a>org 转换为 Markdown</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandoc -f org -t markdown -o output.md input.org</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Pandoc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> org </tag>
            
            <tag> docx </tag>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Graphviz dot 笔记</title>
      <link href="/archives/8ebf9d4.html"/>
      <url>/archives/8ebf9d4.html</url>
      
        <content type="html"><![CDATA[<h2 id="Dot-生成图的默认命令"><a class="header-anchor" href="#Dot-生成图的默认命令"></a>Dot 生成图的默认命令</h2><p><code>dot -T&lt;type&gt; -o &lt;outfile&gt; &lt;infile.dot&gt;</code></p><p>dot 可以替换为circo等其他算法，详细见<a href="#%E5%91%BD%E4%BB%A4%E7%9A%84%E9%80%89%E6%8B%A9">命令的选择</a>章节。</p><p>输入文件是 <strong>&lt;infile.dot&gt;</strong> ，生成的格式由 <strong><type></strong> 指定，生成的文件是 <strong><outfile></strong> 。其中 <strong>-T<type></strong> 包括：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-Tps (PostScript)</span><br><span class="line">-Tsvg -Tsvgz (Structured Vector Graphics)</span><br><span class="line">-Tfig (XFIG  graphics)</span><br><span class="line">-Tmif  (FrameMaker graphics)</span><br><span class="line">-Thpgl (HP pen plotters)</span><br><span class="line">-Tpcl (Laserjet printers)</span><br><span class="line">-Tpng -Tgif (bitmap graphics)</span><br><span class="line">-Tdia (GTK+ based diagrams)</span><br><span class="line">-Timap (imagemap files for httpd servers for each node or edge  that  has a non-null "href" attribute.)</span><br><span class="line">-Tcmapx (client-side imagemap for use in html and xhtml)</span><br></pre></td></tr></table></figure><h2 id="rank"><a class="header-anchor" href="#rank"></a>rank</h2><p>rank 约束了子图的节点位置，有向图中，一个箭头的指向，带有级别，一般是尾端高于尖端，即 <code>a-&gt;b</code> a 的级别要高于 b 的级别。</p><p>same : 所有节点在同一级别的节点处</p><p>min : 所有节点在最小级别节点处</p><p>source : 所有节点在最低级别，且只有子图属性为 <strong>source</strong> 或者 <strong>min</strong> 的时候，才能使用同样的级别</p><p>max : 类似于 <strong>source</strong></p><p>sink : 类似于 <strong>source</strong></p><blockquote><p><strong>NOTE:</strong> 最低级别，可以是 <strong>最上</strong> 、 <strong>最下</strong> 、 <strong>最左</strong> 、 <strong>最右</strong></p></blockquote><h2 id="rankdir"><a class="header-anchor" href="#rankdir"></a>rankdir</h2><ul><li>TB : top-to-bottom</li><li>LR : left-to-right</li><li>BT : bottom-to-top</li><li>RL : right-to-left</li></ul><h2 id="dot-线条"><a class="header-anchor" href="#dot-线条"></a>dot 线条</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">splines &#x3D; ortho #直角拆线</span><br><span class="line">splines &#x3D; spline #曲线（不遮挡）</span><br><span class="line">splines &#x3D; cuvved #曲线（可遮挡）</span><br><span class="line">splines &#x3D; line #直线（可遮挡）</span><br><span class="line">splines &#x3D; polyline #直线（不遮挡）</span><br></pre></td></tr></table></figure><h2 id="命令的选择"><a class="header-anchor" href="#命令的选择"></a>命令的选择</h2><table><thead><tr><th>命令</th><th>介绍</th></tr></thead><tbody><tr><td>dot</td><td>渲染图具有明确的方向性</td></tr><tr><td>neato</td><td>图缺乏方向性</td></tr><tr><td>twopi</td><td>图采用放射性布局</td></tr><tr><td>circo</td><td>图采用环形布局</td></tr><tr><td>fdp</td><td>图缺乏方向性</td></tr><tr><td>sfdp</td><td>用来渲染大型图，且图片缺乏方向性</td></tr></tbody></table><h2 id="静默执行代码"><a class="header-anchor" href="#静默执行代码"></a>静默执行代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(setq org-confirm-babel-evaluate nil) ;;执行静默语句块</span><br></pre></td></tr></table></figure><h2 id="dot-实例"><a class="header-anchor" href="#dot-实例"></a>dot 实例</h2><ul><li><p>绘制流程图:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">digraph structs &#123;</span><br><span class="line">node[shape&#x3D;record]</span><br><span class="line">struct1 [label&#x3D;&quot;&lt;f0&gt; left|&lt;f1&gt; mid\ dle|&lt;f2&gt; right&quot;];</span><br><span class="line">struct2 [label&#x3D;&quot;&#123;&lt;f0&gt; one|&lt;f1&gt; two\n\n\n&#125;&quot; shape&#x3D;Mrecord];</span><br><span class="line">struct3 [label&#x3D;&quot;hello\nworld |&#123; b |&#123;c|&lt;here&gt; d|e&#125;| f&#125;| g | h&quot;];</span><br><span class="line">struct1:f1 -&gt; struct2:f0;</span><br><span class="line">struct1:f0 -&gt; struct3:f1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><img src="https://cdn.jsdelivr.net/gh/zucchiniy/blog-assets@master/images/dot04.png" class="" title="dot-04"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">  digraph g &#123;</span><br><span class="line">  size&#x3D;&quot;8,6&quot;</span><br><span class="line">  ratio&#x3D;expand</span><br><span class="line">  edge [dir&#x3D;both]</span><br><span class="line">  plcnet [shape&#x3D;box, label&#x3D;&quot;plc network&quot;]</span><br><span class="line">  subgraph cluster_wrapline &#123;</span><br><span class="line">    label&#x3D;&quot;wrapline control system&quot;</span><br><span class="line">    color&#x3D;purple</span><br><span class="line">    subgraph &#123;</span><br><span class="line">    rank&#x3D;same</span><br><span class="line">    exec</span><br><span class="line">    sharedmem [style&#x3D;filled, fillcolor&#x3D;lightgrey, shape&#x3D;box]</span><br><span class="line">    &#125;</span><br><span class="line">    edge[style&#x3D;dotted, dir&#x3D;none]</span><br><span class="line">    exec -&gt; opserver</span><br><span class="line">    exec -&gt; db</span><br><span class="line">    plc -&gt; exec</span><br><span class="line">    edge [style&#x3D;line, dir&#x3D;both]</span><br><span class="line">    exec -&gt; sharedmem</span><br><span class="line">    sharedmem -&gt; db</span><br><span class="line">    plc -&gt; sharedmem</span><br><span class="line">    sharedmem -&gt; opserver</span><br><span class="line">  &#125;</span><br><span class="line">  plcnet -&gt; plc [constraint&#x3D;false]</span><br><span class="line">  millwide [shape&#x3D;box, label&#x3D;&quot;millwide system&quot;]</span><br><span class="line">  db -&gt; millwide</span><br><span class="line">  subgraph cluster_opclients &#123;</span><br><span class="line">    color&#x3D;blue</span><br><span class="line">    label&#x3D;&quot;operator client&quot;</span><br><span class="line">    rankdir&#x3D;lr</span><br><span class="line">    labelloc&#x3D;b</span><br><span class="line">    node[label&#x3D;client]</span><br><span class="line">    opserver -&gt; client1</span><br><span class="line">    opserver -&gt; client2</span><br><span class="line">    opserver -&gt; client3</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/zucchiniy/blog-assets@master/images/dot01.png" class="" title="dot-01"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">digraph G &#123;</span><br><span class="line">rankdir&#x3D;LR</span><br><span class="line">node [shape&#x3D;plaintext]</span><br><span class="line">a [</span><br><span class="line">label&#x3D;&lt;</span><br><span class="line">&lt;TABLE BORDER&#x3D;&quot;0&quot; CELLBORDER&#x3D;&quot;1&quot; CELLSPACING&#x3D;&quot;0&quot;&gt;</span><br><span class="line">&lt;TR&gt;&lt;TD ROWSPAN&#x3D;&quot;3&quot; BGCOLOR&#x3D;&quot;yellow&quot;&gt;class&lt;&#x2F;TD&gt;&lt;&#x2F;TR&gt;</span><br><span class="line">&lt;TR&gt;&lt;TD PORT&#x3D;&quot;here&quot; BGCOLOR&#x3D;&quot;lightblue&quot;&gt;qualifier&lt;&#x2F;TD&gt;&lt;&#x2F;TR&gt;</span><br><span class="line">&lt;&#x2F;TABLE&gt;&gt;</span><br><span class="line">]</span><br><span class="line">b [shape&#x3D;ellipse style&#x3D;filled</span><br><span class="line">label&#x3D;&lt;</span><br><span class="line">&lt;TABLE BGCOLOR&#x3D;&quot;bisque&quot;&gt;</span><br><span class="line">&lt;TR&gt;&lt;TD COLSPAN&#x3D;&quot;3&quot;&gt;elephant&lt;&#x2F;TD&gt;</span><br><span class="line">&lt;TD ROWSPAN&#x3D;&quot;2&quot; BGCOLOR&#x3D;&quot;chartreuse&quot;</span><br><span class="line">VALIGN&#x3D;&quot;bottom&quot; ALIGN&#x3D;&quot;right&quot;&gt;two&lt;&#x2F;TD&gt; &lt;&#x2F;TR&gt;</span><br><span class="line">&lt;TR&gt;&lt;TD COLSPAN&#x3D;&quot;2&quot; ROWSPAN&#x3D;&quot;2&quot;&gt;</span><br><span class="line">&lt;TABLE BGCOLOR&#x3D;&quot;grey&quot;&gt;</span><br><span class="line">&lt;TR&gt; &lt;TD&gt;corn&lt;&#x2F;TD&gt; &lt;&#x2F;TR&gt;</span><br><span class="line">&lt;TR&gt; &lt;TD BGCOLOR&#x3D;&quot;yellow&quot;&gt;c&lt;&#x2F;TD&gt; &lt;&#x2F;TR&gt;</span><br><span class="line">&lt;TR&gt; &lt;TD&gt;f&lt;&#x2F;TD&gt; &lt;&#x2F;TR&gt;</span><br><span class="line">&lt;&#x2F;TABLE&gt; &lt;&#x2F;TD&gt;</span><br><span class="line">&lt;TD BGCOLOR&#x3D;&quot;white&quot;&gt;penguin&lt;&#x2F;TD&gt;</span><br><span class="line">&lt;&#x2F;TR&gt;</span><br><span class="line">&lt;TR&gt; &lt;TD COLSPAN&#x3D;&quot;2&quot; BORDER&#x3D;&quot;4&quot; ALIGN&#x3D;&quot;right&quot; PORT&#x3D;&quot;there&quot;&gt;4&lt;&#x2F;TD&gt; &lt;&#x2F;TR&gt;</span><br><span class="line">&lt;&#x2F;TABLE&gt;&gt;</span><br><span class="line">]</span><br><span class="line">c [</span><br><span class="line">label&#x3D;&lt;long line 1&lt;BR&#x2F;&gt;line 2&lt;BR ALIGN&#x3D;&quot;LEFT&quot;&#x2F;&gt;line 3&lt;BR ALIGN&#x3D;&quot;RIGHT&quot;&#x2F;&gt;&gt;</span><br><span class="line">]</span><br><span class="line">subgraph &#123; rank&#x3D;same b c &#125;</span><br><span class="line">a:here -&gt; b:there [dir&#x3D;both arrowtail &#x3D; diamond]</span><br><span class="line">c -&gt; b</span><br><span class="line">d [shape&#x3D;triangle]</span><br><span class="line">d -&gt; c [label&#x3D;&lt;</span><br><span class="line">&lt;TABLE&gt;</span><br><span class="line">&lt;TR&gt;&lt;TD BGCOLOR&#x3D;&quot;red&quot; WIDTH&#x3D;&quot;10&quot;&gt; &lt;&#x2F;TD&gt;</span><br><span class="line">&lt;TD&gt;Edge labels&lt;BR&#x2F;&gt;also&lt;&#x2F;TD&gt;</span><br><span class="line">&lt;TD BGCOLOR&#x3D;&quot;blue&quot; WIDTH&#x3D;&quot;10&quot;&gt; &lt;&#x2F;TD&gt;</span><br><span class="line">&lt;&#x2F;TR&gt;</span><br><span class="line">&lt;&#x2F;TABLE&gt;&gt;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/zucchiniy/blog-assets@master/images/dot02.png" class="" title="dot-02">]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Emacs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dot </tag>
            
            <tag> graphviz </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS  语法入门</title>
      <link href="/archives/1e4744b6.html"/>
      <url>/archives/1e4744b6.html</url>
      
        <content type="html"><![CDATA[<p>CSS 是前端开发的基础。CSS 規則由兩個主要的部分構成:選擇器，以及一條或者多條聲明。<br>CSS 是前端开发的基础，主要由两个部分构成：</p><ol><li>选择器</li><li>声明，可以是单条，也可以是多条</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">selector &#123; declaration1; declaration2; ... declarationN;&#125;</span><br></pre></td></tr></table></figure><p>选择器通常是 HTML 中的元素。每条声明都是由一个属性和一个值构成，属性是希望设置的样式、属性，每个属性都有一个值，并用冒号分开。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">selector</span> &#123;<span class="attribute">property</span>: value&#125;</span><br></pre></td></tr></table></figure><p>下面代码的作用是将 <code>h1</code> 元素内的文字的颜色定义为红色，同时将字体的大小设置为 14 像素。</p><p>在这个例子中，<code>h1</code> 是选择器，<em>color</em> 和 <em>font-size</em> 是属性，<em>red</em> 和 <em>14px</em> 是值。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;<span class="attribute">color </span>: red; <span class="attribute">font-size</span>: <span class="number">14px</span>;&#125;</span><br></pre></td></tr></table></figure><p>如果值是多个词组，可以给值增加引号。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123; <span class="attribute">font-family</span>: <span class="string">"sans serif"</span>;&#125;</span><br></pre></td></tr></table></figure><p>如果林定义不止一个声明，则需要用分号将每个声明隔开。</p><p>下面的示例是将段落的字体定义为红色且居中。</p><p>虽然最后一个属性是不需要增加分号的，但是为了以后修改，最好在每条属性后面都增加分号分隔符。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: black;</span><br><span class="line">  <span class="attribute">font-family</span>: arial;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子元素总是继承你元素的属性。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">     <span class="attribute">font-family</span>: Vrdana, sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，在 body 属性下的元素：p, td, ul, ol, li, dl, dt, dd 等都会继承 body 中定义的字体，同样继承来的值也可以进行重写。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123; <span class="attribute">font-family</span>: Vrdana;&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123; <span class="attribute">font-family</span>: Times;&#125;</span><br></pre></td></tr></table></figure><p>选择器、派生选择器：通过依据元素位置的上下文件关系来定义的样式。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">li</span> <span class="selector-tag">strong</span> &#123;</span><br><span class="line">    <span class="attribute">font-style</span>: italic;</span><br><span class="line">    <span class="attribute">font-weight</span>: normal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ID 选择器：可以为标有特定 ID 的元素指定样式。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#red</span> &#123; <span class="attribute">color</span>: red;&#125;</span><br></pre></td></tr></table></figure><p>ID 选择器也可以和派生选择器一起使用。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#sidebar</span> <span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">font-style</span>: italic;</span><br><span class="line">    <span class="attribute">text-align</span>: right;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">0.5em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>单独选择器：可以单独发挥作用的选择器。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#sidebar</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> dotted <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类选择器：以一个点号作为开头。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.center</span> &#123; <span class="attribute">text-align</span>: center;&#125;</span><br></pre></td></tr></table></figure><p>也可以用作派生选择器上。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.fancy</span> <span class="selector-tag">td</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#f60</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#666</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>元素也可以基于它们的类而被选择。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">td</span><span class="selector-class">.fancy</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#f60</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#666</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的两个示例中，第一个是类名为 fancy 的元素内容属性设置，下面的则是指 <code>&lt;td class='fancy'&gt;</code> 的元素的属性设置。</p><table><thead><tr><th>选择器</th><th>描述</th></tr></thead><tbody><tr><td>[attribut]</td><td>用于选取带有指定属性的元素</td></tr><tr><td>[attribut=value]</td><td>用于选取带有指定属性和值的元素</td></tr><tr><td>[attribut~=value]</td><td>用于选取属性值中包含指定词条的元素</td></tr><tr><td>[attribut|=value]</td><td>用于选取带有以指定开头的属性值的元素，该值必须是整个单词</td></tr><tr><td>[attribut^=value]</td><td>匹配属性值以指定值开头的每个元素</td></tr><tr><td>[attribut$=value]</td><td>匹配属性值以指定值结尾的每个元素</td></tr><tr><td>[attribut*=value]</td><td>匹配属性值中包含指定值的每个元素</td></tr></tbody></table><p>CSS 允许应用纯色做为背景，也允许使用背景图片创建一个繁杂的效果。</p><p>可以使用 <strong>background-color</strong> 指定背景色，这个属性接受任务合法的颜色值。可以利用这个将背景色配置为灰色。<strong>background-color</strong> 是不能被继承的。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123; <span class="attribute">background-color</span>: gray;&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123; <span class="attribute">background-color</span>: gray; <span class="attribute">padding</span>:<span class="number">20px</span>;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gcc/g++ 命令</title>
      <link href="/archives/a4921194.html"/>
      <url>/archives/a4921194.html</url>
      
        <content type="html"><![CDATA[<p>gcc -E sourcefile.c :  -E，只执行到预编译，直接输出预编译结果</p><p>gcc -S sourcefile.c :  -S，只执行到源代码到汇编代码的转换，输出汇编代码</p><p>gcc -c sourcefile.c :  -c，只执行到编译，输出目标文件</p><p>gcc (-E/-S/-c) sourcefile.c -o output-file :  -o，指定输出文件名，可以使用以上三种标签中的一种。</p><p>-o 参数可以被省略，这种情况下编译器按以下默认名方式输出: <br /><br>-E 预编译结果将被输出到标准输出端口<br /><br>-S 生成名为 sourcefile.s 的汇编文件<br /><br>-c 生成名为 sourcefile.o 的目标文件<br /></p><p><strong>无标签的时候，生成名为 a.out 的可执行文件</strong></p><p>gcc -g sourcefile.c<br>:  -g 生成供调用的可执行文件，可以在 gdb 中运行。由于文件中包含了调试信息，因此运行效率很低，且文件也大了不少。</p><p>这里可以用 strip 把文件中的 debug 信息删除。 <code>strip a.out</code></p><p>gcc -s sourcefile.c<br>:  -s 直接生成与运用 strip 同样的效果的可执行文件</p><p>gcc -O sourcefile.c<br>:  -O 编译器对代码进行自动化编译，输出效率更高的可执行文件</p><pre><code>&lt;p class=&quot;verse&quot;&gt;-O2 可以跟上数字表示优化等级 gcc -O2 sourcefile.c 数字越大越加优化。但是也会有出 bug 的风险&lt;br /&gt;&lt;/p&gt;</code></pre><p>gcc -Wall sourcefile.c<br>:  -W 在编译中开启一些额外的警告信息。-Wall，将所有的警告信息全开。</p><p>gcc sourcefile.c -L/path/to/lib -lxxx -l/path/to/include<br>:  <p class="verse"><br>- -l 指定所使用到的函数库，本例中是尝试链接名为 libxxx.a 的函数库<br /><br>- -L 指定函数库所在的文件，本例中链接器会尝试搜索/path/to/lib 文件夹<br /><br>- -I 指定文件所在的文件夹，本例中预编译器会尝试搜索/path/to/include 文件夹<br /><br></p></p>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> GCC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gcc </tag>
            
            <tag> g++ </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
